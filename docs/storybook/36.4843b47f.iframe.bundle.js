/*! For license information please see 36.4843b47f.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkreact_neuro=self.webpackChunkreact_neuro||[]).push([[36],{"./node_modules/@google/genai/dist/web/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{M4:()=>GoogleGenAI});class BaseModule{}function formatMap(templateString,valueMap){return templateString.replace(/\{([^}]+)\}/g,((match,key)=>{if(Object.prototype.hasOwnProperty.call(valueMap,key)){const value=valueMap[key];return null!=value?String(value):""}throw new Error(`Key '${key}' not found in valueMap.`)}))}function setValueByPath(data,keys,value){for(let i=0;i<keys.length-1;i++){const key=keys[i];if(key.endsWith("[]")){const keyName=key.slice(0,-2);if(!(keyName in data)){if(!Array.isArray(value))throw new Error(`Value must be a list given an array path ${key}`);data[keyName]=Array.from({length:value.length},(()=>({})))}if(Array.isArray(data[keyName])){const arrayData=data[keyName];if(Array.isArray(value))for(let j=0;j<arrayData.length;j++){setValueByPath(arrayData[j],keys.slice(i+1),value[j])}else for(const d of arrayData)setValueByPath(d,keys.slice(i+1),value)}return}if(key.endsWith("[0]")){const keyName=key.slice(0,-3);keyName in data||(data[keyName]=[{}]);return void setValueByPath(data[keyName][0],keys.slice(i+1),value)}data[key]&&"object"==typeof data[key]||(data[key]={}),data=data[key]}const keyToSet=keys[keys.length-1],existingData=data[keyToSet];if(void 0!==existingData){if(!value||"object"==typeof value&&0===Object.keys(value).length)return;if(value===existingData)return;if("object"!=typeof existingData||"object"!=typeof value||null===existingData||null===value)throw new Error(`Cannot set value for an existing key. Key: ${keyToSet}`);Object.assign(existingData,value)}else data[keyToSet]=value}function getValueByPath(data,keys){try{if(1===keys.length&&"_self"===keys[0])return data;for(let i=0;i<keys.length;i++){if("object"!=typeof data||null===data)return;const key=keys[i];if(key.endsWith("[]")){const keyName=key.slice(0,-2);if(keyName in data){const arrayData=data[keyName];if(!Array.isArray(arrayData))return;return arrayData.map((d=>getValueByPath(d,keys.slice(i+1))))}return}data=data[key]}return data}catch(error){if(error instanceof TypeError)return;throw error}}function tModel(apiClient,model){if(!model||"string"!=typeof model)throw new Error("model is required and must be a string");if(apiClient.isVertexAI()){if(model.startsWith("publishers/")||model.startsWith("projects/")||model.startsWith("models/"))return model;if(model.indexOf("/")>=0){const parts=model.split("/",2);return`publishers/${parts[0]}/models/${parts[1]}`}return`publishers/google/models/${model}`}return model.startsWith("models/")||model.startsWith("tunedModels/")?model:`models/${model}`}function tCachesModel(apiClient,model){const transformedModel=tModel(apiClient,model);return transformedModel?transformedModel.startsWith("publishers/")&&apiClient.isVertexAI()?`projects/${apiClient.getProject()}/locations/${apiClient.getLocation()}/${transformedModel}`:transformedModel.startsWith("models/")&&apiClient.isVertexAI()?`projects/${apiClient.getProject()}/locations/${apiClient.getLocation()}/publishers/google/${transformedModel}`:transformedModel:""}function tPart(apiClient,origin){if(null==origin)throw new Error("PartUnion is required");if("object"==typeof origin)return origin;if("string"==typeof origin)return{text:origin};throw new Error("Unsupported part type: "+typeof origin)}function tParts(apiClient,origin){if(null==origin||Array.isArray(origin)&&0===origin.length)throw new Error("PartListUnion is required");return Array.isArray(origin)?origin.map((item=>tPart(0,item))):[tPart(0,origin)]}function _isContent(origin){return null!=origin&&"object"==typeof origin&&"parts"in origin&&Array.isArray(origin.parts)}function _isFunctionCallPart(origin){return null!=origin&&"object"==typeof origin&&"functionCall"in origin}function _isFunctionResponsePart(origin){return null!=origin&&"object"==typeof origin&&"functionResponse"in origin}function tContent(apiClient,origin){if(null==origin)throw new Error("ContentUnion is required");return _isContent(origin)?origin:{role:"user",parts:tParts(0,origin)}}function tContentsForEmbed(apiClient,origin){if(!origin)return[];if(apiClient.isVertexAI()&&Array.isArray(origin))return origin.flatMap((item=>{const content=tContent(0,item);return content.parts&&content.parts.length>0&&void 0!==content.parts[0].text?[content.parts[0].text]:[]}));if(apiClient.isVertexAI()){const content=tContent(0,origin);return content.parts&&content.parts.length>0&&void 0!==content.parts[0].text?[content.parts[0].text]:[]}return Array.isArray(origin)?origin.map((item=>tContent(0,item))):[tContent(0,origin)]}function tContents(apiClient,origin){if(null==origin||Array.isArray(origin)&&0===origin.length)throw new Error("contents are required");if(!Array.isArray(origin)){if(_isFunctionCallPart(origin)||_isFunctionResponsePart(origin))throw new Error("To specify functionCall or functionResponse parts, please wrap them in a Content object, specifying the role for them");return[tContent(0,origin)]}const result=[],accumulatedParts=[],isContentArray=_isContent(origin[0]);for(const item of origin){const isContent=_isContent(item);if(isContent!=isContentArray)throw new Error("Mixing Content and Parts is not supported, please group the parts into a the appropriate Content objects and specify the roles for them");if(isContent)result.push(item);else{if(_isFunctionCallPart(item)||_isFunctionResponsePart(item))throw new Error("To specify functionCall or functionResponse parts, please wrap them, and any other parts, in Content objects as appropriate, specifying the role for them");accumulatedParts.push(item)}}return isContentArray||result.push({role:"user",parts:tParts(0,accumulatedParts)}),result}function processSchema(apiClient,schema){if(!apiClient.isVertexAI()&&"default"in schema)throw new Error("Default value is not supported in the response schema for the Gemini API.");if("anyOf"in schema&&void 0!==schema.anyOf)for(const subSchema of schema.anyOf)processSchema(apiClient,subSchema);if("items"in schema&&void 0!==schema.items&&processSchema(apiClient,schema.items),"properties"in schema&&void 0!==schema.properties)for(const subSchema of Object.values(schema.properties))processSchema(apiClient,subSchema)}function tSchema(apiClient,schema){return processSchema(apiClient,schema),schema}function tSpeechConfig(apiClient,speechConfig){if("object"==typeof speechConfig&&"voiceConfig"in speechConfig)return speechConfig;if("string"==typeof speechConfig)return{voiceConfig:{prebuiltVoiceConfig:{voiceName:speechConfig}}};throw new Error("Unsupported speechConfig type: "+typeof speechConfig)}function tTool(apiClient,tool){return tool}function tTools(apiClient,tool){if(!Array.isArray(tool))throw new Error("tool is required and must be an array of Tools");return tool}function tCachedContentName(apiClient,name){if("string"!=typeof name)throw new Error("name must be a string");return function resourceName(client,resourceName,resourcePrefix,splitsAfterPrefix=1){const shouldAppendPrefix=!resourceName.startsWith(`${resourcePrefix}/`)&&resourceName.split("/").length===splitsAfterPrefix;return client.isVertexAI()?resourceName.startsWith("projects/")?resourceName:resourceName.startsWith("locations/")?`projects/${client.getProject()}/${resourceName}`:resourceName.startsWith(`${resourcePrefix}/`)?`projects/${client.getProject()}/locations/${client.getLocation()}/${resourceName}`:shouldAppendPrefix?`projects/${client.getProject()}/locations/${client.getLocation()}/${resourcePrefix}/${resourceName}`:resourceName:shouldAppendPrefix?`${resourcePrefix}/${resourceName}`:resourceName}(apiClient,name,"cachedContents")}function tBytes(apiClient,fromImageBytes){if("string"!=typeof fromImageBytes)throw new Error("fromImageBytes must be a string");return fromImageBytes}function tFileName(apiClient,fromName){if("string"!=typeof fromName)throw new Error("fromName must be a string");return fromName.startsWith("files/")?fromName.split("files/")[1]:fromName}function contentToMldev$2(apiClient,fromObject){const toObject={},fromParts=getValueByPath(fromObject,["parts"]);null!=fromParts&&(Array.isArray(fromParts)?setValueByPath(toObject,["parts"],fromParts.map((item=>function partToMldev$2(apiClient,fromObject){const toObject={};if(void 0!==getValueByPath(fromObject,["videoMetadata"]))throw new Error("videoMetadata parameter is not supported in Gemini API.");const fromThought=getValueByPath(fromObject,["thought"]);null!=fromThought&&setValueByPath(toObject,["thought"],fromThought);const fromCodeExecutionResult=getValueByPath(fromObject,["codeExecutionResult"]);null!=fromCodeExecutionResult&&setValueByPath(toObject,["codeExecutionResult"],fromCodeExecutionResult);const fromExecutableCode=getValueByPath(fromObject,["executableCode"]);null!=fromExecutableCode&&setValueByPath(toObject,["executableCode"],fromExecutableCode);const fromFileData=getValueByPath(fromObject,["fileData"]);null!=fromFileData&&setValueByPath(toObject,["fileData"],fromFileData);const fromFunctionCall=getValueByPath(fromObject,["functionCall"]);null!=fromFunctionCall&&setValueByPath(toObject,["functionCall"],fromFunctionCall);const fromFunctionResponse=getValueByPath(fromObject,["functionResponse"]);null!=fromFunctionResponse&&setValueByPath(toObject,["functionResponse"],fromFunctionResponse);const fromInlineData=getValueByPath(fromObject,["inlineData"]);null!=fromInlineData&&setValueByPath(toObject,["inlineData"],fromInlineData);const fromText=getValueByPath(fromObject,["text"]);return null!=fromText&&setValueByPath(toObject,["text"],fromText),toObject}(0,item)))):setValueByPath(toObject,["parts"],fromParts));const fromRole=getValueByPath(fromObject,["role"]);return null!=fromRole&&setValueByPath(toObject,["role"],fromRole),toObject}function googleSearchRetrievalToMldev$2(apiClient,fromObject){const toObject={},fromDynamicRetrievalConfig=getValueByPath(fromObject,["dynamicRetrievalConfig"]);return null!=fromDynamicRetrievalConfig&&setValueByPath(toObject,["dynamicRetrievalConfig"],function dynamicRetrievalConfigToMldev$2(apiClient,fromObject){const toObject={},fromMode=getValueByPath(fromObject,["mode"]);null!=fromMode&&setValueByPath(toObject,["mode"],fromMode);const fromDynamicThreshold=getValueByPath(fromObject,["dynamicThreshold"]);return null!=fromDynamicThreshold&&setValueByPath(toObject,["dynamicThreshold"],fromDynamicThreshold),toObject}(0,fromDynamicRetrievalConfig)),toObject}function toolToMldev$2(apiClient,fromObject){const toObject={},fromFunctionDeclarations=getValueByPath(fromObject,["functionDeclarations"]);if(null!=fromFunctionDeclarations&&(Array.isArray(fromFunctionDeclarations)?setValueByPath(toObject,["functionDeclarations"],fromFunctionDeclarations.map((item=>function functionDeclarationToMldev$2(apiClient,fromObject){const toObject={};if(void 0!==getValueByPath(fromObject,["response"]))throw new Error("response parameter is not supported in Gemini API.");const fromDescription=getValueByPath(fromObject,["description"]);null!=fromDescription&&setValueByPath(toObject,["description"],fromDescription);const fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["name"],fromName);const fromParameters=getValueByPath(fromObject,["parameters"]);return null!=fromParameters&&setValueByPath(toObject,["parameters"],fromParameters),toObject}(0,item)))):setValueByPath(toObject,["functionDeclarations"],fromFunctionDeclarations)),void 0!==getValueByPath(fromObject,["retrieval"]))throw new Error("retrieval parameter is not supported in Gemini API.");null!=getValueByPath(fromObject,["googleSearch"])&&setValueByPath(toObject,["googleSearch"],{});const fromGoogleSearchRetrieval=getValueByPath(fromObject,["googleSearchRetrieval"]);null!=fromGoogleSearchRetrieval&&setValueByPath(toObject,["googleSearchRetrieval"],googleSearchRetrievalToMldev$2(0,fromGoogleSearchRetrieval));const fromCodeExecution=getValueByPath(fromObject,["codeExecution"]);return null!=fromCodeExecution&&setValueByPath(toObject,["codeExecution"],fromCodeExecution),toObject}function toolConfigToMldev$1(apiClient,fromObject){const toObject={},fromFunctionCallingConfig=getValueByPath(fromObject,["functionCallingConfig"]);return null!=fromFunctionCallingConfig&&setValueByPath(toObject,["functionCallingConfig"],function functionCallingConfigToMldev$1(apiClient,fromObject){const toObject={},fromMode=getValueByPath(fromObject,["mode"]);null!=fromMode&&setValueByPath(toObject,["mode"],fromMode);const fromAllowedFunctionNames=getValueByPath(fromObject,["allowedFunctionNames"]);return null!=fromAllowedFunctionNames&&setValueByPath(toObject,["allowedFunctionNames"],fromAllowedFunctionNames),toObject}(0,fromFunctionCallingConfig)),toObject}function createCachedContentParametersToMldev(apiClient,fromObject){const toObject={},fromModel=getValueByPath(fromObject,["model"]);null!=fromModel&&setValueByPath(toObject,["model"],tCachesModel(apiClient,fromModel));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],function createCachedContentConfigToMldev(apiClient,fromObject,parentObject){const fromTtl=getValueByPath(fromObject,["ttl"]);void 0!==parentObject&&null!=fromTtl&&setValueByPath(parentObject,["ttl"],fromTtl);const fromExpireTime=getValueByPath(fromObject,["expireTime"]);void 0!==parentObject&&null!=fromExpireTime&&setValueByPath(parentObject,["expireTime"],fromExpireTime);const fromDisplayName=getValueByPath(fromObject,["displayName"]);void 0!==parentObject&&null!=fromDisplayName&&setValueByPath(parentObject,["displayName"],fromDisplayName);const fromContents=getValueByPath(fromObject,["contents"]);void 0!==parentObject&&null!=fromContents&&(Array.isArray(fromContents)?setValueByPath(parentObject,["contents"],tContents(0,tContents(0,fromContents).map((item=>contentToMldev$2(0,item))))):setValueByPath(parentObject,["contents"],tContents(0,fromContents)));const fromSystemInstruction=getValueByPath(fromObject,["systemInstruction"]);void 0!==parentObject&&null!=fromSystemInstruction&&setValueByPath(parentObject,["systemInstruction"],contentToMldev$2(0,tContent(0,fromSystemInstruction)));const fromTools=getValueByPath(fromObject,["tools"]);void 0!==parentObject&&null!=fromTools&&(Array.isArray(fromTools)?setValueByPath(parentObject,["tools"],fromTools.map((item=>toolToMldev$2(0,item)))):setValueByPath(parentObject,["tools"],fromTools));const fromToolConfig=getValueByPath(fromObject,["toolConfig"]);return void 0!==parentObject&&null!=fromToolConfig&&setValueByPath(parentObject,["toolConfig"],toolConfigToMldev$1(0,fromToolConfig)),{}}(0,fromConfig,toObject)),toObject}function updateCachedContentParametersToMldev(apiClient,fromObject){const toObject={},fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["_url","name"],tCachedContentName(apiClient,fromName));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],function updateCachedContentConfigToMldev(apiClient,fromObject,parentObject){const fromTtl=getValueByPath(fromObject,["ttl"]);void 0!==parentObject&&null!=fromTtl&&setValueByPath(parentObject,["ttl"],fromTtl);const fromExpireTime=getValueByPath(fromObject,["expireTime"]);return void 0!==parentObject&&null!=fromExpireTime&&setValueByPath(parentObject,["expireTime"],fromExpireTime),{}}(0,fromConfig,toObject)),toObject}function listCachedContentsParametersToMldev(apiClient,fromObject){const toObject={},fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],function listCachedContentsConfigToMldev(apiClient,fromObject,parentObject){const fromPageSize=getValueByPath(fromObject,["pageSize"]);void 0!==parentObject&&null!=fromPageSize&&setValueByPath(parentObject,["_query","pageSize"],fromPageSize);const fromPageToken=getValueByPath(fromObject,["pageToken"]);return void 0!==parentObject&&null!=fromPageToken&&setValueByPath(parentObject,["_query","pageToken"],fromPageToken),{}}(0,fromConfig,toObject)),toObject}function contentToVertex$2(apiClient,fromObject){const toObject={},fromParts=getValueByPath(fromObject,["parts"]);null!=fromParts&&(Array.isArray(fromParts)?setValueByPath(toObject,["parts"],fromParts.map((item=>function partToVertex$2(apiClient,fromObject){const toObject={},fromVideoMetadata=getValueByPath(fromObject,["videoMetadata"]);null!=fromVideoMetadata&&setValueByPath(toObject,["videoMetadata"],fromVideoMetadata);const fromThought=getValueByPath(fromObject,["thought"]);null!=fromThought&&setValueByPath(toObject,["thought"],fromThought);const fromCodeExecutionResult=getValueByPath(fromObject,["codeExecutionResult"]);null!=fromCodeExecutionResult&&setValueByPath(toObject,["codeExecutionResult"],fromCodeExecutionResult);const fromExecutableCode=getValueByPath(fromObject,["executableCode"]);null!=fromExecutableCode&&setValueByPath(toObject,["executableCode"],fromExecutableCode);const fromFileData=getValueByPath(fromObject,["fileData"]);null!=fromFileData&&setValueByPath(toObject,["fileData"],fromFileData);const fromFunctionCall=getValueByPath(fromObject,["functionCall"]);null!=fromFunctionCall&&setValueByPath(toObject,["functionCall"],fromFunctionCall);const fromFunctionResponse=getValueByPath(fromObject,["functionResponse"]);null!=fromFunctionResponse&&setValueByPath(toObject,["functionResponse"],fromFunctionResponse);const fromInlineData=getValueByPath(fromObject,["inlineData"]);null!=fromInlineData&&setValueByPath(toObject,["inlineData"],fromInlineData);const fromText=getValueByPath(fromObject,["text"]);return null!=fromText&&setValueByPath(toObject,["text"],fromText),toObject}(0,item)))):setValueByPath(toObject,["parts"],fromParts));const fromRole=getValueByPath(fromObject,["role"]);return null!=fromRole&&setValueByPath(toObject,["role"],fromRole),toObject}function functionDeclarationToVertex$2(apiClient,fromObject){const toObject={},fromResponse=getValueByPath(fromObject,["response"]);null!=fromResponse&&setValueByPath(toObject,["response"],function schemaToVertex$2(apiClient,fromObject){const toObject={},fromExample=getValueByPath(fromObject,["example"]);null!=fromExample&&setValueByPath(toObject,["example"],fromExample);const fromPattern=getValueByPath(fromObject,["pattern"]);null!=fromPattern&&setValueByPath(toObject,["pattern"],fromPattern);const fromDefault=getValueByPath(fromObject,["default"]);null!=fromDefault&&setValueByPath(toObject,["default"],fromDefault);const fromMaxLength=getValueByPath(fromObject,["maxLength"]);null!=fromMaxLength&&setValueByPath(toObject,["maxLength"],fromMaxLength);const fromMinLength=getValueByPath(fromObject,["minLength"]);null!=fromMinLength&&setValueByPath(toObject,["minLength"],fromMinLength);const fromMinProperties=getValueByPath(fromObject,["minProperties"]);null!=fromMinProperties&&setValueByPath(toObject,["minProperties"],fromMinProperties);const fromMaxProperties=getValueByPath(fromObject,["maxProperties"]);null!=fromMaxProperties&&setValueByPath(toObject,["maxProperties"],fromMaxProperties);const fromAnyOf=getValueByPath(fromObject,["anyOf"]);null!=fromAnyOf&&setValueByPath(toObject,["anyOf"],fromAnyOf);const fromDescription=getValueByPath(fromObject,["description"]);null!=fromDescription&&setValueByPath(toObject,["description"],fromDescription);const fromEnum=getValueByPath(fromObject,["enum"]);null!=fromEnum&&setValueByPath(toObject,["enum"],fromEnum);const fromFormat=getValueByPath(fromObject,["format"]);null!=fromFormat&&setValueByPath(toObject,["format"],fromFormat);const fromItems=getValueByPath(fromObject,["items"]);null!=fromItems&&setValueByPath(toObject,["items"],fromItems);const fromMaxItems=getValueByPath(fromObject,["maxItems"]);null!=fromMaxItems&&setValueByPath(toObject,["maxItems"],fromMaxItems);const fromMaximum=getValueByPath(fromObject,["maximum"]);null!=fromMaximum&&setValueByPath(toObject,["maximum"],fromMaximum);const fromMinItems=getValueByPath(fromObject,["minItems"]);null!=fromMinItems&&setValueByPath(toObject,["minItems"],fromMinItems);const fromMinimum=getValueByPath(fromObject,["minimum"]);null!=fromMinimum&&setValueByPath(toObject,["minimum"],fromMinimum);const fromNullable=getValueByPath(fromObject,["nullable"]);null!=fromNullable&&setValueByPath(toObject,["nullable"],fromNullable);const fromProperties=getValueByPath(fromObject,["properties"]);null!=fromProperties&&setValueByPath(toObject,["properties"],fromProperties);const fromPropertyOrdering=getValueByPath(fromObject,["propertyOrdering"]);null!=fromPropertyOrdering&&setValueByPath(toObject,["propertyOrdering"],fromPropertyOrdering);const fromRequired=getValueByPath(fromObject,["required"]);null!=fromRequired&&setValueByPath(toObject,["required"],fromRequired);const fromTitle=getValueByPath(fromObject,["title"]);null!=fromTitle&&setValueByPath(toObject,["title"],fromTitle);const fromType=getValueByPath(fromObject,["type"]);return null!=fromType&&setValueByPath(toObject,["type"],fromType),toObject}(0,fromResponse));const fromDescription=getValueByPath(fromObject,["description"]);null!=fromDescription&&setValueByPath(toObject,["description"],fromDescription);const fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["name"],fromName);const fromParameters=getValueByPath(fromObject,["parameters"]);return null!=fromParameters&&setValueByPath(toObject,["parameters"],fromParameters),toObject}function googleSearchRetrievalToVertex$2(apiClient,fromObject){const toObject={},fromDynamicRetrievalConfig=getValueByPath(fromObject,["dynamicRetrievalConfig"]);return null!=fromDynamicRetrievalConfig&&setValueByPath(toObject,["dynamicRetrievalConfig"],function dynamicRetrievalConfigToVertex$2(apiClient,fromObject){const toObject={},fromMode=getValueByPath(fromObject,["mode"]);null!=fromMode&&setValueByPath(toObject,["mode"],fromMode);const fromDynamicThreshold=getValueByPath(fromObject,["dynamicThreshold"]);return null!=fromDynamicThreshold&&setValueByPath(toObject,["dynamicThreshold"],fromDynamicThreshold),toObject}(0,fromDynamicRetrievalConfig)),toObject}function toolConfigToVertex$1(apiClient,fromObject){const toObject={},fromFunctionCallingConfig=getValueByPath(fromObject,["functionCallingConfig"]);return null!=fromFunctionCallingConfig&&setValueByPath(toObject,["functionCallingConfig"],function functionCallingConfigToVertex$1(apiClient,fromObject){const toObject={},fromMode=getValueByPath(fromObject,["mode"]);null!=fromMode&&setValueByPath(toObject,["mode"],fromMode);const fromAllowedFunctionNames=getValueByPath(fromObject,["allowedFunctionNames"]);return null!=fromAllowedFunctionNames&&setValueByPath(toObject,["allowedFunctionNames"],fromAllowedFunctionNames),toObject}(0,fromFunctionCallingConfig)),toObject}function createCachedContentConfigToVertex(apiClient,fromObject,parentObject){const fromTtl=getValueByPath(fromObject,["ttl"]);void 0!==parentObject&&null!=fromTtl&&setValueByPath(parentObject,["ttl"],fromTtl);const fromExpireTime=getValueByPath(fromObject,["expireTime"]);void 0!==parentObject&&null!=fromExpireTime&&setValueByPath(parentObject,["expireTime"],fromExpireTime);const fromDisplayName=getValueByPath(fromObject,["displayName"]);void 0!==parentObject&&null!=fromDisplayName&&setValueByPath(parentObject,["displayName"],fromDisplayName);const fromContents=getValueByPath(fromObject,["contents"]);void 0!==parentObject&&null!=fromContents&&(Array.isArray(fromContents)?setValueByPath(parentObject,["contents"],tContents(0,tContents(0,fromContents).map((item=>contentToVertex$2(0,item))))):setValueByPath(parentObject,["contents"],tContents(0,fromContents)));const fromSystemInstruction=getValueByPath(fromObject,["systemInstruction"]);void 0!==parentObject&&null!=fromSystemInstruction&&setValueByPath(parentObject,["systemInstruction"],contentToVertex$2(0,tContent(0,fromSystemInstruction)));const fromTools=getValueByPath(fromObject,["tools"]);void 0!==parentObject&&null!=fromTools&&(Array.isArray(fromTools)?setValueByPath(parentObject,["tools"],fromTools.map((item=>function toolToVertex$2(apiClient,fromObject){const toObject={},fromFunctionDeclarations=getValueByPath(fromObject,["functionDeclarations"]);null!=fromFunctionDeclarations&&(Array.isArray(fromFunctionDeclarations)?setValueByPath(toObject,["functionDeclarations"],fromFunctionDeclarations.map((item=>functionDeclarationToVertex$2(0,item)))):setValueByPath(toObject,["functionDeclarations"],fromFunctionDeclarations));const fromRetrieval=getValueByPath(fromObject,["retrieval"]);null!=fromRetrieval&&setValueByPath(toObject,["retrieval"],fromRetrieval),null!=getValueByPath(fromObject,["googleSearch"])&&setValueByPath(toObject,["googleSearch"],{});const fromGoogleSearchRetrieval=getValueByPath(fromObject,["googleSearchRetrieval"]);null!=fromGoogleSearchRetrieval&&setValueByPath(toObject,["googleSearchRetrieval"],googleSearchRetrievalToVertex$2(0,fromGoogleSearchRetrieval));const fromCodeExecution=getValueByPath(fromObject,["codeExecution"]);return null!=fromCodeExecution&&setValueByPath(toObject,["codeExecution"],fromCodeExecution),toObject}(0,item)))):setValueByPath(parentObject,["tools"],fromTools));const fromToolConfig=getValueByPath(fromObject,["toolConfig"]);return void 0!==parentObject&&null!=fromToolConfig&&setValueByPath(parentObject,["toolConfig"],toolConfigToVertex$1(0,fromToolConfig)),{}}function updateCachedContentParametersToVertex(apiClient,fromObject){const toObject={},fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["_url","name"],tCachedContentName(apiClient,fromName));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],function updateCachedContentConfigToVertex(apiClient,fromObject,parentObject){const fromTtl=getValueByPath(fromObject,["ttl"]);void 0!==parentObject&&null!=fromTtl&&setValueByPath(parentObject,["ttl"],fromTtl);const fromExpireTime=getValueByPath(fromObject,["expireTime"]);return void 0!==parentObject&&null!=fromExpireTime&&setValueByPath(parentObject,["expireTime"],fromExpireTime),{}}(0,fromConfig,toObject)),toObject}function listCachedContentsParametersToVertex(apiClient,fromObject){const toObject={},fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],function listCachedContentsConfigToVertex(apiClient,fromObject,parentObject){const fromPageSize=getValueByPath(fromObject,["pageSize"]);void 0!==parentObject&&null!=fromPageSize&&setValueByPath(parentObject,["_query","pageSize"],fromPageSize);const fromPageToken=getValueByPath(fromObject,["pageToken"]);return void 0!==parentObject&&null!=fromPageToken&&setValueByPath(parentObject,["_query","pageToken"],fromPageToken),{}}(0,fromConfig,toObject)),toObject}function cachedContentFromMldev(apiClient,fromObject){const toObject={},fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["name"],fromName);const fromDisplayName=getValueByPath(fromObject,["displayName"]);null!=fromDisplayName&&setValueByPath(toObject,["displayName"],fromDisplayName);const fromModel=getValueByPath(fromObject,["model"]);null!=fromModel&&setValueByPath(toObject,["model"],fromModel);const fromCreateTime=getValueByPath(fromObject,["createTime"]);null!=fromCreateTime&&setValueByPath(toObject,["createTime"],fromCreateTime);const fromUpdateTime=getValueByPath(fromObject,["updateTime"]);null!=fromUpdateTime&&setValueByPath(toObject,["updateTime"],fromUpdateTime);const fromExpireTime=getValueByPath(fromObject,["expireTime"]);null!=fromExpireTime&&setValueByPath(toObject,["expireTime"],fromExpireTime);const fromUsageMetadata=getValueByPath(fromObject,["usageMetadata"]);return null!=fromUsageMetadata&&setValueByPath(toObject,["usageMetadata"],fromUsageMetadata),toObject}function cachedContentFromVertex(apiClient,fromObject){const toObject={},fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["name"],fromName);const fromDisplayName=getValueByPath(fromObject,["displayName"]);null!=fromDisplayName&&setValueByPath(toObject,["displayName"],fromDisplayName);const fromModel=getValueByPath(fromObject,["model"]);null!=fromModel&&setValueByPath(toObject,["model"],fromModel);const fromCreateTime=getValueByPath(fromObject,["createTime"]);null!=fromCreateTime&&setValueByPath(toObject,["createTime"],fromCreateTime);const fromUpdateTime=getValueByPath(fromObject,["updateTime"]);null!=fromUpdateTime&&setValueByPath(toObject,["updateTime"],fromUpdateTime);const fromExpireTime=getValueByPath(fromObject,["expireTime"]);null!=fromExpireTime&&setValueByPath(toObject,["expireTime"],fromExpireTime);const fromUsageMetadata=getValueByPath(fromObject,["usageMetadata"]);return null!=fromUsageMetadata&&setValueByPath(toObject,["usageMetadata"],fromUsageMetadata),toObject}var PagedItem,Outcome,Language,Type,HarmCategory,HarmBlockMethod,HarmBlockThreshold,Mode,FinishReason,HarmProbability,HarmSeverity,BlockedReason,TrafficType,Modality,MediaResolution,FeatureSelectionPreference,DynamicRetrievalConfigMode,FunctionCallingConfigMode,SafetyFilterLevel,PersonGeneration,ImagePromptLanguage,FileState,FileSource,MaskReferenceMode,ControlReferenceType,SubjectReferenceType,MediaModality,StartSensitivity,EndSensitivity,ActivityHandling,TurnCoverage;!function(PagedItem){PagedItem.PAGED_ITEM_BATCH_JOBS="batchJobs",PagedItem.PAGED_ITEM_MODELS="models",PagedItem.PAGED_ITEM_TUNING_JOBS="tuningJobs",PagedItem.PAGED_ITEM_FILES="files",PagedItem.PAGED_ITEM_CACHED_CONTENTS="cachedContents"}(PagedItem||(PagedItem={}));class Pager{constructor(name,request,response,params){this.pageInternal=[],this.paramsInternal={},this.requestInternal=request,this.init(name,response,params)}init(name,response,params){var _a,_b;this.nameInternal=name,this.pageInternal=response[this.nameInternal]||[],this.idxInternal=0;let requestParams={config:{}};requestParams=params?"object"==typeof params?Object.assign({},params):params:{config:{}},requestParams.config&&(requestParams.config.pageToken=response.nextPageToken),this.paramsInternal=requestParams,this.pageInternalSize=null!==(_b=null===(_a=requestParams.config)||void 0===_a?void 0:_a.pageSize)&&void 0!==_b?_b:this.pageInternal.length}initNextPage(response){this.init(this.nameInternal,response,this.paramsInternal)}get page(){return this.pageInternal}get name(){return this.nameInternal}get pageSize(){return this.pageInternalSize}get params(){return this.paramsInternal}get pageLength(){return this.pageInternal.length}getItem(index){return this.pageInternal[index]}[Symbol.asyncIterator](){return{next:async()=>{if(this.idxInternal>=this.pageLength){if(!this.hasNextPage())return{value:void 0,done:!0};await this.nextPage()}const item=this.getItem(this.idxInternal);return this.idxInternal+=1,{value:item,done:!1}},return:async()=>({value:void 0,done:!0})}}async nextPage(){if(!this.hasNextPage())throw new Error("No more pages to fetch.");const response=await this.requestInternal(this.params);return this.initNextPage(response),this.page}hasNextPage(){var _a;return void 0!==(null===(_a=this.params.config)||void 0===_a?void 0:_a.pageToken)}}!function(Outcome){Outcome.OUTCOME_UNSPECIFIED="OUTCOME_UNSPECIFIED",Outcome.OUTCOME_OK="OUTCOME_OK",Outcome.OUTCOME_FAILED="OUTCOME_FAILED",Outcome.OUTCOME_DEADLINE_EXCEEDED="OUTCOME_DEADLINE_EXCEEDED"}(Outcome||(Outcome={})),function(Language){Language.LANGUAGE_UNSPECIFIED="LANGUAGE_UNSPECIFIED",Language.PYTHON="PYTHON"}(Language||(Language={})),function(Type){Type.TYPE_UNSPECIFIED="TYPE_UNSPECIFIED",Type.STRING="STRING",Type.NUMBER="NUMBER",Type.INTEGER="INTEGER",Type.BOOLEAN="BOOLEAN",Type.ARRAY="ARRAY",Type.OBJECT="OBJECT"}(Type||(Type={})),function(HarmCategory){HarmCategory.HARM_CATEGORY_UNSPECIFIED="HARM_CATEGORY_UNSPECIFIED",HarmCategory.HARM_CATEGORY_HATE_SPEECH="HARM_CATEGORY_HATE_SPEECH",HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT="HARM_CATEGORY_DANGEROUS_CONTENT",HarmCategory.HARM_CATEGORY_HARASSMENT="HARM_CATEGORY_HARASSMENT",HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT="HARM_CATEGORY_SEXUALLY_EXPLICIT",HarmCategory.HARM_CATEGORY_CIVIC_INTEGRITY="HARM_CATEGORY_CIVIC_INTEGRITY"}(HarmCategory||(HarmCategory={})),function(HarmBlockMethod){HarmBlockMethod.HARM_BLOCK_METHOD_UNSPECIFIED="HARM_BLOCK_METHOD_UNSPECIFIED",HarmBlockMethod.SEVERITY="SEVERITY",HarmBlockMethod.PROBABILITY="PROBABILITY"}(HarmBlockMethod||(HarmBlockMethod={})),function(HarmBlockThreshold){HarmBlockThreshold.HARM_BLOCK_THRESHOLD_UNSPECIFIED="HARM_BLOCK_THRESHOLD_UNSPECIFIED",HarmBlockThreshold.BLOCK_LOW_AND_ABOVE="BLOCK_LOW_AND_ABOVE",HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE="BLOCK_MEDIUM_AND_ABOVE",HarmBlockThreshold.BLOCK_ONLY_HIGH="BLOCK_ONLY_HIGH",HarmBlockThreshold.BLOCK_NONE="BLOCK_NONE",HarmBlockThreshold.OFF="OFF"}(HarmBlockThreshold||(HarmBlockThreshold={})),function(Mode){Mode.MODE_UNSPECIFIED="MODE_UNSPECIFIED",Mode.MODE_DYNAMIC="MODE_DYNAMIC"}(Mode||(Mode={})),function(FinishReason){FinishReason.FINISH_REASON_UNSPECIFIED="FINISH_REASON_UNSPECIFIED",FinishReason.STOP="STOP",FinishReason.MAX_TOKENS="MAX_TOKENS",FinishReason.SAFETY="SAFETY",FinishReason.RECITATION="RECITATION",FinishReason.OTHER="OTHER",FinishReason.BLOCKLIST="BLOCKLIST",FinishReason.PROHIBITED_CONTENT="PROHIBITED_CONTENT",FinishReason.SPII="SPII",FinishReason.MALFORMED_FUNCTION_CALL="MALFORMED_FUNCTION_CALL",FinishReason.IMAGE_SAFETY="IMAGE_SAFETY"}(FinishReason||(FinishReason={})),function(HarmProbability){HarmProbability.HARM_PROBABILITY_UNSPECIFIED="HARM_PROBABILITY_UNSPECIFIED",HarmProbability.NEGLIGIBLE="NEGLIGIBLE",HarmProbability.LOW="LOW",HarmProbability.MEDIUM="MEDIUM",HarmProbability.HIGH="HIGH"}(HarmProbability||(HarmProbability={})),function(HarmSeverity){HarmSeverity.HARM_SEVERITY_UNSPECIFIED="HARM_SEVERITY_UNSPECIFIED",HarmSeverity.HARM_SEVERITY_NEGLIGIBLE="HARM_SEVERITY_NEGLIGIBLE",HarmSeverity.HARM_SEVERITY_LOW="HARM_SEVERITY_LOW",HarmSeverity.HARM_SEVERITY_MEDIUM="HARM_SEVERITY_MEDIUM",HarmSeverity.HARM_SEVERITY_HIGH="HARM_SEVERITY_HIGH"}(HarmSeverity||(HarmSeverity={})),function(BlockedReason){BlockedReason.BLOCKED_REASON_UNSPECIFIED="BLOCKED_REASON_UNSPECIFIED",BlockedReason.SAFETY="SAFETY",BlockedReason.OTHER="OTHER",BlockedReason.BLOCKLIST="BLOCKLIST",BlockedReason.PROHIBITED_CONTENT="PROHIBITED_CONTENT"}(BlockedReason||(BlockedReason={})),function(TrafficType){TrafficType.TRAFFIC_TYPE_UNSPECIFIED="TRAFFIC_TYPE_UNSPECIFIED",TrafficType.ON_DEMAND="ON_DEMAND",TrafficType.PROVISIONED_THROUGHPUT="PROVISIONED_THROUGHPUT"}(TrafficType||(TrafficType={})),function(Modality){Modality.MODALITY_UNSPECIFIED="MODALITY_UNSPECIFIED",Modality.TEXT="TEXT",Modality.IMAGE="IMAGE",Modality.AUDIO="AUDIO"}(Modality||(Modality={})),function(MediaResolution){MediaResolution.MEDIA_RESOLUTION_UNSPECIFIED="MEDIA_RESOLUTION_UNSPECIFIED",MediaResolution.MEDIA_RESOLUTION_LOW="MEDIA_RESOLUTION_LOW",MediaResolution.MEDIA_RESOLUTION_MEDIUM="MEDIA_RESOLUTION_MEDIUM",MediaResolution.MEDIA_RESOLUTION_HIGH="MEDIA_RESOLUTION_HIGH"}(MediaResolution||(MediaResolution={})),function(FeatureSelectionPreference){FeatureSelectionPreference.FEATURE_SELECTION_PREFERENCE_UNSPECIFIED="FEATURE_SELECTION_PREFERENCE_UNSPECIFIED",FeatureSelectionPreference.PRIORITIZE_QUALITY="PRIORITIZE_QUALITY",FeatureSelectionPreference.BALANCED="BALANCED",FeatureSelectionPreference.PRIORITIZE_COST="PRIORITIZE_COST"}(FeatureSelectionPreference||(FeatureSelectionPreference={})),function(DynamicRetrievalConfigMode){DynamicRetrievalConfigMode.MODE_UNSPECIFIED="MODE_UNSPECIFIED",DynamicRetrievalConfigMode.MODE_DYNAMIC="MODE_DYNAMIC"}(DynamicRetrievalConfigMode||(DynamicRetrievalConfigMode={})),function(FunctionCallingConfigMode){FunctionCallingConfigMode.MODE_UNSPECIFIED="MODE_UNSPECIFIED",FunctionCallingConfigMode.AUTO="AUTO",FunctionCallingConfigMode.ANY="ANY",FunctionCallingConfigMode.NONE="NONE"}(FunctionCallingConfigMode||(FunctionCallingConfigMode={})),function(SafetyFilterLevel){SafetyFilterLevel.BLOCK_LOW_AND_ABOVE="BLOCK_LOW_AND_ABOVE",SafetyFilterLevel.BLOCK_MEDIUM_AND_ABOVE="BLOCK_MEDIUM_AND_ABOVE",SafetyFilterLevel.BLOCK_ONLY_HIGH="BLOCK_ONLY_HIGH",SafetyFilterLevel.BLOCK_NONE="BLOCK_NONE"}(SafetyFilterLevel||(SafetyFilterLevel={})),function(PersonGeneration){PersonGeneration.DONT_ALLOW="DONT_ALLOW",PersonGeneration.ALLOW_ADULT="ALLOW_ADULT",PersonGeneration.ALLOW_ALL="ALLOW_ALL"}(PersonGeneration||(PersonGeneration={})),function(ImagePromptLanguage){ImagePromptLanguage.auto="auto",ImagePromptLanguage.en="en",ImagePromptLanguage.ja="ja",ImagePromptLanguage.ko="ko",ImagePromptLanguage.hi="hi"}(ImagePromptLanguage||(ImagePromptLanguage={})),function(FileState){FileState.STATE_UNSPECIFIED="STATE_UNSPECIFIED",FileState.PROCESSING="PROCESSING",FileState.ACTIVE="ACTIVE",FileState.FAILED="FAILED"}(FileState||(FileState={})),function(FileSource){FileSource.SOURCE_UNSPECIFIED="SOURCE_UNSPECIFIED",FileSource.UPLOADED="UPLOADED",FileSource.GENERATED="GENERATED"}(FileSource||(FileSource={})),function(MaskReferenceMode){MaskReferenceMode.MASK_MODE_DEFAULT="MASK_MODE_DEFAULT",MaskReferenceMode.MASK_MODE_USER_PROVIDED="MASK_MODE_USER_PROVIDED",MaskReferenceMode.MASK_MODE_BACKGROUND="MASK_MODE_BACKGROUND",MaskReferenceMode.MASK_MODE_FOREGROUND="MASK_MODE_FOREGROUND",MaskReferenceMode.MASK_MODE_SEMANTIC="MASK_MODE_SEMANTIC"}(MaskReferenceMode||(MaskReferenceMode={})),function(ControlReferenceType){ControlReferenceType.CONTROL_TYPE_DEFAULT="CONTROL_TYPE_DEFAULT",ControlReferenceType.CONTROL_TYPE_CANNY="CONTROL_TYPE_CANNY",ControlReferenceType.CONTROL_TYPE_SCRIBBLE="CONTROL_TYPE_SCRIBBLE",ControlReferenceType.CONTROL_TYPE_FACE_MESH="CONTROL_TYPE_FACE_MESH"}(ControlReferenceType||(ControlReferenceType={})),function(SubjectReferenceType){SubjectReferenceType.SUBJECT_TYPE_DEFAULT="SUBJECT_TYPE_DEFAULT",SubjectReferenceType.SUBJECT_TYPE_PERSON="SUBJECT_TYPE_PERSON",SubjectReferenceType.SUBJECT_TYPE_ANIMAL="SUBJECT_TYPE_ANIMAL",SubjectReferenceType.SUBJECT_TYPE_PRODUCT="SUBJECT_TYPE_PRODUCT"}(SubjectReferenceType||(SubjectReferenceType={})),function(MediaModality){MediaModality.MODALITY_UNSPECIFIED="MODALITY_UNSPECIFIED",MediaModality.TEXT="TEXT",MediaModality.IMAGE="IMAGE",MediaModality.VIDEO="VIDEO",MediaModality.AUDIO="AUDIO",MediaModality.DOCUMENT="DOCUMENT"}(MediaModality||(MediaModality={})),function(StartSensitivity){StartSensitivity.START_SENSITIVITY_UNSPECIFIED="START_SENSITIVITY_UNSPECIFIED",StartSensitivity.START_SENSITIVITY_HIGH="START_SENSITIVITY_HIGH",StartSensitivity.START_SENSITIVITY_LOW="START_SENSITIVITY_LOW"}(StartSensitivity||(StartSensitivity={})),function(EndSensitivity){EndSensitivity.END_SENSITIVITY_UNSPECIFIED="END_SENSITIVITY_UNSPECIFIED",EndSensitivity.END_SENSITIVITY_HIGH="END_SENSITIVITY_HIGH",EndSensitivity.END_SENSITIVITY_LOW="END_SENSITIVITY_LOW"}(EndSensitivity||(EndSensitivity={})),function(ActivityHandling){ActivityHandling.ACTIVITY_HANDLING_UNSPECIFIED="ACTIVITY_HANDLING_UNSPECIFIED",ActivityHandling.START_OF_ACTIVITY_INTERRUPTS="START_OF_ACTIVITY_INTERRUPTS",ActivityHandling.NO_INTERRUPTION="NO_INTERRUPTION"}(ActivityHandling||(ActivityHandling={})),function(TurnCoverage){TurnCoverage.TURN_COVERAGE_UNSPECIFIED="TURN_COVERAGE_UNSPECIFIED",TurnCoverage.TURN_INCLUDES_ONLY_ACTIVITY="TURN_INCLUDES_ONLY_ACTIVITY",TurnCoverage.TURN_INCLUDES_ALL_INPUT="TURN_INCLUDES_ALL_INPUT"}(TurnCoverage||(TurnCoverage={}));class GenerateContentResponse{get text(){var _a,_b,_c,_d,_e,_f,_g,_h;if(0===(null===(_d=null===(_c=null===(_b=null===(_a=this.candidates)||void 0===_a?void 0:_a[0])||void 0===_b?void 0:_b.content)||void 0===_c?void 0:_c.parts)||void 0===_d?void 0:_d.length))return;this.candidates&&this.candidates.length>1&&console.warn("there are multiple candidates in the response, returning text from the first one.");let text="",anyTextPartText=!1;const nonTextParts=[];for(const part of null!==(_h=null===(_g=null===(_f=null===(_e=this.candidates)||void 0===_e?void 0:_e[0])||void 0===_f?void 0:_f.content)||void 0===_g?void 0:_g.parts)&&void 0!==_h?_h:[]){for(const[fieldName,fieldValue]of Object.entries(part))"text"===fieldName||"thought"===fieldName||null===fieldValue&&void 0===fieldValue||nonTextParts.push(fieldName);if("string"==typeof part.text){if("boolean"==typeof part.thought&&part.thought)continue;anyTextPartText=!0,text+=part.text}}return nonTextParts.length>0&&console.warn(`there are non-text parts ${nonTextParts} in the response, returning concatenation of all text parts. Please refer to the non text parts for a full response from model.`),anyTextPartText?text:void 0}get functionCalls(){var _a,_b,_c,_d,_e,_f,_g,_h;if(0===(null===(_d=null===(_c=null===(_b=null===(_a=this.candidates)||void 0===_a?void 0:_a[0])||void 0===_b?void 0:_b.content)||void 0===_c?void 0:_c.parts)||void 0===_d?void 0:_d.length))return;this.candidates&&this.candidates.length>1&&console.warn("there are multiple candidates in the response, returning function calls from the first one.");const functionCalls=null===(_h=null===(_g=null===(_f=null===(_e=this.candidates)||void 0===_e?void 0:_e[0])||void 0===_f?void 0:_f.content)||void 0===_g?void 0:_g.parts)||void 0===_h?void 0:_h.filter((part=>part.functionCall)).map((part=>part.functionCall)).filter((functionCall=>void 0!==functionCall));return 0!==(null==functionCalls?void 0:functionCalls.length)?functionCalls:void 0}get executableCode(){var _a,_b,_c,_d,_e,_f,_g,_h,_j;if(0===(null===(_d=null===(_c=null===(_b=null===(_a=this.candidates)||void 0===_a?void 0:_a[0])||void 0===_b?void 0:_b.content)||void 0===_c?void 0:_c.parts)||void 0===_d?void 0:_d.length))return;this.candidates&&this.candidates.length>1&&console.warn("there are multiple candidates in the response, returning executable code from the first one.");const executableCode=null===(_h=null===(_g=null===(_f=null===(_e=this.candidates)||void 0===_e?void 0:_e[0])||void 0===_f?void 0:_f.content)||void 0===_g?void 0:_g.parts)||void 0===_h?void 0:_h.filter((part=>part.executableCode)).map((part=>part.executableCode)).filter((executableCode=>void 0!==executableCode));return 0!==(null==executableCode?void 0:executableCode.length)?null===(_j=null==executableCode?void 0:executableCode[0])||void 0===_j?void 0:_j.code:void 0}get codeExecutionResult(){var _a,_b,_c,_d,_e,_f,_g,_h,_j;if(0===(null===(_d=null===(_c=null===(_b=null===(_a=this.candidates)||void 0===_a?void 0:_a[0])||void 0===_b?void 0:_b.content)||void 0===_c?void 0:_c.parts)||void 0===_d?void 0:_d.length))return;this.candidates&&this.candidates.length>1&&console.warn("there are multiple candidates in the response, returning code execution result from the first one.");const codeExecutionResult=null===(_h=null===(_g=null===(_f=null===(_e=this.candidates)||void 0===_e?void 0:_e[0])||void 0===_f?void 0:_f.content)||void 0===_g?void 0:_g.parts)||void 0===_h?void 0:_h.filter((part=>part.codeExecutionResult)).map((part=>part.codeExecutionResult)).filter((codeExecutionResult=>void 0!==codeExecutionResult));return 0!==(null==codeExecutionResult?void 0:codeExecutionResult.length)?null===(_j=null==codeExecutionResult?void 0:codeExecutionResult[0])||void 0===_j?void 0:_j.output:void 0}}class EmbedContentResponse{}class GenerateImagesResponse{}class CountTokensResponse{}class ComputeTokensResponse{}class DeleteCachedContentResponse{}class ListCachedContentsResponse{}class ListFilesResponse{}class HttpResponse{constructor(response){const headers={};for(const pair of response.headers.entries())headers[pair[0]]=pair[1];this.headers=headers,this.responseInternal=response}json(){return this.responseInternal.json()}}class CreateFileResponse{}class DeleteFileResponse{}class Caches extends BaseModule{constructor(apiClient){super(),this.apiClient=apiClient,this.list=async(params={})=>new Pager(PagedItem.PAGED_ITEM_CACHED_CONTENTS,(x=>this.listInternal(x)),await this.listInternal(params),params)}async create(params){var _a,_b;let response,path="",queryParams={};if(this.apiClient.isVertexAI()){const body=function createCachedContentParametersToVertex(apiClient,fromObject){const toObject={},fromModel=getValueByPath(fromObject,["model"]);null!=fromModel&&setValueByPath(toObject,["model"],tCachesModel(apiClient,fromModel));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],createCachedContentConfigToVertex(0,fromConfig,toObject)),toObject}(this.apiClient,params);return path=formatMap("cachedContents",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"POST",httpOptions:null===(_a=params.config)||void 0===_a?void 0:_a.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>cachedContentFromVertex(this.apiClient,apiResponse)))}{const body=createCachedContentParametersToMldev(this.apiClient,params);return path=formatMap("cachedContents",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"POST",httpOptions:null===(_b=params.config)||void 0===_b?void 0:_b.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>cachedContentFromMldev(this.apiClient,apiResponse)))}}async get(params){var _a,_b;let response,path="",queryParams={};if(this.apiClient.isVertexAI()){const body=function getCachedContentParametersToVertex(apiClient,fromObject){const toObject={},fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["_url","name"],tCachedContentName(apiClient,fromName));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],fromConfig),toObject}(this.apiClient,params);return path=formatMap("{name}",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"GET",httpOptions:null===(_a=params.config)||void 0===_a?void 0:_a.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>cachedContentFromVertex(this.apiClient,apiResponse)))}{const body=function getCachedContentParametersToMldev(apiClient,fromObject){const toObject={},fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["_url","name"],tCachedContentName(apiClient,fromName));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],fromConfig),toObject}(this.apiClient,params);return path=formatMap("{name}",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"GET",httpOptions:null===(_b=params.config)||void 0===_b?void 0:_b.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>cachedContentFromMldev(this.apiClient,apiResponse)))}}async delete(params){var _a,_b;let response,path="",queryParams={};if(this.apiClient.isVertexAI()){const body=function deleteCachedContentParametersToVertex(apiClient,fromObject){const toObject={},fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["_url","name"],tCachedContentName(apiClient,fromName));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],fromConfig),toObject}(this.apiClient,params);return path=formatMap("{name}",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"DELETE",httpOptions:null===(_a=params.config)||void 0===_a?void 0:_a.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((()=>{const resp={},typedResp=new DeleteCachedContentResponse;return Object.assign(typedResp,resp),typedResp}))}{const body=function deleteCachedContentParametersToMldev(apiClient,fromObject){const toObject={},fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["_url","name"],tCachedContentName(apiClient,fromName));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],fromConfig),toObject}(this.apiClient,params);return path=formatMap("{name}",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"DELETE",httpOptions:null===(_b=params.config)||void 0===_b?void 0:_b.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((()=>{const resp={},typedResp=new DeleteCachedContentResponse;return Object.assign(typedResp,resp),typedResp}))}}async update(params){var _a,_b;let response,path="",queryParams={};if(this.apiClient.isVertexAI()){const body=updateCachedContentParametersToVertex(this.apiClient,params);return path=formatMap("{name}",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"PATCH",httpOptions:null===(_a=params.config)||void 0===_a?void 0:_a.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>cachedContentFromVertex(this.apiClient,apiResponse)))}{const body=updateCachedContentParametersToMldev(this.apiClient,params);return path=formatMap("{name}",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"PATCH",httpOptions:null===(_b=params.config)||void 0===_b?void 0:_b.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>cachedContentFromMldev(this.apiClient,apiResponse)))}}async listInternal(params){var _a,_b;let response,path="",queryParams={};if(this.apiClient.isVertexAI()){const body=listCachedContentsParametersToVertex(this.apiClient,params);return path=formatMap("cachedContents",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"GET",httpOptions:null===(_a=params.config)||void 0===_a?void 0:_a.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>{const resp=function listCachedContentsResponseFromVertex(apiClient,fromObject){const toObject={},fromNextPageToken=getValueByPath(fromObject,["nextPageToken"]);null!=fromNextPageToken&&setValueByPath(toObject,["nextPageToken"],fromNextPageToken);const fromCachedContents=getValueByPath(fromObject,["cachedContents"]);return null!=fromCachedContents&&(Array.isArray(fromCachedContents)?setValueByPath(toObject,["cachedContents"],fromCachedContents.map((item=>cachedContentFromVertex(0,item)))):setValueByPath(toObject,["cachedContents"],fromCachedContents)),toObject}(this.apiClient,apiResponse),typedResp=new ListCachedContentsResponse;return Object.assign(typedResp,resp),typedResp}))}{const body=listCachedContentsParametersToMldev(this.apiClient,params);return path=formatMap("cachedContents",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"GET",httpOptions:null===(_b=params.config)||void 0===_b?void 0:_b.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>{const resp=function listCachedContentsResponseFromMldev(apiClient,fromObject){const toObject={},fromNextPageToken=getValueByPath(fromObject,["nextPageToken"]);null!=fromNextPageToken&&setValueByPath(toObject,["nextPageToken"],fromNextPageToken);const fromCachedContents=getValueByPath(fromObject,["cachedContents"]);return null!=fromCachedContents&&(Array.isArray(fromCachedContents)?setValueByPath(toObject,["cachedContents"],fromCachedContents.map((item=>cachedContentFromMldev(0,item)))):setValueByPath(toObject,["cachedContents"],fromCachedContents)),toObject}(this.apiClient,apiResponse),typedResp=new ListCachedContentsResponse;return Object.assign(typedResp,resp),typedResp}))}}}function __values(o){var s="function"==typeof Symbol&&Symbol.iterator,m=s&&o[s],i=0;if(m)return m.call(o);if(o&&"number"==typeof o.length)return{next:function(){return o&&i>=o.length&&(o=void 0),{value:o&&o[i++],done:!o}}};throw new TypeError(s?"Object is not iterable.":"Symbol.iterator is not defined.")}function __await(v){return this instanceof __await?(this.v=v,this):new __await(v)}function __asyncGenerator(thisArg,_arguments,generator){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i,g=generator.apply(thisArg,_arguments||[]),q=[];return i=Object.create(("function"==typeof AsyncIterator?AsyncIterator:Object).prototype),verb("next"),verb("throw"),verb("return",(function awaitReturn(f){return function(v){return Promise.resolve(v).then(f,reject)}})),i[Symbol.asyncIterator]=function(){return this},i;function verb(n,f){g[n]&&(i[n]=function(v){return new Promise((function(a,b){q.push([n,v,a,b])>1||resume(n,v)}))},f&&(i[n]=f(i[n])))}function resume(n,v){try{!function step(r){r.value instanceof __await?Promise.resolve(r.value.v).then(fulfill,reject):settle(q[0][2],r)}(g[n](v))}catch(e){settle(q[0][3],e)}}function fulfill(value){resume("next",value)}function reject(value){resume("throw",value)}function settle(f,v){f(v),q.shift(),q.length&&resume(q[0][0],q[0][1])}}function __asyncValues(o){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i,m=o[Symbol.asyncIterator];return m?m.call(o):(o=__values(o),i={},verb("next"),verb("throw"),verb("return"),i[Symbol.asyncIterator]=function(){return this},i);function verb(n){i[n]=o[n]&&function(v){return new Promise((function(resolve,reject){(function settle(resolve,reject,d,v){Promise.resolve(v).then((function(v){resolve({value:v,done:d})}),reject)})(resolve,reject,(v=o[n](v)).done,v.value)}))}}}function isValidResponse(response){var _a;if(null==response.candidates||0===response.candidates.length)return!1;const content=null===(_a=response.candidates[0])||void 0===_a?void 0:_a.content;return void 0!==content&&isValidContent(content)}function isValidContent(content){if(void 0===content.parts||0===content.parts.length)return!1;for(const part of content.parts){if(void 0===part||0===Object.keys(part).length)return!1;if(void 0!==part.text&&""===part.text)return!1}return!0}"function"==typeof SuppressedError&&SuppressedError;class Chats{constructor(modelsModule,apiClient){this.modelsModule=modelsModule,this.apiClient=apiClient}create(params){return new Chat(this.apiClient,this.modelsModule,params.model,params.config,params.history)}}class Chat{constructor(apiClient,modelsModule,model,config={},history=[]){this.apiClient=apiClient,this.modelsModule=modelsModule,this.model=model,this.config=config,this.history=history,this.sendPromise=Promise.resolve(),function validateHistory(history){if(0!==history.length){if("user"!==history[0].role)throw new Error("History must start with a user turn.");for(const content of history)if("user"!==content.role&&"model"!==content.role)throw new Error(`Role must be user or model, but got ${content.role}.`)}}(history)}async sendMessage(params){var _a;await this.sendPromise;const inputContent=tContent(this.apiClient,params.message),responsePromise=this.modelsModule.generateContent({model:this.model,contents:this.getHistory(!0).concat(inputContent),config:null!==(_a=params.config)&&void 0!==_a?_a:this.config});return this.sendPromise=(async()=>{var _a,_b;const outputContent=null===(_b=null===(_a=(await responsePromise).candidates)||void 0===_a?void 0:_a[0])||void 0===_b?void 0:_b.content,modelOutput=outputContent?[outputContent]:[];this.recordHistory(inputContent,modelOutput)})(),await this.sendPromise,responsePromise}async sendMessageStream(params){var _a;await this.sendPromise;const inputContent=tContent(this.apiClient,params.message),streamResponse=this.modelsModule.generateContentStream({model:this.model,contents:this.getHistory(!0).concat(inputContent),config:null!==(_a=params.config)&&void 0!==_a?_a:this.config});this.sendPromise=streamResponse.then((()=>{}));const response=await streamResponse;return this.processStreamResponse(response,inputContent)}getHistory(curated=!1){return curated?function extractCuratedHistory(comprehensiveHistory){if(void 0===comprehensiveHistory||0===comprehensiveHistory.length)return[];const curatedHistory=[],length=comprehensiveHistory.length;let i=0,userInput=comprehensiveHistory[0];for(;i<length;)if("user"===comprehensiveHistory[i].role)userInput=comprehensiveHistory[i],i++;else{const modelOutput=[];let isValid=!0;for(;i<length&&"model"===comprehensiveHistory[i].role;)modelOutput.push(comprehensiveHistory[i]),isValid&&!isValidContent(comprehensiveHistory[i])&&(isValid=!1),i++;isValid&&(curatedHistory.push(userInput),curatedHistory.push(...modelOutput))}return curatedHistory}(this.history):this.history}processStreamResponse(streamResponse,inputContent){var _a,_b;return __asyncGenerator(this,arguments,(function*processStreamResponse_1(){var _c,e_1,_d,_e;const outputContent=[];try{for(var streamResponse_1_1,_f=!0,streamResponse_1=__asyncValues(streamResponse);!(_c=(streamResponse_1_1=yield __await(streamResponse_1.next())).done);_f=!0){_e=streamResponse_1_1.value,_f=!1;const chunk=_e;if(isValidResponse(chunk)){const content=null===(_b=null===(_a=chunk.candidates)||void 0===_a?void 0:_a[0])||void 0===_b?void 0:_b.content;void 0!==content&&outputContent.push(content)}yield yield __await(chunk)}}catch(e_1_1){e_1={error:e_1_1}}finally{try{_f||_c||!(_d=streamResponse_1.return)||(yield __await(_d.call(streamResponse_1)))}finally{if(e_1)throw e_1.error}}this.recordHistory(inputContent,outputContent)}))}recordHistory(userInput,modelOutput){let outputContents=[];modelOutput.length>0&&modelOutput.every((content=>"model"===content.role))?outputContents=modelOutput:outputContents.push({role:"model",parts:[]}),this.history.push(userInput),this.history.push(...outputContents)}}function listFilesParametersToMldev(apiClient,fromObject){const toObject={},fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],function listFilesConfigToMldev(apiClient,fromObject,parentObject){const fromPageSize=getValueByPath(fromObject,["pageSize"]);void 0!==parentObject&&null!=fromPageSize&&setValueByPath(parentObject,["_query","pageSize"],fromPageSize);const fromPageToken=getValueByPath(fromObject,["pageToken"]);return void 0!==parentObject&&null!=fromPageToken&&setValueByPath(parentObject,["_query","pageToken"],fromPageToken),{}}(0,fromConfig,toObject)),toObject}function fileToMldev(apiClient,fromObject){const toObject={},fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["name"],fromName);const fromDisplayName=getValueByPath(fromObject,["displayName"]);null!=fromDisplayName&&setValueByPath(toObject,["displayName"],fromDisplayName);const fromMimeType=getValueByPath(fromObject,["mimeType"]);null!=fromMimeType&&setValueByPath(toObject,["mimeType"],fromMimeType);const fromSizeBytes=getValueByPath(fromObject,["sizeBytes"]);null!=fromSizeBytes&&setValueByPath(toObject,["sizeBytes"],fromSizeBytes);const fromCreateTime=getValueByPath(fromObject,["createTime"]);null!=fromCreateTime&&setValueByPath(toObject,["createTime"],fromCreateTime);const fromExpirationTime=getValueByPath(fromObject,["expirationTime"]);null!=fromExpirationTime&&setValueByPath(toObject,["expirationTime"],fromExpirationTime);const fromUpdateTime=getValueByPath(fromObject,["updateTime"]);null!=fromUpdateTime&&setValueByPath(toObject,["updateTime"],fromUpdateTime);const fromSha256Hash=getValueByPath(fromObject,["sha256Hash"]);null!=fromSha256Hash&&setValueByPath(toObject,["sha256Hash"],fromSha256Hash);const fromUri=getValueByPath(fromObject,["uri"]);null!=fromUri&&setValueByPath(toObject,["uri"],fromUri);const fromDownloadUri=getValueByPath(fromObject,["downloadUri"]);null!=fromDownloadUri&&setValueByPath(toObject,["downloadUri"],fromDownloadUri);const fromState=getValueByPath(fromObject,["state"]);null!=fromState&&setValueByPath(toObject,["state"],fromState);const fromSource=getValueByPath(fromObject,["source"]);null!=fromSource&&setValueByPath(toObject,["source"],fromSource);const fromVideoMetadata=getValueByPath(fromObject,["videoMetadata"]);null!=fromVideoMetadata&&setValueByPath(toObject,["videoMetadata"],fromVideoMetadata);const fromError=getValueByPath(fromObject,["error"]);return null!=fromError&&setValueByPath(toObject,["error"],function fileStatusToMldev(apiClient,fromObject){const toObject={},fromDetails=getValueByPath(fromObject,["details"]);null!=fromDetails&&setValueByPath(toObject,["details"],fromDetails);const fromMessage=getValueByPath(fromObject,["message"]);null!=fromMessage&&setValueByPath(toObject,["message"],fromMessage);const fromCode=getValueByPath(fromObject,["code"]);return null!=fromCode&&setValueByPath(toObject,["code"],fromCode),toObject}(0,fromError)),toObject}function fileFromMldev(apiClient,fromObject){const toObject={},fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["name"],fromName);const fromDisplayName=getValueByPath(fromObject,["displayName"]);null!=fromDisplayName&&setValueByPath(toObject,["displayName"],fromDisplayName);const fromMimeType=getValueByPath(fromObject,["mimeType"]);null!=fromMimeType&&setValueByPath(toObject,["mimeType"],fromMimeType);const fromSizeBytes=getValueByPath(fromObject,["sizeBytes"]);null!=fromSizeBytes&&setValueByPath(toObject,["sizeBytes"],fromSizeBytes);const fromCreateTime=getValueByPath(fromObject,["createTime"]);null!=fromCreateTime&&setValueByPath(toObject,["createTime"],fromCreateTime);const fromExpirationTime=getValueByPath(fromObject,["expirationTime"]);null!=fromExpirationTime&&setValueByPath(toObject,["expirationTime"],fromExpirationTime);const fromUpdateTime=getValueByPath(fromObject,["updateTime"]);null!=fromUpdateTime&&setValueByPath(toObject,["updateTime"],fromUpdateTime);const fromSha256Hash=getValueByPath(fromObject,["sha256Hash"]);null!=fromSha256Hash&&setValueByPath(toObject,["sha256Hash"],fromSha256Hash);const fromUri=getValueByPath(fromObject,["uri"]);null!=fromUri&&setValueByPath(toObject,["uri"],fromUri);const fromDownloadUri=getValueByPath(fromObject,["downloadUri"]);null!=fromDownloadUri&&setValueByPath(toObject,["downloadUri"],fromDownloadUri);const fromState=getValueByPath(fromObject,["state"]);null!=fromState&&setValueByPath(toObject,["state"],fromState);const fromSource=getValueByPath(fromObject,["source"]);null!=fromSource&&setValueByPath(toObject,["source"],fromSource);const fromVideoMetadata=getValueByPath(fromObject,["videoMetadata"]);null!=fromVideoMetadata&&setValueByPath(toObject,["videoMetadata"],fromVideoMetadata);const fromError=getValueByPath(fromObject,["error"]);return null!=fromError&&setValueByPath(toObject,["error"],function fileStatusFromMldev(apiClient,fromObject){const toObject={},fromDetails=getValueByPath(fromObject,["details"]);null!=fromDetails&&setValueByPath(toObject,["details"],fromDetails);const fromMessage=getValueByPath(fromObject,["message"]);null!=fromMessage&&setValueByPath(toObject,["message"],fromMessage);const fromCode=getValueByPath(fromObject,["code"]);return null!=fromCode&&setValueByPath(toObject,["code"],fromCode),toObject}(0,fromError)),toObject}class Files extends BaseModule{constructor(apiClient){super(),this.apiClient=apiClient,this.list=async(params={})=>new Pager(PagedItem.PAGED_ITEM_FILES,(x=>this.listInternal(x)),await this.listInternal(params),params)}async upload(params){if(this.apiClient.isVertexAI())throw new Error("Vertex AI does not support uploading files. You can share files through a GCS bucket.");return this.apiClient.uploadFile(params.file,params.config).then((response=>fileFromMldev(this.apiClient,response)))}async listInternal(params){var _a;let response,path="",queryParams={};if(this.apiClient.isVertexAI())throw new Error("This method is only supported by the Gemini Developer API.");{const body=listFilesParametersToMldev(this.apiClient,params);return path=formatMap("files",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"GET",httpOptions:null===(_a=params.config)||void 0===_a?void 0:_a.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>{const resp=function listFilesResponseFromMldev(apiClient,fromObject){const toObject={},fromNextPageToken=getValueByPath(fromObject,["nextPageToken"]);null!=fromNextPageToken&&setValueByPath(toObject,["nextPageToken"],fromNextPageToken);const fromFiles=getValueByPath(fromObject,["files"]);return null!=fromFiles&&(Array.isArray(fromFiles)?setValueByPath(toObject,["files"],fromFiles.map((item=>fileFromMldev(0,item)))):setValueByPath(toObject,["files"],fromFiles)),toObject}(this.apiClient,apiResponse),typedResp=new ListFilesResponse;return Object.assign(typedResp,resp),typedResp}))}}async createInternal(params){var _a;let response,path="",queryParams={};if(this.apiClient.isVertexAI())throw new Error("This method is only supported by the Gemini Developer API.");{const body=function createFileParametersToMldev(apiClient,fromObject){const toObject={},fromFile=getValueByPath(fromObject,["file"]);null!=fromFile&&setValueByPath(toObject,["file"],fileToMldev(0,fromFile));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],fromConfig),toObject}(this.apiClient,params);return path=formatMap("upload/v1beta/files",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"POST",httpOptions:null===(_a=params.config)||void 0===_a?void 0:_a.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((()=>{const resp={},typedResp=new CreateFileResponse;return Object.assign(typedResp,resp),typedResp}))}}async get(params){var _a;let response,path="",queryParams={};if(this.apiClient.isVertexAI())throw new Error("This method is only supported by the Gemini Developer API.");{const body=function getFileParametersToMldev(apiClient,fromObject){const toObject={},fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["_url","file"],tFileName(0,fromName));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],fromConfig),toObject}(this.apiClient,params);return path=formatMap("files/{file}",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"GET",httpOptions:null===(_a=params.config)||void 0===_a?void 0:_a.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>fileFromMldev(this.apiClient,apiResponse)))}}async delete(params){var _a;let response,path="",queryParams={};if(this.apiClient.isVertexAI())throw new Error("This method is only supported by the Gemini Developer API.");{const body=function deleteFileParametersToMldev(apiClient,fromObject){const toObject={},fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["_url","file"],tFileName(0,fromName));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],fromConfig),toObject}(this.apiClient,params);return path=formatMap("files/{file}",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"DELETE",httpOptions:null===(_a=params.config)||void 0===_a?void 0:_a.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((()=>{const resp={},typedResp=new DeleteFileResponse;return Object.assign(typedResp,resp),typedResp}))}}}function contentToMldev$1(apiClient,fromObject){const toObject={},fromParts=getValueByPath(fromObject,["parts"]);null!=fromParts&&(Array.isArray(fromParts)?setValueByPath(toObject,["parts"],fromParts.map((item=>function partToMldev$1(apiClient,fromObject){const toObject={};if(void 0!==getValueByPath(fromObject,["videoMetadata"]))throw new Error("videoMetadata parameter is not supported in Gemini API.");const fromThought=getValueByPath(fromObject,["thought"]);null!=fromThought&&setValueByPath(toObject,["thought"],fromThought);const fromCodeExecutionResult=getValueByPath(fromObject,["codeExecutionResult"]);null!=fromCodeExecutionResult&&setValueByPath(toObject,["codeExecutionResult"],fromCodeExecutionResult);const fromExecutableCode=getValueByPath(fromObject,["executableCode"]);null!=fromExecutableCode&&setValueByPath(toObject,["executableCode"],fromExecutableCode);const fromFileData=getValueByPath(fromObject,["fileData"]);null!=fromFileData&&setValueByPath(toObject,["fileData"],fromFileData);const fromFunctionCall=getValueByPath(fromObject,["functionCall"]);null!=fromFunctionCall&&setValueByPath(toObject,["functionCall"],fromFunctionCall);const fromFunctionResponse=getValueByPath(fromObject,["functionResponse"]);null!=fromFunctionResponse&&setValueByPath(toObject,["functionResponse"],fromFunctionResponse);const fromInlineData=getValueByPath(fromObject,["inlineData"]);null!=fromInlineData&&setValueByPath(toObject,["inlineData"],fromInlineData);const fromText=getValueByPath(fromObject,["text"]);return null!=fromText&&setValueByPath(toObject,["text"],fromText),toObject}(0,item)))):setValueByPath(toObject,["parts"],fromParts));const fromRole=getValueByPath(fromObject,["role"]);return null!=fromRole&&setValueByPath(toObject,["role"],fromRole),toObject}function contentToVertex$1(apiClient,fromObject){const toObject={},fromParts=getValueByPath(fromObject,["parts"]);null!=fromParts&&(Array.isArray(fromParts)?setValueByPath(toObject,["parts"],fromParts.map((item=>function partToVertex$1(apiClient,fromObject){const toObject={},fromVideoMetadata=getValueByPath(fromObject,["videoMetadata"]);null!=fromVideoMetadata&&setValueByPath(toObject,["videoMetadata"],fromVideoMetadata);const fromThought=getValueByPath(fromObject,["thought"]);null!=fromThought&&setValueByPath(toObject,["thought"],fromThought);const fromCodeExecutionResult=getValueByPath(fromObject,["codeExecutionResult"]);null!=fromCodeExecutionResult&&setValueByPath(toObject,["codeExecutionResult"],fromCodeExecutionResult);const fromExecutableCode=getValueByPath(fromObject,["executableCode"]);null!=fromExecutableCode&&setValueByPath(toObject,["executableCode"],fromExecutableCode);const fromFileData=getValueByPath(fromObject,["fileData"]);null!=fromFileData&&setValueByPath(toObject,["fileData"],fromFileData);const fromFunctionCall=getValueByPath(fromObject,["functionCall"]);null!=fromFunctionCall&&setValueByPath(toObject,["functionCall"],fromFunctionCall);const fromFunctionResponse=getValueByPath(fromObject,["functionResponse"]);null!=fromFunctionResponse&&setValueByPath(toObject,["functionResponse"],fromFunctionResponse);const fromInlineData=getValueByPath(fromObject,["inlineData"]);null!=fromInlineData&&setValueByPath(toObject,["inlineData"],fromInlineData);const fromText=getValueByPath(fromObject,["text"]);return null!=fromText&&setValueByPath(toObject,["text"],fromText),toObject}(0,item)))):setValueByPath(toObject,["parts"],fromParts));const fromRole=getValueByPath(fromObject,["role"]);return null!=fromRole&&setValueByPath(toObject,["role"],fromRole),toObject}function functionDeclarationToVertex$1(apiClient,fromObject){const toObject={},fromResponse=getValueByPath(fromObject,["response"]);null!=fromResponse&&setValueByPath(toObject,["response"],function schemaToVertex$1(apiClient,fromObject){const toObject={},fromExample=getValueByPath(fromObject,["example"]);null!=fromExample&&setValueByPath(toObject,["example"],fromExample);const fromPattern=getValueByPath(fromObject,["pattern"]);null!=fromPattern&&setValueByPath(toObject,["pattern"],fromPattern);const fromDefault=getValueByPath(fromObject,["default"]);null!=fromDefault&&setValueByPath(toObject,["default"],fromDefault);const fromMaxLength=getValueByPath(fromObject,["maxLength"]);null!=fromMaxLength&&setValueByPath(toObject,["maxLength"],fromMaxLength);const fromMinLength=getValueByPath(fromObject,["minLength"]);null!=fromMinLength&&setValueByPath(toObject,["minLength"],fromMinLength);const fromMinProperties=getValueByPath(fromObject,["minProperties"]);null!=fromMinProperties&&setValueByPath(toObject,["minProperties"],fromMinProperties);const fromMaxProperties=getValueByPath(fromObject,["maxProperties"]);null!=fromMaxProperties&&setValueByPath(toObject,["maxProperties"],fromMaxProperties);const fromAnyOf=getValueByPath(fromObject,["anyOf"]);null!=fromAnyOf&&setValueByPath(toObject,["anyOf"],fromAnyOf);const fromDescription=getValueByPath(fromObject,["description"]);null!=fromDescription&&setValueByPath(toObject,["description"],fromDescription);const fromEnum=getValueByPath(fromObject,["enum"]);null!=fromEnum&&setValueByPath(toObject,["enum"],fromEnum);const fromFormat=getValueByPath(fromObject,["format"]);null!=fromFormat&&setValueByPath(toObject,["format"],fromFormat);const fromItems=getValueByPath(fromObject,["items"]);null!=fromItems&&setValueByPath(toObject,["items"],fromItems);const fromMaxItems=getValueByPath(fromObject,["maxItems"]);null!=fromMaxItems&&setValueByPath(toObject,["maxItems"],fromMaxItems);const fromMaximum=getValueByPath(fromObject,["maximum"]);null!=fromMaximum&&setValueByPath(toObject,["maximum"],fromMaximum);const fromMinItems=getValueByPath(fromObject,["minItems"]);null!=fromMinItems&&setValueByPath(toObject,["minItems"],fromMinItems);const fromMinimum=getValueByPath(fromObject,["minimum"]);null!=fromMinimum&&setValueByPath(toObject,["minimum"],fromMinimum);const fromNullable=getValueByPath(fromObject,["nullable"]);null!=fromNullable&&setValueByPath(toObject,["nullable"],fromNullable);const fromProperties=getValueByPath(fromObject,["properties"]);null!=fromProperties&&setValueByPath(toObject,["properties"],fromProperties);const fromPropertyOrdering=getValueByPath(fromObject,["propertyOrdering"]);null!=fromPropertyOrdering&&setValueByPath(toObject,["propertyOrdering"],fromPropertyOrdering);const fromRequired=getValueByPath(fromObject,["required"]);null!=fromRequired&&setValueByPath(toObject,["required"],fromRequired);const fromTitle=getValueByPath(fromObject,["title"]);null!=fromTitle&&setValueByPath(toObject,["title"],fromTitle);const fromType=getValueByPath(fromObject,["type"]);return null!=fromType&&setValueByPath(toObject,["type"],fromType),toObject}(0,fromResponse));const fromDescription=getValueByPath(fromObject,["description"]);null!=fromDescription&&setValueByPath(toObject,["description"],fromDescription);const fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["name"],fromName);const fromParameters=getValueByPath(fromObject,["parameters"]);return null!=fromParameters&&setValueByPath(toObject,["parameters"],fromParameters),toObject}function googleSearchRetrievalToMldev$1(apiClient,fromObject){const toObject={},fromDynamicRetrievalConfig=getValueByPath(fromObject,["dynamicRetrievalConfig"]);return null!=fromDynamicRetrievalConfig&&setValueByPath(toObject,["dynamicRetrievalConfig"],function dynamicRetrievalConfigToMldev$1(apiClient,fromObject){const toObject={},fromMode=getValueByPath(fromObject,["mode"]);null!=fromMode&&setValueByPath(toObject,["mode"],fromMode);const fromDynamicThreshold=getValueByPath(fromObject,["dynamicThreshold"]);return null!=fromDynamicThreshold&&setValueByPath(toObject,["dynamicThreshold"],fromDynamicThreshold),toObject}(0,fromDynamicRetrievalConfig)),toObject}function googleSearchRetrievalToVertex$1(apiClient,fromObject){const toObject={},fromDynamicRetrievalConfig=getValueByPath(fromObject,["dynamicRetrievalConfig"]);return null!=fromDynamicRetrievalConfig&&setValueByPath(toObject,["dynamicRetrievalConfig"],function dynamicRetrievalConfigToVertex$1(apiClient,fromObject){const toObject={},fromMode=getValueByPath(fromObject,["mode"]);null!=fromMode&&setValueByPath(toObject,["mode"],fromMode);const fromDynamicThreshold=getValueByPath(fromObject,["dynamicThreshold"]);return null!=fromDynamicThreshold&&setValueByPath(toObject,["dynamicThreshold"],fromDynamicThreshold),toObject}(0,fromDynamicRetrievalConfig)),toObject}function toolToMldev$1(apiClient,fromObject){const toObject={},fromFunctionDeclarations=getValueByPath(fromObject,["functionDeclarations"]);if(null!=fromFunctionDeclarations&&(Array.isArray(fromFunctionDeclarations)?setValueByPath(toObject,["functionDeclarations"],fromFunctionDeclarations.map((item=>function functionDeclarationToMldev$1(apiClient,fromObject){const toObject={};if(void 0!==getValueByPath(fromObject,["response"]))throw new Error("response parameter is not supported in Gemini API.");const fromDescription=getValueByPath(fromObject,["description"]);null!=fromDescription&&setValueByPath(toObject,["description"],fromDescription);const fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["name"],fromName);const fromParameters=getValueByPath(fromObject,["parameters"]);return null!=fromParameters&&setValueByPath(toObject,["parameters"],fromParameters),toObject}(0,item)))):setValueByPath(toObject,["functionDeclarations"],fromFunctionDeclarations)),void 0!==getValueByPath(fromObject,["retrieval"]))throw new Error("retrieval parameter is not supported in Gemini API.");null!=getValueByPath(fromObject,["googleSearch"])&&setValueByPath(toObject,["googleSearch"],{});const fromGoogleSearchRetrieval=getValueByPath(fromObject,["googleSearchRetrieval"]);null!=fromGoogleSearchRetrieval&&setValueByPath(toObject,["googleSearchRetrieval"],googleSearchRetrievalToMldev$1(0,fromGoogleSearchRetrieval));const fromCodeExecution=getValueByPath(fromObject,["codeExecution"]);return null!=fromCodeExecution&&setValueByPath(toObject,["codeExecution"],fromCodeExecution),toObject}function realtimeInputConfigToMldev(apiClient,fromObject){const toObject={},fromAutomaticActivityDetection=getValueByPath(fromObject,["automaticActivityDetection"]);null!=fromAutomaticActivityDetection&&setValueByPath(toObject,["automaticActivityDetection"],function automaticActivityDetectionToMldev(apiClient,fromObject){const toObject={},fromDisabled=getValueByPath(fromObject,["disabled"]);null!=fromDisabled&&setValueByPath(toObject,["disabled"],fromDisabled);const fromStartOfSpeechSensitivity=getValueByPath(fromObject,["startOfSpeechSensitivity"]);null!=fromStartOfSpeechSensitivity&&setValueByPath(toObject,["startOfSpeechSensitivity"],fromStartOfSpeechSensitivity);const fromEndOfSpeechSensitivity=getValueByPath(fromObject,["endOfSpeechSensitivity"]);null!=fromEndOfSpeechSensitivity&&setValueByPath(toObject,["endOfSpeechSensitivity"],fromEndOfSpeechSensitivity);const fromPrefixPaddingMs=getValueByPath(fromObject,["prefixPaddingMs"]);null!=fromPrefixPaddingMs&&setValueByPath(toObject,["prefixPaddingMs"],fromPrefixPaddingMs);const fromSilenceDurationMs=getValueByPath(fromObject,["silenceDurationMs"]);return null!=fromSilenceDurationMs&&setValueByPath(toObject,["silenceDurationMs"],fromSilenceDurationMs),toObject}(0,fromAutomaticActivityDetection));const fromActivityHandling=getValueByPath(fromObject,["activityHandling"]);null!=fromActivityHandling&&setValueByPath(toObject,["activityHandling"],fromActivityHandling);const fromTurnCoverage=getValueByPath(fromObject,["turnCoverage"]);return null!=fromTurnCoverage&&setValueByPath(toObject,["turnCoverage"],fromTurnCoverage),toObject}function realtimeInputConfigToVertex(apiClient,fromObject){const toObject={},fromAutomaticActivityDetection=getValueByPath(fromObject,["automaticActivityDetection"]);null!=fromAutomaticActivityDetection&&setValueByPath(toObject,["automaticActivityDetection"],function automaticActivityDetectionToVertex(apiClient,fromObject){const toObject={},fromDisabled=getValueByPath(fromObject,["disabled"]);null!=fromDisabled&&setValueByPath(toObject,["disabled"],fromDisabled);const fromStartOfSpeechSensitivity=getValueByPath(fromObject,["startOfSpeechSensitivity"]);null!=fromStartOfSpeechSensitivity&&setValueByPath(toObject,["startOfSpeechSensitivity"],fromStartOfSpeechSensitivity);const fromEndOfSpeechSensitivity=getValueByPath(fromObject,["endOfSpeechSensitivity"]);null!=fromEndOfSpeechSensitivity&&setValueByPath(toObject,["endOfSpeechSensitivity"],fromEndOfSpeechSensitivity);const fromPrefixPaddingMs=getValueByPath(fromObject,["prefixPaddingMs"]);null!=fromPrefixPaddingMs&&setValueByPath(toObject,["prefixPaddingMs"],fromPrefixPaddingMs);const fromSilenceDurationMs=getValueByPath(fromObject,["silenceDurationMs"]);return null!=fromSilenceDurationMs&&setValueByPath(toObject,["silenceDurationMs"],fromSilenceDurationMs),toObject}(0,fromAutomaticActivityDetection));const fromActivityHandling=getValueByPath(fromObject,["activityHandling"]);null!=fromActivityHandling&&setValueByPath(toObject,["activityHandling"],fromActivityHandling);const fromTurnCoverage=getValueByPath(fromObject,["turnCoverage"]);return null!=fromTurnCoverage&&setValueByPath(toObject,["turnCoverage"],fromTurnCoverage),toObject}function contextWindowCompressionConfigToMldev(apiClient,fromObject){const toObject={},fromTriggerTokens=getValueByPath(fromObject,["triggerTokens"]);null!=fromTriggerTokens&&setValueByPath(toObject,["triggerTokens"],fromTriggerTokens);const fromSlidingWindow=getValueByPath(fromObject,["slidingWindow"]);return null!=fromSlidingWindow&&setValueByPath(toObject,["slidingWindow"],function slidingWindowToMldev(apiClient,fromObject){const toObject={},fromTargetTokens=getValueByPath(fromObject,["targetTokens"]);return null!=fromTargetTokens&&setValueByPath(toObject,["targetTokens"],fromTargetTokens),toObject}(0,fromSlidingWindow)),toObject}function contextWindowCompressionConfigToVertex(apiClient,fromObject){const toObject={},fromTriggerTokens=getValueByPath(fromObject,["triggerTokens"]);null!=fromTriggerTokens&&setValueByPath(toObject,["triggerTokens"],fromTriggerTokens);const fromSlidingWindow=getValueByPath(fromObject,["slidingWindow"]);return null!=fromSlidingWindow&&setValueByPath(toObject,["slidingWindow"],function slidingWindowToVertex(apiClient,fromObject){const toObject={},fromTargetTokens=getValueByPath(fromObject,["targetTokens"]);return null!=fromTargetTokens&&setValueByPath(toObject,["targetTokens"],fromTargetTokens),toObject}(0,fromSlidingWindow)),toObject}function liveConnectConfigToMldev(apiClient,fromObject,parentObject){const fromGenerationConfig=getValueByPath(fromObject,["generationConfig"]);void 0!==parentObject&&null!=fromGenerationConfig&&setValueByPath(parentObject,["setup","generationConfig"],fromGenerationConfig);const fromResponseModalities=getValueByPath(fromObject,["responseModalities"]);void 0!==parentObject&&null!=fromResponseModalities&&setValueByPath(parentObject,["setup","generationConfig","responseModalities"],fromResponseModalities);const fromTemperature=getValueByPath(fromObject,["temperature"]);void 0!==parentObject&&null!=fromTemperature&&setValueByPath(parentObject,["setup","generationConfig","temperature"],fromTemperature);const fromTopP=getValueByPath(fromObject,["topP"]);void 0!==parentObject&&null!=fromTopP&&setValueByPath(parentObject,["setup","generationConfig","topP"],fromTopP);const fromTopK=getValueByPath(fromObject,["topK"]);void 0!==parentObject&&null!=fromTopK&&setValueByPath(parentObject,["setup","generationConfig","topK"],fromTopK);const fromMaxOutputTokens=getValueByPath(fromObject,["maxOutputTokens"]);void 0!==parentObject&&null!=fromMaxOutputTokens&&setValueByPath(parentObject,["setup","generationConfig","maxOutputTokens"],fromMaxOutputTokens);const fromMediaResolution=getValueByPath(fromObject,["mediaResolution"]);void 0!==parentObject&&null!=fromMediaResolution&&setValueByPath(parentObject,["setup","generationConfig","mediaResolution"],fromMediaResolution);const fromSeed=getValueByPath(fromObject,["seed"]);void 0!==parentObject&&null!=fromSeed&&setValueByPath(parentObject,["setup","generationConfig","seed"],fromSeed);const fromSpeechConfig=getValueByPath(fromObject,["speechConfig"]);void 0!==parentObject&&null!=fromSpeechConfig&&setValueByPath(parentObject,["setup","generationConfig","speechConfig"],fromSpeechConfig);const fromSystemInstruction=getValueByPath(fromObject,["systemInstruction"]);void 0!==parentObject&&null!=fromSystemInstruction&&setValueByPath(parentObject,["setup","systemInstruction"],contentToMldev$1(0,tContent(0,fromSystemInstruction)));const fromTools=getValueByPath(fromObject,["tools"]);void 0!==parentObject&&null!=fromTools&&(Array.isArray(fromTools)?setValueByPath(parentObject,["setup","tools"],tTools(0,tTools(0,fromTools).map((item=>toolToMldev$1(0,tTool(0,item)))))):setValueByPath(parentObject,["setup","tools"],tTools(0,fromTools)));const fromSessionResumption=getValueByPath(fromObject,["sessionResumption"]);if(void 0!==parentObject&&null!=fromSessionResumption&&setValueByPath(parentObject,["setup","sessionResumption"],function sessionResumptionConfigToMldev(apiClient,fromObject){const toObject={},fromHandle=getValueByPath(fromObject,["handle"]);if(null!=fromHandle&&setValueByPath(toObject,["handle"],fromHandle),void 0!==getValueByPath(fromObject,["transparent"]))throw new Error("transparent parameter is not supported in Gemini API.");return toObject}(0,fromSessionResumption)),void 0!==getValueByPath(fromObject,["inputAudioTranscription"]))throw new Error("inputAudioTranscription parameter is not supported in Gemini API.");const fromOutputAudioTranscription=getValueByPath(fromObject,["outputAudioTranscription"]);void 0!==parentObject&&null!=fromOutputAudioTranscription&&setValueByPath(parentObject,["setup","outputAudioTranscription"],{});const fromRealtimeInputConfig=getValueByPath(fromObject,["realtimeInputConfig"]);void 0!==parentObject&&null!=fromRealtimeInputConfig&&setValueByPath(parentObject,["setup","realtimeInputConfig"],realtimeInputConfigToMldev(0,fromRealtimeInputConfig));const fromContextWindowCompression=getValueByPath(fromObject,["contextWindowCompression"]);return void 0!==parentObject&&null!=fromContextWindowCompression&&setValueByPath(parentObject,["setup","contextWindowCompression"],contextWindowCompressionConfigToMldev(0,fromContextWindowCompression)),{}}function liveConnectConfigToVertex(apiClient,fromObject,parentObject){const fromGenerationConfig=getValueByPath(fromObject,["generationConfig"]);void 0!==parentObject&&null!=fromGenerationConfig&&setValueByPath(parentObject,["setup","generationConfig"],fromGenerationConfig);const fromResponseModalities=getValueByPath(fromObject,["responseModalities"]);void 0!==parentObject&&null!=fromResponseModalities&&setValueByPath(parentObject,["setup","generationConfig","responseModalities"],fromResponseModalities);const fromTemperature=getValueByPath(fromObject,["temperature"]);void 0!==parentObject&&null!=fromTemperature&&setValueByPath(parentObject,["setup","generationConfig","temperature"],fromTemperature);const fromTopP=getValueByPath(fromObject,["topP"]);void 0!==parentObject&&null!=fromTopP&&setValueByPath(parentObject,["setup","generationConfig","topP"],fromTopP);const fromTopK=getValueByPath(fromObject,["topK"]);void 0!==parentObject&&null!=fromTopK&&setValueByPath(parentObject,["setup","generationConfig","topK"],fromTopK);const fromMaxOutputTokens=getValueByPath(fromObject,["maxOutputTokens"]);void 0!==parentObject&&null!=fromMaxOutputTokens&&setValueByPath(parentObject,["setup","generationConfig","maxOutputTokens"],fromMaxOutputTokens);const fromMediaResolution=getValueByPath(fromObject,["mediaResolution"]);void 0!==parentObject&&null!=fromMediaResolution&&setValueByPath(parentObject,["setup","generationConfig","mediaResolution"],fromMediaResolution);const fromSeed=getValueByPath(fromObject,["seed"]);void 0!==parentObject&&null!=fromSeed&&setValueByPath(parentObject,["setup","generationConfig","seed"],fromSeed);const fromSpeechConfig=getValueByPath(fromObject,["speechConfig"]);void 0!==parentObject&&null!=fromSpeechConfig&&setValueByPath(parentObject,["setup","generationConfig","speechConfig"],fromSpeechConfig);const fromSystemInstruction=getValueByPath(fromObject,["systemInstruction"]);void 0!==parentObject&&null!=fromSystemInstruction&&setValueByPath(parentObject,["setup","systemInstruction"],contentToVertex$1(0,tContent(0,fromSystemInstruction)));const fromTools=getValueByPath(fromObject,["tools"]);void 0!==parentObject&&null!=fromTools&&(Array.isArray(fromTools)?setValueByPath(parentObject,["setup","tools"],tTools(0,tTools(0,fromTools).map((item=>function toolToVertex$1(apiClient,fromObject){const toObject={},fromFunctionDeclarations=getValueByPath(fromObject,["functionDeclarations"]);null!=fromFunctionDeclarations&&(Array.isArray(fromFunctionDeclarations)?setValueByPath(toObject,["functionDeclarations"],fromFunctionDeclarations.map((item=>functionDeclarationToVertex$1(0,item)))):setValueByPath(toObject,["functionDeclarations"],fromFunctionDeclarations));const fromRetrieval=getValueByPath(fromObject,["retrieval"]);null!=fromRetrieval&&setValueByPath(toObject,["retrieval"],fromRetrieval),null!=getValueByPath(fromObject,["googleSearch"])&&setValueByPath(toObject,["googleSearch"],{});const fromGoogleSearchRetrieval=getValueByPath(fromObject,["googleSearchRetrieval"]);null!=fromGoogleSearchRetrieval&&setValueByPath(toObject,["googleSearchRetrieval"],googleSearchRetrievalToVertex$1(0,fromGoogleSearchRetrieval));const fromCodeExecution=getValueByPath(fromObject,["codeExecution"]);return null!=fromCodeExecution&&setValueByPath(toObject,["codeExecution"],fromCodeExecution),toObject}(0,tTool(0,item)))))):setValueByPath(parentObject,["setup","tools"],tTools(0,fromTools)));const fromSessionResumption=getValueByPath(fromObject,["sessionResumption"]);void 0!==parentObject&&null!=fromSessionResumption&&setValueByPath(parentObject,["setup","sessionResumption"],function sessionResumptionConfigToVertex(apiClient,fromObject){const toObject={},fromHandle=getValueByPath(fromObject,["handle"]);null!=fromHandle&&setValueByPath(toObject,["handle"],fromHandle);const fromTransparent=getValueByPath(fromObject,["transparent"]);return null!=fromTransparent&&setValueByPath(toObject,["transparent"],fromTransparent),toObject}(0,fromSessionResumption));const fromInputAudioTranscription=getValueByPath(fromObject,["inputAudioTranscription"]);void 0!==parentObject&&null!=fromInputAudioTranscription&&setValueByPath(parentObject,["setup","inputAudioTranscription"],{});const fromOutputAudioTranscription=getValueByPath(fromObject,["outputAudioTranscription"]);void 0!==parentObject&&null!=fromOutputAudioTranscription&&setValueByPath(parentObject,["setup","outputAudioTranscription"],{});const fromRealtimeInputConfig=getValueByPath(fromObject,["realtimeInputConfig"]);void 0!==parentObject&&null!=fromRealtimeInputConfig&&setValueByPath(parentObject,["setup","realtimeInputConfig"],realtimeInputConfigToVertex(0,fromRealtimeInputConfig));const fromContextWindowCompression=getValueByPath(fromObject,["contextWindowCompression"]);return void 0!==parentObject&&null!=fromContextWindowCompression&&setValueByPath(parentObject,["setup","contextWindowCompression"],contextWindowCompressionConfigToVertex(0,fromContextWindowCompression)),{}}function contentFromMldev$1(apiClient,fromObject){const toObject={},fromParts=getValueByPath(fromObject,["parts"]);null!=fromParts&&(Array.isArray(fromParts)?setValueByPath(toObject,["parts"],fromParts.map((item=>function partFromMldev$1(apiClient,fromObject){const toObject={},fromThought=getValueByPath(fromObject,["thought"]);null!=fromThought&&setValueByPath(toObject,["thought"],fromThought);const fromCodeExecutionResult=getValueByPath(fromObject,["codeExecutionResult"]);null!=fromCodeExecutionResult&&setValueByPath(toObject,["codeExecutionResult"],fromCodeExecutionResult);const fromExecutableCode=getValueByPath(fromObject,["executableCode"]);null!=fromExecutableCode&&setValueByPath(toObject,["executableCode"],fromExecutableCode);const fromFileData=getValueByPath(fromObject,["fileData"]);null!=fromFileData&&setValueByPath(toObject,["fileData"],fromFileData);const fromFunctionCall=getValueByPath(fromObject,["functionCall"]);null!=fromFunctionCall&&setValueByPath(toObject,["functionCall"],fromFunctionCall);const fromFunctionResponse=getValueByPath(fromObject,["functionResponse"]);null!=fromFunctionResponse&&setValueByPath(toObject,["functionResponse"],fromFunctionResponse);const fromInlineData=getValueByPath(fromObject,["inlineData"]);null!=fromInlineData&&setValueByPath(toObject,["inlineData"],fromInlineData);const fromText=getValueByPath(fromObject,["text"]);return null!=fromText&&setValueByPath(toObject,["text"],fromText),toObject}(0,item)))):setValueByPath(toObject,["parts"],fromParts));const fromRole=getValueByPath(fromObject,["role"]);return null!=fromRole&&setValueByPath(toObject,["role"],fromRole),toObject}function contentFromVertex$1(apiClient,fromObject){const toObject={},fromParts=getValueByPath(fromObject,["parts"]);null!=fromParts&&(Array.isArray(fromParts)?setValueByPath(toObject,["parts"],fromParts.map((item=>function partFromVertex$1(apiClient,fromObject){const toObject={},fromVideoMetadata=getValueByPath(fromObject,["videoMetadata"]);null!=fromVideoMetadata&&setValueByPath(toObject,["videoMetadata"],fromVideoMetadata);const fromThought=getValueByPath(fromObject,["thought"]);null!=fromThought&&setValueByPath(toObject,["thought"],fromThought);const fromCodeExecutionResult=getValueByPath(fromObject,["codeExecutionResult"]);null!=fromCodeExecutionResult&&setValueByPath(toObject,["codeExecutionResult"],fromCodeExecutionResult);const fromExecutableCode=getValueByPath(fromObject,["executableCode"]);null!=fromExecutableCode&&setValueByPath(toObject,["executableCode"],fromExecutableCode);const fromFileData=getValueByPath(fromObject,["fileData"]);null!=fromFileData&&setValueByPath(toObject,["fileData"],fromFileData);const fromFunctionCall=getValueByPath(fromObject,["functionCall"]);null!=fromFunctionCall&&setValueByPath(toObject,["functionCall"],fromFunctionCall);const fromFunctionResponse=getValueByPath(fromObject,["functionResponse"]);null!=fromFunctionResponse&&setValueByPath(toObject,["functionResponse"],fromFunctionResponse);const fromInlineData=getValueByPath(fromObject,["inlineData"]);null!=fromInlineData&&setValueByPath(toObject,["inlineData"],fromInlineData);const fromText=getValueByPath(fromObject,["text"]);return null!=fromText&&setValueByPath(toObject,["text"],fromText),toObject}(0,item)))):setValueByPath(toObject,["parts"],fromParts));const fromRole=getValueByPath(fromObject,["role"]);return null!=fromRole&&setValueByPath(toObject,["role"],fromRole),toObject}function transcriptionFromMldev(apiClient,fromObject){const toObject={},fromText=getValueByPath(fromObject,["text"]);null!=fromText&&setValueByPath(toObject,["text"],fromText);const fromFinished=getValueByPath(fromObject,["finished"]);return null!=fromFinished&&setValueByPath(toObject,["finished"],fromFinished),toObject}function transcriptionFromVertex(apiClient,fromObject){const toObject={},fromText=getValueByPath(fromObject,["text"]);null!=fromText&&setValueByPath(toObject,["text"],fromText);const fromFinished=getValueByPath(fromObject,["finished"]);return null!=fromFinished&&setValueByPath(toObject,["finished"],fromFinished),toObject}function liveServerToolCallFromMldev(apiClient,fromObject){const toObject={},fromFunctionCalls=getValueByPath(fromObject,["functionCalls"]);return null!=fromFunctionCalls&&(Array.isArray(fromFunctionCalls)?setValueByPath(toObject,["functionCalls"],fromFunctionCalls.map((item=>function functionCallFromMldev(apiClient,fromObject){const toObject={},fromId=getValueByPath(fromObject,["id"]);null!=fromId&&setValueByPath(toObject,["id"],fromId);const fromArgs=getValueByPath(fromObject,["args"]);null!=fromArgs&&setValueByPath(toObject,["args"],fromArgs);const fromName=getValueByPath(fromObject,["name"]);return null!=fromName&&setValueByPath(toObject,["name"],fromName),toObject}(0,item)))):setValueByPath(toObject,["functionCalls"],fromFunctionCalls)),toObject}function liveServerToolCallFromVertex(apiClient,fromObject){const toObject={},fromFunctionCalls=getValueByPath(fromObject,["functionCalls"]);return null!=fromFunctionCalls&&(Array.isArray(fromFunctionCalls)?setValueByPath(toObject,["functionCalls"],fromFunctionCalls.map((item=>function functionCallFromVertex(apiClient,fromObject){const toObject={},fromArgs=getValueByPath(fromObject,["args"]);null!=fromArgs&&setValueByPath(toObject,["args"],fromArgs);const fromName=getValueByPath(fromObject,["name"]);return null!=fromName&&setValueByPath(toObject,["name"],fromName),toObject}(0,item)))):setValueByPath(toObject,["functionCalls"],fromFunctionCalls)),toObject}function modalityTokenCountFromMldev(apiClient,fromObject){const toObject={},fromModality=getValueByPath(fromObject,["modality"]);null!=fromModality&&setValueByPath(toObject,["modality"],fromModality);const fromTokenCount=getValueByPath(fromObject,["tokenCount"]);return null!=fromTokenCount&&setValueByPath(toObject,["tokenCount"],fromTokenCount),toObject}function modalityTokenCountFromVertex(apiClient,fromObject){const toObject={},fromModality=getValueByPath(fromObject,["modality"]);null!=fromModality&&setValueByPath(toObject,["modality"],fromModality);const fromTokenCount=getValueByPath(fromObject,["tokenCount"]);return null!=fromTokenCount&&setValueByPath(toObject,["tokenCount"],fromTokenCount),toObject}function liveServerMessageFromMldev(apiClient,fromObject){const toObject={};null!=getValueByPath(fromObject,["setupComplete"])&&setValueByPath(toObject,["setupComplete"],{});const fromServerContent=getValueByPath(fromObject,["serverContent"]);null!=fromServerContent&&setValueByPath(toObject,["serverContent"],function liveServerContentFromMldev(apiClient,fromObject){const toObject={},fromModelTurn=getValueByPath(fromObject,["modelTurn"]);null!=fromModelTurn&&setValueByPath(toObject,["modelTurn"],contentFromMldev$1(0,fromModelTurn));const fromTurnComplete=getValueByPath(fromObject,["turnComplete"]);null!=fromTurnComplete&&setValueByPath(toObject,["turnComplete"],fromTurnComplete);const fromInterrupted=getValueByPath(fromObject,["interrupted"]);null!=fromInterrupted&&setValueByPath(toObject,["interrupted"],fromInterrupted);const fromGenerationComplete=getValueByPath(fromObject,["generationComplete"]);null!=fromGenerationComplete&&setValueByPath(toObject,["generationComplete"],fromGenerationComplete);const fromInputTranscription=getValueByPath(fromObject,["inputTranscription"]);null!=fromInputTranscription&&setValueByPath(toObject,["inputTranscription"],transcriptionFromMldev(0,fromInputTranscription));const fromOutputTranscription=getValueByPath(fromObject,["outputTranscription"]);return null!=fromOutputTranscription&&setValueByPath(toObject,["outputTranscription"],transcriptionFromMldev(0,fromOutputTranscription)),toObject}(0,fromServerContent));const fromToolCall=getValueByPath(fromObject,["toolCall"]);null!=fromToolCall&&setValueByPath(toObject,["toolCall"],liveServerToolCallFromMldev(0,fromToolCall));const fromToolCallCancellation=getValueByPath(fromObject,["toolCallCancellation"]);null!=fromToolCallCancellation&&setValueByPath(toObject,["toolCallCancellation"],function liveServerToolCallCancellationFromMldev(apiClient,fromObject){const toObject={},fromIds=getValueByPath(fromObject,["ids"]);return null!=fromIds&&setValueByPath(toObject,["ids"],fromIds),toObject}(0,fromToolCallCancellation));const fromUsageMetadata=getValueByPath(fromObject,["usageMetadata"]);null!=fromUsageMetadata&&setValueByPath(toObject,["usageMetadata"],function usageMetadataFromMldev(apiClient,fromObject){const toObject={},fromPromptTokenCount=getValueByPath(fromObject,["promptTokenCount"]);null!=fromPromptTokenCount&&setValueByPath(toObject,["promptTokenCount"],fromPromptTokenCount);const fromCachedContentTokenCount=getValueByPath(fromObject,["cachedContentTokenCount"]);null!=fromCachedContentTokenCount&&setValueByPath(toObject,["cachedContentTokenCount"],fromCachedContentTokenCount);const fromResponseTokenCount=getValueByPath(fromObject,["responseTokenCount"]);null!=fromResponseTokenCount&&setValueByPath(toObject,["responseTokenCount"],fromResponseTokenCount);const fromToolUsePromptTokenCount=getValueByPath(fromObject,["toolUsePromptTokenCount"]);null!=fromToolUsePromptTokenCount&&setValueByPath(toObject,["toolUsePromptTokenCount"],fromToolUsePromptTokenCount);const fromThoughtsTokenCount=getValueByPath(fromObject,["thoughtsTokenCount"]);null!=fromThoughtsTokenCount&&setValueByPath(toObject,["thoughtsTokenCount"],fromThoughtsTokenCount);const fromTotalTokenCount=getValueByPath(fromObject,["totalTokenCount"]);null!=fromTotalTokenCount&&setValueByPath(toObject,["totalTokenCount"],fromTotalTokenCount);const fromPromptTokensDetails=getValueByPath(fromObject,["promptTokensDetails"]);null!=fromPromptTokensDetails&&(Array.isArray(fromPromptTokensDetails)?setValueByPath(toObject,["promptTokensDetails"],fromPromptTokensDetails.map((item=>modalityTokenCountFromMldev(0,item)))):setValueByPath(toObject,["promptTokensDetails"],fromPromptTokensDetails));const fromCacheTokensDetails=getValueByPath(fromObject,["cacheTokensDetails"]);null!=fromCacheTokensDetails&&(Array.isArray(fromCacheTokensDetails)?setValueByPath(toObject,["cacheTokensDetails"],fromCacheTokensDetails.map((item=>modalityTokenCountFromMldev(0,item)))):setValueByPath(toObject,["cacheTokensDetails"],fromCacheTokensDetails));const fromResponseTokensDetails=getValueByPath(fromObject,["responseTokensDetails"]);null!=fromResponseTokensDetails&&(Array.isArray(fromResponseTokensDetails)?setValueByPath(toObject,["responseTokensDetails"],fromResponseTokensDetails.map((item=>modalityTokenCountFromMldev(0,item)))):setValueByPath(toObject,["responseTokensDetails"],fromResponseTokensDetails));const fromToolUsePromptTokensDetails=getValueByPath(fromObject,["toolUsePromptTokensDetails"]);return null!=fromToolUsePromptTokensDetails&&(Array.isArray(fromToolUsePromptTokensDetails)?setValueByPath(toObject,["toolUsePromptTokensDetails"],fromToolUsePromptTokensDetails.map((item=>modalityTokenCountFromMldev(0,item)))):setValueByPath(toObject,["toolUsePromptTokensDetails"],fromToolUsePromptTokensDetails)),toObject}(0,fromUsageMetadata));const fromGoAway=getValueByPath(fromObject,["goAway"]);null!=fromGoAway&&setValueByPath(toObject,["goAway"],function liveServerGoAwayFromMldev(apiClient,fromObject){const toObject={},fromTimeLeft=getValueByPath(fromObject,["timeLeft"]);return null!=fromTimeLeft&&setValueByPath(toObject,["timeLeft"],fromTimeLeft),toObject}(0,fromGoAway));const fromSessionResumptionUpdate=getValueByPath(fromObject,["sessionResumptionUpdate"]);return null!=fromSessionResumptionUpdate&&setValueByPath(toObject,["sessionResumptionUpdate"],function liveServerSessionResumptionUpdateFromMldev(apiClient,fromObject){const toObject={},fromNewHandle=getValueByPath(fromObject,["newHandle"]);null!=fromNewHandle&&setValueByPath(toObject,["newHandle"],fromNewHandle);const fromResumable=getValueByPath(fromObject,["resumable"]);null!=fromResumable&&setValueByPath(toObject,["resumable"],fromResumable);const fromLastConsumedClientMessageIndex=getValueByPath(fromObject,["lastConsumedClientMessageIndex"]);return null!=fromLastConsumedClientMessageIndex&&setValueByPath(toObject,["lastConsumedClientMessageIndex"],fromLastConsumedClientMessageIndex),toObject}(0,fromSessionResumptionUpdate)),toObject}function liveServerMessageFromVertex(apiClient,fromObject){const toObject={};null!=getValueByPath(fromObject,["setupComplete"])&&setValueByPath(toObject,["setupComplete"],{});const fromServerContent=getValueByPath(fromObject,["serverContent"]);null!=fromServerContent&&setValueByPath(toObject,["serverContent"],function liveServerContentFromVertex(apiClient,fromObject){const toObject={},fromModelTurn=getValueByPath(fromObject,["modelTurn"]);null!=fromModelTurn&&setValueByPath(toObject,["modelTurn"],contentFromVertex$1(0,fromModelTurn));const fromTurnComplete=getValueByPath(fromObject,["turnComplete"]);null!=fromTurnComplete&&setValueByPath(toObject,["turnComplete"],fromTurnComplete);const fromInterrupted=getValueByPath(fromObject,["interrupted"]);null!=fromInterrupted&&setValueByPath(toObject,["interrupted"],fromInterrupted);const fromGenerationComplete=getValueByPath(fromObject,["generationComplete"]);null!=fromGenerationComplete&&setValueByPath(toObject,["generationComplete"],fromGenerationComplete);const fromInputTranscription=getValueByPath(fromObject,["inputTranscription"]);null!=fromInputTranscription&&setValueByPath(toObject,["inputTranscription"],transcriptionFromVertex(0,fromInputTranscription));const fromOutputTranscription=getValueByPath(fromObject,["outputTranscription"]);return null!=fromOutputTranscription&&setValueByPath(toObject,["outputTranscription"],transcriptionFromVertex(0,fromOutputTranscription)),toObject}(0,fromServerContent));const fromToolCall=getValueByPath(fromObject,["toolCall"]);null!=fromToolCall&&setValueByPath(toObject,["toolCall"],liveServerToolCallFromVertex(0,fromToolCall));const fromToolCallCancellation=getValueByPath(fromObject,["toolCallCancellation"]);null!=fromToolCallCancellation&&setValueByPath(toObject,["toolCallCancellation"],function liveServerToolCallCancellationFromVertex(apiClient,fromObject){const toObject={},fromIds=getValueByPath(fromObject,["ids"]);return null!=fromIds&&setValueByPath(toObject,["ids"],fromIds),toObject}(0,fromToolCallCancellation));const fromUsageMetadata=getValueByPath(fromObject,["usageMetadata"]);null!=fromUsageMetadata&&setValueByPath(toObject,["usageMetadata"],function usageMetadataFromVertex(apiClient,fromObject){const toObject={},fromPromptTokenCount=getValueByPath(fromObject,["promptTokenCount"]);null!=fromPromptTokenCount&&setValueByPath(toObject,["promptTokenCount"],fromPromptTokenCount);const fromCachedContentTokenCount=getValueByPath(fromObject,["cachedContentTokenCount"]);null!=fromCachedContentTokenCount&&setValueByPath(toObject,["cachedContentTokenCount"],fromCachedContentTokenCount);const fromResponseTokenCount=getValueByPath(fromObject,["candidatesTokenCount"]);null!=fromResponseTokenCount&&setValueByPath(toObject,["responseTokenCount"],fromResponseTokenCount);const fromToolUsePromptTokenCount=getValueByPath(fromObject,["toolUsePromptTokenCount"]);null!=fromToolUsePromptTokenCount&&setValueByPath(toObject,["toolUsePromptTokenCount"],fromToolUsePromptTokenCount);const fromThoughtsTokenCount=getValueByPath(fromObject,["thoughtsTokenCount"]);null!=fromThoughtsTokenCount&&setValueByPath(toObject,["thoughtsTokenCount"],fromThoughtsTokenCount);const fromTotalTokenCount=getValueByPath(fromObject,["totalTokenCount"]);null!=fromTotalTokenCount&&setValueByPath(toObject,["totalTokenCount"],fromTotalTokenCount);const fromPromptTokensDetails=getValueByPath(fromObject,["promptTokensDetails"]);null!=fromPromptTokensDetails&&(Array.isArray(fromPromptTokensDetails)?setValueByPath(toObject,["promptTokensDetails"],fromPromptTokensDetails.map((item=>modalityTokenCountFromVertex(0,item)))):setValueByPath(toObject,["promptTokensDetails"],fromPromptTokensDetails));const fromCacheTokensDetails=getValueByPath(fromObject,["cacheTokensDetails"]);null!=fromCacheTokensDetails&&(Array.isArray(fromCacheTokensDetails)?setValueByPath(toObject,["cacheTokensDetails"],fromCacheTokensDetails.map((item=>modalityTokenCountFromVertex(0,item)))):setValueByPath(toObject,["cacheTokensDetails"],fromCacheTokensDetails));const fromResponseTokensDetails=getValueByPath(fromObject,["candidatesTokensDetails"]);null!=fromResponseTokensDetails&&(Array.isArray(fromResponseTokensDetails)?setValueByPath(toObject,["responseTokensDetails"],fromResponseTokensDetails.map((item=>modalityTokenCountFromVertex(0,item)))):setValueByPath(toObject,["responseTokensDetails"],fromResponseTokensDetails));const fromToolUsePromptTokensDetails=getValueByPath(fromObject,["toolUsePromptTokensDetails"]);null!=fromToolUsePromptTokensDetails&&(Array.isArray(fromToolUsePromptTokensDetails)?setValueByPath(toObject,["toolUsePromptTokensDetails"],fromToolUsePromptTokensDetails.map((item=>modalityTokenCountFromVertex(0,item)))):setValueByPath(toObject,["toolUsePromptTokensDetails"],fromToolUsePromptTokensDetails));const fromTrafficType=getValueByPath(fromObject,["trafficType"]);return null!=fromTrafficType&&setValueByPath(toObject,["trafficType"],fromTrafficType),toObject}(0,fromUsageMetadata));const fromGoAway=getValueByPath(fromObject,["goAway"]);null!=fromGoAway&&setValueByPath(toObject,["goAway"],function liveServerGoAwayFromVertex(apiClient,fromObject){const toObject={},fromTimeLeft=getValueByPath(fromObject,["timeLeft"]);return null!=fromTimeLeft&&setValueByPath(toObject,["timeLeft"],fromTimeLeft),toObject}(0,fromGoAway));const fromSessionResumptionUpdate=getValueByPath(fromObject,["sessionResumptionUpdate"]);return null!=fromSessionResumptionUpdate&&setValueByPath(toObject,["sessionResumptionUpdate"],function liveServerSessionResumptionUpdateFromVertex(apiClient,fromObject){const toObject={},fromNewHandle=getValueByPath(fromObject,["newHandle"]);null!=fromNewHandle&&setValueByPath(toObject,["newHandle"],fromNewHandle);const fromResumable=getValueByPath(fromObject,["resumable"]);null!=fromResumable&&setValueByPath(toObject,["resumable"],fromResumable);const fromLastConsumedClientMessageIndex=getValueByPath(fromObject,["lastConsumedClientMessageIndex"]);return null!=fromLastConsumedClientMessageIndex&&setValueByPath(toObject,["lastConsumedClientMessageIndex"],fromLastConsumedClientMessageIndex),toObject}(0,fromSessionResumptionUpdate)),toObject}function contentToMldev(apiClient,fromObject){const toObject={},fromParts=getValueByPath(fromObject,["parts"]);null!=fromParts&&(Array.isArray(fromParts)?setValueByPath(toObject,["parts"],fromParts.map((item=>function partToMldev(apiClient,fromObject){const toObject={};if(void 0!==getValueByPath(fromObject,["videoMetadata"]))throw new Error("videoMetadata parameter is not supported in Gemini API.");const fromThought=getValueByPath(fromObject,["thought"]);null!=fromThought&&setValueByPath(toObject,["thought"],fromThought);const fromCodeExecutionResult=getValueByPath(fromObject,["codeExecutionResult"]);null!=fromCodeExecutionResult&&setValueByPath(toObject,["codeExecutionResult"],fromCodeExecutionResult);const fromExecutableCode=getValueByPath(fromObject,["executableCode"]);null!=fromExecutableCode&&setValueByPath(toObject,["executableCode"],fromExecutableCode);const fromFileData=getValueByPath(fromObject,["fileData"]);null!=fromFileData&&setValueByPath(toObject,["fileData"],fromFileData);const fromFunctionCall=getValueByPath(fromObject,["functionCall"]);null!=fromFunctionCall&&setValueByPath(toObject,["functionCall"],fromFunctionCall);const fromFunctionResponse=getValueByPath(fromObject,["functionResponse"]);null!=fromFunctionResponse&&setValueByPath(toObject,["functionResponse"],fromFunctionResponse);const fromInlineData=getValueByPath(fromObject,["inlineData"]);null!=fromInlineData&&setValueByPath(toObject,["inlineData"],fromInlineData);const fromText=getValueByPath(fromObject,["text"]);return null!=fromText&&setValueByPath(toObject,["text"],fromText),toObject}(0,item)))):setValueByPath(toObject,["parts"],fromParts));const fromRole=getValueByPath(fromObject,["role"]);return null!=fromRole&&setValueByPath(toObject,["role"],fromRole),toObject}function googleSearchRetrievalToMldev(apiClient,fromObject){const toObject={},fromDynamicRetrievalConfig=getValueByPath(fromObject,["dynamicRetrievalConfig"]);return null!=fromDynamicRetrievalConfig&&setValueByPath(toObject,["dynamicRetrievalConfig"],function dynamicRetrievalConfigToMldev(apiClient,fromObject){const toObject={},fromMode=getValueByPath(fromObject,["mode"]);null!=fromMode&&setValueByPath(toObject,["mode"],fromMode);const fromDynamicThreshold=getValueByPath(fromObject,["dynamicThreshold"]);return null!=fromDynamicThreshold&&setValueByPath(toObject,["dynamicThreshold"],fromDynamicThreshold),toObject}(0,fromDynamicRetrievalConfig)),toObject}function toolToMldev(apiClient,fromObject){const toObject={},fromFunctionDeclarations=getValueByPath(fromObject,["functionDeclarations"]);if(null!=fromFunctionDeclarations&&(Array.isArray(fromFunctionDeclarations)?setValueByPath(toObject,["functionDeclarations"],fromFunctionDeclarations.map((item=>function functionDeclarationToMldev(apiClient,fromObject){const toObject={};if(void 0!==getValueByPath(fromObject,["response"]))throw new Error("response parameter is not supported in Gemini API.");const fromDescription=getValueByPath(fromObject,["description"]);null!=fromDescription&&setValueByPath(toObject,["description"],fromDescription);const fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["name"],fromName);const fromParameters=getValueByPath(fromObject,["parameters"]);return null!=fromParameters&&setValueByPath(toObject,["parameters"],fromParameters),toObject}(0,item)))):setValueByPath(toObject,["functionDeclarations"],fromFunctionDeclarations)),void 0!==getValueByPath(fromObject,["retrieval"]))throw new Error("retrieval parameter is not supported in Gemini API.");null!=getValueByPath(fromObject,["googleSearch"])&&setValueByPath(toObject,["googleSearch"],{});const fromGoogleSearchRetrieval=getValueByPath(fromObject,["googleSearchRetrieval"]);null!=fromGoogleSearchRetrieval&&setValueByPath(toObject,["googleSearchRetrieval"],googleSearchRetrievalToMldev(0,fromGoogleSearchRetrieval));const fromCodeExecution=getValueByPath(fromObject,["codeExecution"]);return null!=fromCodeExecution&&setValueByPath(toObject,["codeExecution"],fromCodeExecution),toObject}function toolConfigToMldev(apiClient,fromObject){const toObject={},fromFunctionCallingConfig=getValueByPath(fromObject,["functionCallingConfig"]);return null!=fromFunctionCallingConfig&&setValueByPath(toObject,["functionCallingConfig"],function functionCallingConfigToMldev(apiClient,fromObject){const toObject={},fromMode=getValueByPath(fromObject,["mode"]);null!=fromMode&&setValueByPath(toObject,["mode"],fromMode);const fromAllowedFunctionNames=getValueByPath(fromObject,["allowedFunctionNames"]);return null!=fromAllowedFunctionNames&&setValueByPath(toObject,["allowedFunctionNames"],fromAllowedFunctionNames),toObject}(0,fromFunctionCallingConfig)),toObject}function voiceConfigToMldev(apiClient,fromObject){const toObject={},fromPrebuiltVoiceConfig=getValueByPath(fromObject,["prebuiltVoiceConfig"]);return null!=fromPrebuiltVoiceConfig&&setValueByPath(toObject,["prebuiltVoiceConfig"],function prebuiltVoiceConfigToMldev(apiClient,fromObject){const toObject={},fromVoiceName=getValueByPath(fromObject,["voiceName"]);return null!=fromVoiceName&&setValueByPath(toObject,["voiceName"],fromVoiceName),toObject}(0,fromPrebuiltVoiceConfig)),toObject}function generateContentConfigToMldev(apiClient,fromObject,parentObject){const toObject={},fromSystemInstruction=getValueByPath(fromObject,["systemInstruction"]);void 0!==parentObject&&null!=fromSystemInstruction&&setValueByPath(parentObject,["systemInstruction"],contentToMldev(0,tContent(0,fromSystemInstruction)));const fromTemperature=getValueByPath(fromObject,["temperature"]);null!=fromTemperature&&setValueByPath(toObject,["temperature"],fromTemperature);const fromTopP=getValueByPath(fromObject,["topP"]);null!=fromTopP&&setValueByPath(toObject,["topP"],fromTopP);const fromTopK=getValueByPath(fromObject,["topK"]);null!=fromTopK&&setValueByPath(toObject,["topK"],fromTopK);const fromCandidateCount=getValueByPath(fromObject,["candidateCount"]);null!=fromCandidateCount&&setValueByPath(toObject,["candidateCount"],fromCandidateCount);const fromMaxOutputTokens=getValueByPath(fromObject,["maxOutputTokens"]);null!=fromMaxOutputTokens&&setValueByPath(toObject,["maxOutputTokens"],fromMaxOutputTokens);const fromStopSequences=getValueByPath(fromObject,["stopSequences"]);null!=fromStopSequences&&setValueByPath(toObject,["stopSequences"],fromStopSequences);const fromResponseLogprobs=getValueByPath(fromObject,["responseLogprobs"]);null!=fromResponseLogprobs&&setValueByPath(toObject,["responseLogprobs"],fromResponseLogprobs);const fromLogprobs=getValueByPath(fromObject,["logprobs"]);null!=fromLogprobs&&setValueByPath(toObject,["logprobs"],fromLogprobs);const fromPresencePenalty=getValueByPath(fromObject,["presencePenalty"]);null!=fromPresencePenalty&&setValueByPath(toObject,["presencePenalty"],fromPresencePenalty);const fromFrequencyPenalty=getValueByPath(fromObject,["frequencyPenalty"]);null!=fromFrequencyPenalty&&setValueByPath(toObject,["frequencyPenalty"],fromFrequencyPenalty);const fromSeed=getValueByPath(fromObject,["seed"]);null!=fromSeed&&setValueByPath(toObject,["seed"],fromSeed);const fromResponseMimeType=getValueByPath(fromObject,["responseMimeType"]);null!=fromResponseMimeType&&setValueByPath(toObject,["responseMimeType"],fromResponseMimeType);const fromResponseSchema=getValueByPath(fromObject,["responseSchema"]);if(null!=fromResponseSchema&&setValueByPath(toObject,["responseSchema"],function schemaToMldev(apiClient,fromObject){const toObject={};if(void 0!==getValueByPath(fromObject,["example"]))throw new Error("example parameter is not supported in Gemini API.");if(void 0!==getValueByPath(fromObject,["pattern"]))throw new Error("pattern parameter is not supported in Gemini API.");if(void 0!==getValueByPath(fromObject,["default"]))throw new Error("default parameter is not supported in Gemini API.");if(void 0!==getValueByPath(fromObject,["maxLength"]))throw new Error("maxLength parameter is not supported in Gemini API.");if(void 0!==getValueByPath(fromObject,["minLength"]))throw new Error("minLength parameter is not supported in Gemini API.");if(void 0!==getValueByPath(fromObject,["minProperties"]))throw new Error("minProperties parameter is not supported in Gemini API.");if(void 0!==getValueByPath(fromObject,["maxProperties"]))throw new Error("maxProperties parameter is not supported in Gemini API.");const fromAnyOf=getValueByPath(fromObject,["anyOf"]);null!=fromAnyOf&&setValueByPath(toObject,["anyOf"],fromAnyOf);const fromDescription=getValueByPath(fromObject,["description"]);null!=fromDescription&&setValueByPath(toObject,["description"],fromDescription);const fromEnum=getValueByPath(fromObject,["enum"]);null!=fromEnum&&setValueByPath(toObject,["enum"],fromEnum);const fromFormat=getValueByPath(fromObject,["format"]);null!=fromFormat&&setValueByPath(toObject,["format"],fromFormat);const fromItems=getValueByPath(fromObject,["items"]);null!=fromItems&&setValueByPath(toObject,["items"],fromItems);const fromMaxItems=getValueByPath(fromObject,["maxItems"]);null!=fromMaxItems&&setValueByPath(toObject,["maxItems"],fromMaxItems);const fromMaximum=getValueByPath(fromObject,["maximum"]);null!=fromMaximum&&setValueByPath(toObject,["maximum"],fromMaximum);const fromMinItems=getValueByPath(fromObject,["minItems"]);null!=fromMinItems&&setValueByPath(toObject,["minItems"],fromMinItems);const fromMinimum=getValueByPath(fromObject,["minimum"]);null!=fromMinimum&&setValueByPath(toObject,["minimum"],fromMinimum);const fromNullable=getValueByPath(fromObject,["nullable"]);null!=fromNullable&&setValueByPath(toObject,["nullable"],fromNullable);const fromProperties=getValueByPath(fromObject,["properties"]);null!=fromProperties&&setValueByPath(toObject,["properties"],fromProperties);const fromPropertyOrdering=getValueByPath(fromObject,["propertyOrdering"]);null!=fromPropertyOrdering&&setValueByPath(toObject,["propertyOrdering"],fromPropertyOrdering);const fromRequired=getValueByPath(fromObject,["required"]);null!=fromRequired&&setValueByPath(toObject,["required"],fromRequired);const fromTitle=getValueByPath(fromObject,["title"]);null!=fromTitle&&setValueByPath(toObject,["title"],fromTitle);const fromType=getValueByPath(fromObject,["type"]);return null!=fromType&&setValueByPath(toObject,["type"],fromType),toObject}(0,tSchema(apiClient,fromResponseSchema))),void 0!==getValueByPath(fromObject,["routingConfig"]))throw new Error("routingConfig parameter is not supported in Gemini API.");if(void 0!==getValueByPath(fromObject,["modelSelectionConfig"]))throw new Error("modelSelectionConfig parameter is not supported in Gemini API.");const fromSafetySettings=getValueByPath(fromObject,["safetySettings"]);void 0!==parentObject&&null!=fromSafetySettings&&(Array.isArray(fromSafetySettings)?setValueByPath(parentObject,["safetySettings"],fromSafetySettings.map((item=>function safetySettingToMldev(apiClient,fromObject){const toObject={};if(void 0!==getValueByPath(fromObject,["method"]))throw new Error("method parameter is not supported in Gemini API.");const fromCategory=getValueByPath(fromObject,["category"]);null!=fromCategory&&setValueByPath(toObject,["category"],fromCategory);const fromThreshold=getValueByPath(fromObject,["threshold"]);return null!=fromThreshold&&setValueByPath(toObject,["threshold"],fromThreshold),toObject}(0,item)))):setValueByPath(parentObject,["safetySettings"],fromSafetySettings));const fromTools=getValueByPath(fromObject,["tools"]);void 0!==parentObject&&null!=fromTools&&(Array.isArray(fromTools)?setValueByPath(parentObject,["tools"],tTools(0,tTools(0,fromTools).map((item=>toolToMldev(0,tTool(0,item)))))):setValueByPath(parentObject,["tools"],tTools(0,fromTools)));const fromToolConfig=getValueByPath(fromObject,["toolConfig"]);if(void 0!==parentObject&&null!=fromToolConfig&&setValueByPath(parentObject,["toolConfig"],toolConfigToMldev(0,fromToolConfig)),void 0!==getValueByPath(fromObject,["labels"]))throw new Error("labels parameter is not supported in Gemini API.");const fromCachedContent=getValueByPath(fromObject,["cachedContent"]);void 0!==parentObject&&null!=fromCachedContent&&setValueByPath(parentObject,["cachedContent"],tCachedContentName(apiClient,fromCachedContent));const fromResponseModalities=getValueByPath(fromObject,["responseModalities"]);null!=fromResponseModalities&&setValueByPath(toObject,["responseModalities"],fromResponseModalities);const fromMediaResolution=getValueByPath(fromObject,["mediaResolution"]);null!=fromMediaResolution&&setValueByPath(toObject,["mediaResolution"],fromMediaResolution);const fromSpeechConfig=getValueByPath(fromObject,["speechConfig"]);if(null!=fromSpeechConfig&&setValueByPath(toObject,["speechConfig"],function speechConfigToMldev(apiClient,fromObject){const toObject={},fromVoiceConfig=getValueByPath(fromObject,["voiceConfig"]);null!=fromVoiceConfig&&setValueByPath(toObject,["voiceConfig"],voiceConfigToMldev(0,fromVoiceConfig));const fromLanguageCode=getValueByPath(fromObject,["languageCode"]);return null!=fromLanguageCode&&setValueByPath(toObject,["languageCode"],fromLanguageCode),toObject}(0,tSpeechConfig(0,fromSpeechConfig))),void 0!==getValueByPath(fromObject,["audioTimestamp"]))throw new Error("audioTimestamp parameter is not supported in Gemini API.");const fromThinkingConfig=getValueByPath(fromObject,["thinkingConfig"]);return null!=fromThinkingConfig&&setValueByPath(toObject,["thinkingConfig"],function thinkingConfigToMldev(apiClient,fromObject){const toObject={},fromIncludeThoughts=getValueByPath(fromObject,["includeThoughts"]);null!=fromIncludeThoughts&&setValueByPath(toObject,["includeThoughts"],fromIncludeThoughts);const fromThinkingBudget=getValueByPath(fromObject,["thinkingBudget"]);return null!=fromThinkingBudget&&setValueByPath(toObject,["thinkingBudget"],fromThinkingBudget),toObject}(0,fromThinkingConfig)),toObject}function generateContentParametersToMldev(apiClient,fromObject){const toObject={},fromModel=getValueByPath(fromObject,["model"]);null!=fromModel&&setValueByPath(toObject,["_url","model"],tModel(apiClient,fromModel));const fromContents=getValueByPath(fromObject,["contents"]);null!=fromContents&&(Array.isArray(fromContents)?setValueByPath(toObject,["contents"],tContents(0,tContents(0,fromContents).map((item=>contentToMldev(0,item))))):setValueByPath(toObject,["contents"],tContents(0,fromContents)));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["generationConfig"],generateContentConfigToMldev(apiClient,fromConfig,toObject)),toObject}function embedContentParametersToMldev(apiClient,fromObject){const toObject={},fromModel=getValueByPath(fromObject,["model"]);null!=fromModel&&setValueByPath(toObject,["_url","model"],tModel(apiClient,fromModel));const fromContents=getValueByPath(fromObject,["contents"]);null!=fromContents&&setValueByPath(toObject,["requests[]","content"],tContentsForEmbed(apiClient,fromContents));const fromConfig=getValueByPath(fromObject,["config"]);null!=fromConfig&&setValueByPath(toObject,["config"],function embedContentConfigToMldev(apiClient,fromObject,parentObject){const fromTaskType=getValueByPath(fromObject,["taskType"]);void 0!==parentObject&&null!=fromTaskType&&setValueByPath(parentObject,["requests[]","taskType"],fromTaskType);const fromTitle=getValueByPath(fromObject,["title"]);void 0!==parentObject&&null!=fromTitle&&setValueByPath(parentObject,["requests[]","title"],fromTitle);const fromOutputDimensionality=getValueByPath(fromObject,["outputDimensionality"]);if(void 0!==parentObject&&null!=fromOutputDimensionality&&setValueByPath(parentObject,["requests[]","outputDimensionality"],fromOutputDimensionality),void 0!==getValueByPath(fromObject,["mimeType"]))throw new Error("mimeType parameter is not supported in Gemini API.");if(void 0!==getValueByPath(fromObject,["autoTruncate"]))throw new Error("autoTruncate parameter is not supported in Gemini API.");return{}}(0,fromConfig,toObject));const fromModelForEmbedContent=getValueByPath(fromObject,["model"]);return void 0!==fromModelForEmbedContent&&setValueByPath(toObject,["requests[]","model"],tModel(apiClient,fromModelForEmbedContent)),toObject}function generateImagesParametersToMldev(apiClient,fromObject){const toObject={},fromModel=getValueByPath(fromObject,["model"]);null!=fromModel&&setValueByPath(toObject,["_url","model"],tModel(apiClient,fromModel));const fromPrompt=getValueByPath(fromObject,["prompt"]);null!=fromPrompt&&setValueByPath(toObject,["instances[0]","prompt"],fromPrompt);const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],function generateImagesConfigToMldev(apiClient,fromObject,parentObject){if(void 0!==getValueByPath(fromObject,["outputGcsUri"]))throw new Error("outputGcsUri parameter is not supported in Gemini API.");if(void 0!==getValueByPath(fromObject,["negativePrompt"]))throw new Error("negativePrompt parameter is not supported in Gemini API.");const fromNumberOfImages=getValueByPath(fromObject,["numberOfImages"]);void 0!==parentObject&&null!=fromNumberOfImages&&setValueByPath(parentObject,["parameters","sampleCount"],fromNumberOfImages);const fromAspectRatio=getValueByPath(fromObject,["aspectRatio"]);void 0!==parentObject&&null!=fromAspectRatio&&setValueByPath(parentObject,["parameters","aspectRatio"],fromAspectRatio);const fromGuidanceScale=getValueByPath(fromObject,["guidanceScale"]);if(void 0!==parentObject&&null!=fromGuidanceScale&&setValueByPath(parentObject,["parameters","guidanceScale"],fromGuidanceScale),void 0!==getValueByPath(fromObject,["seed"]))throw new Error("seed parameter is not supported in Gemini API.");const fromSafetyFilterLevel=getValueByPath(fromObject,["safetyFilterLevel"]);void 0!==parentObject&&null!=fromSafetyFilterLevel&&setValueByPath(parentObject,["parameters","safetySetting"],fromSafetyFilterLevel);const fromPersonGeneration=getValueByPath(fromObject,["personGeneration"]);void 0!==parentObject&&null!=fromPersonGeneration&&setValueByPath(parentObject,["parameters","personGeneration"],fromPersonGeneration);const fromIncludeSafetyAttributes=getValueByPath(fromObject,["includeSafetyAttributes"]);void 0!==parentObject&&null!=fromIncludeSafetyAttributes&&setValueByPath(parentObject,["parameters","includeSafetyAttributes"],fromIncludeSafetyAttributes);const fromIncludeRaiReason=getValueByPath(fromObject,["includeRaiReason"]);void 0!==parentObject&&null!=fromIncludeRaiReason&&setValueByPath(parentObject,["parameters","includeRaiReason"],fromIncludeRaiReason);const fromLanguage=getValueByPath(fromObject,["language"]);void 0!==parentObject&&null!=fromLanguage&&setValueByPath(parentObject,["parameters","language"],fromLanguage);const fromOutputMimeType=getValueByPath(fromObject,["outputMimeType"]);void 0!==parentObject&&null!=fromOutputMimeType&&setValueByPath(parentObject,["parameters","outputOptions","mimeType"],fromOutputMimeType);const fromOutputCompressionQuality=getValueByPath(fromObject,["outputCompressionQuality"]);if(void 0!==parentObject&&null!=fromOutputCompressionQuality&&setValueByPath(parentObject,["parameters","outputOptions","compressionQuality"],fromOutputCompressionQuality),void 0!==getValueByPath(fromObject,["addWatermark"]))throw new Error("addWatermark parameter is not supported in Gemini API.");if(void 0!==getValueByPath(fromObject,["enhancePrompt"]))throw new Error("enhancePrompt parameter is not supported in Gemini API.");return{}}(0,fromConfig,toObject)),toObject}function countTokensParametersToMldev(apiClient,fromObject){const toObject={},fromModel=getValueByPath(fromObject,["model"]);null!=fromModel&&setValueByPath(toObject,["_url","model"],tModel(apiClient,fromModel));const fromContents=getValueByPath(fromObject,["contents"]);null!=fromContents&&(Array.isArray(fromContents)?setValueByPath(toObject,["contents"],tContents(0,tContents(0,fromContents).map((item=>contentToMldev(0,item))))):setValueByPath(toObject,["contents"],tContents(0,fromContents)));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],function countTokensConfigToMldev(apiClient,fromObject){if(void 0!==getValueByPath(fromObject,["systemInstruction"]))throw new Error("systemInstruction parameter is not supported in Gemini API.");if(void 0!==getValueByPath(fromObject,["tools"]))throw new Error("tools parameter is not supported in Gemini API.");if(void 0!==getValueByPath(fromObject,["generationConfig"]))throw new Error("generationConfig parameter is not supported in Gemini API.");return{}}(0,fromConfig)),toObject}function generateVideosParametersToMldev(apiClient,fromObject){const toObject={},fromModel=getValueByPath(fromObject,["model"]);null!=fromModel&&setValueByPath(toObject,["_url","model"],tModel(apiClient,fromModel));const fromPrompt=getValueByPath(fromObject,["prompt"]);null!=fromPrompt&&setValueByPath(toObject,["instances[0]","prompt"],fromPrompt);const fromImage=getValueByPath(fromObject,["image"]);null!=fromImage&&setValueByPath(toObject,["instances[0]","image"],function imageToMldev(apiClient,fromObject){const toObject={};if(void 0!==getValueByPath(fromObject,["gcsUri"]))throw new Error("gcsUri parameter is not supported in Gemini API.");const fromImageBytes=getValueByPath(fromObject,["imageBytes"]);null!=fromImageBytes&&setValueByPath(toObject,["bytesBase64Encoded"],tBytes(0,fromImageBytes));const fromMimeType=getValueByPath(fromObject,["mimeType"]);return null!=fromMimeType&&setValueByPath(toObject,["mimeType"],fromMimeType),toObject}(0,fromImage));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],function generateVideosConfigToMldev(apiClient,fromObject,parentObject){const fromNumberOfVideos=getValueByPath(fromObject,["numberOfVideos"]);if(void 0!==parentObject&&null!=fromNumberOfVideos&&setValueByPath(parentObject,["parameters","sampleCount"],fromNumberOfVideos),void 0!==getValueByPath(fromObject,["outputGcsUri"]))throw new Error("outputGcsUri parameter is not supported in Gemini API.");if(void 0!==getValueByPath(fromObject,["fps"]))throw new Error("fps parameter is not supported in Gemini API.");const fromDurationSeconds=getValueByPath(fromObject,["durationSeconds"]);if(void 0!==parentObject&&null!=fromDurationSeconds&&setValueByPath(parentObject,["parameters","durationSeconds"],fromDurationSeconds),void 0!==getValueByPath(fromObject,["seed"]))throw new Error("seed parameter is not supported in Gemini API.");const fromAspectRatio=getValueByPath(fromObject,["aspectRatio"]);if(void 0!==parentObject&&null!=fromAspectRatio&&setValueByPath(parentObject,["parameters","aspectRatio"],fromAspectRatio),void 0!==getValueByPath(fromObject,["resolution"]))throw new Error("resolution parameter is not supported in Gemini API.");const fromPersonGeneration=getValueByPath(fromObject,["personGeneration"]);if(void 0!==parentObject&&null!=fromPersonGeneration&&setValueByPath(parentObject,["parameters","personGeneration"],fromPersonGeneration),void 0!==getValueByPath(fromObject,["pubsubTopic"]))throw new Error("pubsubTopic parameter is not supported in Gemini API.");const fromNegativePrompt=getValueByPath(fromObject,["negativePrompt"]);if(void 0!==parentObject&&null!=fromNegativePrompt&&setValueByPath(parentObject,["parameters","negativePrompt"],fromNegativePrompt),void 0!==getValueByPath(fromObject,["enhancePrompt"]))throw new Error("enhancePrompt parameter is not supported in Gemini API.");return{}}(0,fromConfig,toObject)),toObject}function contentToVertex(apiClient,fromObject){const toObject={},fromParts=getValueByPath(fromObject,["parts"]);null!=fromParts&&(Array.isArray(fromParts)?setValueByPath(toObject,["parts"],fromParts.map((item=>function partToVertex(apiClient,fromObject){const toObject={},fromVideoMetadata=getValueByPath(fromObject,["videoMetadata"]);null!=fromVideoMetadata&&setValueByPath(toObject,["videoMetadata"],fromVideoMetadata);const fromThought=getValueByPath(fromObject,["thought"]);null!=fromThought&&setValueByPath(toObject,["thought"],fromThought);const fromCodeExecutionResult=getValueByPath(fromObject,["codeExecutionResult"]);null!=fromCodeExecutionResult&&setValueByPath(toObject,["codeExecutionResult"],fromCodeExecutionResult);const fromExecutableCode=getValueByPath(fromObject,["executableCode"]);null!=fromExecutableCode&&setValueByPath(toObject,["executableCode"],fromExecutableCode);const fromFileData=getValueByPath(fromObject,["fileData"]);null!=fromFileData&&setValueByPath(toObject,["fileData"],fromFileData);const fromFunctionCall=getValueByPath(fromObject,["functionCall"]);null!=fromFunctionCall&&setValueByPath(toObject,["functionCall"],fromFunctionCall);const fromFunctionResponse=getValueByPath(fromObject,["functionResponse"]);null!=fromFunctionResponse&&setValueByPath(toObject,["functionResponse"],fromFunctionResponse);const fromInlineData=getValueByPath(fromObject,["inlineData"]);null!=fromInlineData&&setValueByPath(toObject,["inlineData"],fromInlineData);const fromText=getValueByPath(fromObject,["text"]);return null!=fromText&&setValueByPath(toObject,["text"],fromText),toObject}(0,item)))):setValueByPath(toObject,["parts"],fromParts));const fromRole=getValueByPath(fromObject,["role"]);return null!=fromRole&&setValueByPath(toObject,["role"],fromRole),toObject}function schemaToVertex(apiClient,fromObject){const toObject={},fromExample=getValueByPath(fromObject,["example"]);null!=fromExample&&setValueByPath(toObject,["example"],fromExample);const fromPattern=getValueByPath(fromObject,["pattern"]);null!=fromPattern&&setValueByPath(toObject,["pattern"],fromPattern);const fromDefault=getValueByPath(fromObject,["default"]);null!=fromDefault&&setValueByPath(toObject,["default"],fromDefault);const fromMaxLength=getValueByPath(fromObject,["maxLength"]);null!=fromMaxLength&&setValueByPath(toObject,["maxLength"],fromMaxLength);const fromMinLength=getValueByPath(fromObject,["minLength"]);null!=fromMinLength&&setValueByPath(toObject,["minLength"],fromMinLength);const fromMinProperties=getValueByPath(fromObject,["minProperties"]);null!=fromMinProperties&&setValueByPath(toObject,["minProperties"],fromMinProperties);const fromMaxProperties=getValueByPath(fromObject,["maxProperties"]);null!=fromMaxProperties&&setValueByPath(toObject,["maxProperties"],fromMaxProperties);const fromAnyOf=getValueByPath(fromObject,["anyOf"]);null!=fromAnyOf&&setValueByPath(toObject,["anyOf"],fromAnyOf);const fromDescription=getValueByPath(fromObject,["description"]);null!=fromDescription&&setValueByPath(toObject,["description"],fromDescription);const fromEnum=getValueByPath(fromObject,["enum"]);null!=fromEnum&&setValueByPath(toObject,["enum"],fromEnum);const fromFormat=getValueByPath(fromObject,["format"]);null!=fromFormat&&setValueByPath(toObject,["format"],fromFormat);const fromItems=getValueByPath(fromObject,["items"]);null!=fromItems&&setValueByPath(toObject,["items"],fromItems);const fromMaxItems=getValueByPath(fromObject,["maxItems"]);null!=fromMaxItems&&setValueByPath(toObject,["maxItems"],fromMaxItems);const fromMaximum=getValueByPath(fromObject,["maximum"]);null!=fromMaximum&&setValueByPath(toObject,["maximum"],fromMaximum);const fromMinItems=getValueByPath(fromObject,["minItems"]);null!=fromMinItems&&setValueByPath(toObject,["minItems"],fromMinItems);const fromMinimum=getValueByPath(fromObject,["minimum"]);null!=fromMinimum&&setValueByPath(toObject,["minimum"],fromMinimum);const fromNullable=getValueByPath(fromObject,["nullable"]);null!=fromNullable&&setValueByPath(toObject,["nullable"],fromNullable);const fromProperties=getValueByPath(fromObject,["properties"]);null!=fromProperties&&setValueByPath(toObject,["properties"],fromProperties);const fromPropertyOrdering=getValueByPath(fromObject,["propertyOrdering"]);null!=fromPropertyOrdering&&setValueByPath(toObject,["propertyOrdering"],fromPropertyOrdering);const fromRequired=getValueByPath(fromObject,["required"]);null!=fromRequired&&setValueByPath(toObject,["required"],fromRequired);const fromTitle=getValueByPath(fromObject,["title"]);null!=fromTitle&&setValueByPath(toObject,["title"],fromTitle);const fromType=getValueByPath(fromObject,["type"]);return null!=fromType&&setValueByPath(toObject,["type"],fromType),toObject}function googleSearchRetrievalToVertex(apiClient,fromObject){const toObject={},fromDynamicRetrievalConfig=getValueByPath(fromObject,["dynamicRetrievalConfig"]);return null!=fromDynamicRetrievalConfig&&setValueByPath(toObject,["dynamicRetrievalConfig"],function dynamicRetrievalConfigToVertex(apiClient,fromObject){const toObject={},fromMode=getValueByPath(fromObject,["mode"]);null!=fromMode&&setValueByPath(toObject,["mode"],fromMode);const fromDynamicThreshold=getValueByPath(fromObject,["dynamicThreshold"]);return null!=fromDynamicThreshold&&setValueByPath(toObject,["dynamicThreshold"],fromDynamicThreshold),toObject}(0,fromDynamicRetrievalConfig)),toObject}function toolToVertex(apiClient,fromObject){const toObject={},fromFunctionDeclarations=getValueByPath(fromObject,["functionDeclarations"]);null!=fromFunctionDeclarations&&(Array.isArray(fromFunctionDeclarations)?setValueByPath(toObject,["functionDeclarations"],fromFunctionDeclarations.map((item=>function functionDeclarationToVertex(apiClient,fromObject){const toObject={},fromResponse=getValueByPath(fromObject,["response"]);null!=fromResponse&&setValueByPath(toObject,["response"],schemaToVertex(0,fromResponse));const fromDescription=getValueByPath(fromObject,["description"]);null!=fromDescription&&setValueByPath(toObject,["description"],fromDescription);const fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["name"],fromName);const fromParameters=getValueByPath(fromObject,["parameters"]);return null!=fromParameters&&setValueByPath(toObject,["parameters"],fromParameters),toObject}(0,item)))):setValueByPath(toObject,["functionDeclarations"],fromFunctionDeclarations));const fromRetrieval=getValueByPath(fromObject,["retrieval"]);null!=fromRetrieval&&setValueByPath(toObject,["retrieval"],fromRetrieval);null!=getValueByPath(fromObject,["googleSearch"])&&setValueByPath(toObject,["googleSearch"],{});const fromGoogleSearchRetrieval=getValueByPath(fromObject,["googleSearchRetrieval"]);null!=fromGoogleSearchRetrieval&&setValueByPath(toObject,["googleSearchRetrieval"],googleSearchRetrievalToVertex(0,fromGoogleSearchRetrieval));const fromCodeExecution=getValueByPath(fromObject,["codeExecution"]);return null!=fromCodeExecution&&setValueByPath(toObject,["codeExecution"],fromCodeExecution),toObject}function toolConfigToVertex(apiClient,fromObject){const toObject={},fromFunctionCallingConfig=getValueByPath(fromObject,["functionCallingConfig"]);return null!=fromFunctionCallingConfig&&setValueByPath(toObject,["functionCallingConfig"],function functionCallingConfigToVertex(apiClient,fromObject){const toObject={},fromMode=getValueByPath(fromObject,["mode"]);null!=fromMode&&setValueByPath(toObject,["mode"],fromMode);const fromAllowedFunctionNames=getValueByPath(fromObject,["allowedFunctionNames"]);return null!=fromAllowedFunctionNames&&setValueByPath(toObject,["allowedFunctionNames"],fromAllowedFunctionNames),toObject}(0,fromFunctionCallingConfig)),toObject}function voiceConfigToVertex(apiClient,fromObject){const toObject={},fromPrebuiltVoiceConfig=getValueByPath(fromObject,["prebuiltVoiceConfig"]);return null!=fromPrebuiltVoiceConfig&&setValueByPath(toObject,["prebuiltVoiceConfig"],function prebuiltVoiceConfigToVertex(apiClient,fromObject){const toObject={},fromVoiceName=getValueByPath(fromObject,["voiceName"]);return null!=fromVoiceName&&setValueByPath(toObject,["voiceName"],fromVoiceName),toObject}(0,fromPrebuiltVoiceConfig)),toObject}function generateContentConfigToVertex(apiClient,fromObject,parentObject){const toObject={},fromSystemInstruction=getValueByPath(fromObject,["systemInstruction"]);void 0!==parentObject&&null!=fromSystemInstruction&&setValueByPath(parentObject,["systemInstruction"],contentToVertex(0,tContent(0,fromSystemInstruction)));const fromTemperature=getValueByPath(fromObject,["temperature"]);null!=fromTemperature&&setValueByPath(toObject,["temperature"],fromTemperature);const fromTopP=getValueByPath(fromObject,["topP"]);null!=fromTopP&&setValueByPath(toObject,["topP"],fromTopP);const fromTopK=getValueByPath(fromObject,["topK"]);null!=fromTopK&&setValueByPath(toObject,["topK"],fromTopK);const fromCandidateCount=getValueByPath(fromObject,["candidateCount"]);null!=fromCandidateCount&&setValueByPath(toObject,["candidateCount"],fromCandidateCount);const fromMaxOutputTokens=getValueByPath(fromObject,["maxOutputTokens"]);null!=fromMaxOutputTokens&&setValueByPath(toObject,["maxOutputTokens"],fromMaxOutputTokens);const fromStopSequences=getValueByPath(fromObject,["stopSequences"]);null!=fromStopSequences&&setValueByPath(toObject,["stopSequences"],fromStopSequences);const fromResponseLogprobs=getValueByPath(fromObject,["responseLogprobs"]);null!=fromResponseLogprobs&&setValueByPath(toObject,["responseLogprobs"],fromResponseLogprobs);const fromLogprobs=getValueByPath(fromObject,["logprobs"]);null!=fromLogprobs&&setValueByPath(toObject,["logprobs"],fromLogprobs);const fromPresencePenalty=getValueByPath(fromObject,["presencePenalty"]);null!=fromPresencePenalty&&setValueByPath(toObject,["presencePenalty"],fromPresencePenalty);const fromFrequencyPenalty=getValueByPath(fromObject,["frequencyPenalty"]);null!=fromFrequencyPenalty&&setValueByPath(toObject,["frequencyPenalty"],fromFrequencyPenalty);const fromSeed=getValueByPath(fromObject,["seed"]);null!=fromSeed&&setValueByPath(toObject,["seed"],fromSeed);const fromResponseMimeType=getValueByPath(fromObject,["responseMimeType"]);null!=fromResponseMimeType&&setValueByPath(toObject,["responseMimeType"],fromResponseMimeType);const fromResponseSchema=getValueByPath(fromObject,["responseSchema"]);null!=fromResponseSchema&&setValueByPath(toObject,["responseSchema"],schemaToVertex(0,tSchema(apiClient,fromResponseSchema)));const fromRoutingConfig=getValueByPath(fromObject,["routingConfig"]);null!=fromRoutingConfig&&setValueByPath(toObject,["routingConfig"],fromRoutingConfig);const fromModelSelectionConfig=getValueByPath(fromObject,["modelSelectionConfig"]);null!=fromModelSelectionConfig&&setValueByPath(toObject,["modelConfig"],function modelSelectionConfigToVertex(apiClient,fromObject){const toObject={},fromFeatureSelectionPreference=getValueByPath(fromObject,["featureSelectionPreference"]);return null!=fromFeatureSelectionPreference&&setValueByPath(toObject,["featureSelectionPreference"],fromFeatureSelectionPreference),toObject}(0,fromModelSelectionConfig));const fromSafetySettings=getValueByPath(fromObject,["safetySettings"]);void 0!==parentObject&&null!=fromSafetySettings&&(Array.isArray(fromSafetySettings)?setValueByPath(parentObject,["safetySettings"],fromSafetySettings.map((item=>function safetySettingToVertex(apiClient,fromObject){const toObject={},fromMethod=getValueByPath(fromObject,["method"]);null!=fromMethod&&setValueByPath(toObject,["method"],fromMethod);const fromCategory=getValueByPath(fromObject,["category"]);null!=fromCategory&&setValueByPath(toObject,["category"],fromCategory);const fromThreshold=getValueByPath(fromObject,["threshold"]);return null!=fromThreshold&&setValueByPath(toObject,["threshold"],fromThreshold),toObject}(0,item)))):setValueByPath(parentObject,["safetySettings"],fromSafetySettings));const fromTools=getValueByPath(fromObject,["tools"]);void 0!==parentObject&&null!=fromTools&&(Array.isArray(fromTools)?setValueByPath(parentObject,["tools"],tTools(0,tTools(0,fromTools).map((item=>toolToVertex(0,tTool(0,item)))))):setValueByPath(parentObject,["tools"],tTools(0,fromTools)));const fromToolConfig=getValueByPath(fromObject,["toolConfig"]);void 0!==parentObject&&null!=fromToolConfig&&setValueByPath(parentObject,["toolConfig"],toolConfigToVertex(0,fromToolConfig));const fromLabels=getValueByPath(fromObject,["labels"]);void 0!==parentObject&&null!=fromLabels&&setValueByPath(parentObject,["labels"],fromLabels);const fromCachedContent=getValueByPath(fromObject,["cachedContent"]);void 0!==parentObject&&null!=fromCachedContent&&setValueByPath(parentObject,["cachedContent"],tCachedContentName(apiClient,fromCachedContent));const fromResponseModalities=getValueByPath(fromObject,["responseModalities"]);null!=fromResponseModalities&&setValueByPath(toObject,["responseModalities"],fromResponseModalities);const fromMediaResolution=getValueByPath(fromObject,["mediaResolution"]);null!=fromMediaResolution&&setValueByPath(toObject,["mediaResolution"],fromMediaResolution);const fromSpeechConfig=getValueByPath(fromObject,["speechConfig"]);null!=fromSpeechConfig&&setValueByPath(toObject,["speechConfig"],function speechConfigToVertex(apiClient,fromObject){const toObject={},fromVoiceConfig=getValueByPath(fromObject,["voiceConfig"]);null!=fromVoiceConfig&&setValueByPath(toObject,["voiceConfig"],voiceConfigToVertex(0,fromVoiceConfig));const fromLanguageCode=getValueByPath(fromObject,["languageCode"]);return null!=fromLanguageCode&&setValueByPath(toObject,["languageCode"],fromLanguageCode),toObject}(0,tSpeechConfig(0,fromSpeechConfig)));const fromAudioTimestamp=getValueByPath(fromObject,["audioTimestamp"]);null!=fromAudioTimestamp&&setValueByPath(toObject,["audioTimestamp"],fromAudioTimestamp);const fromThinkingConfig=getValueByPath(fromObject,["thinkingConfig"]);return null!=fromThinkingConfig&&setValueByPath(toObject,["thinkingConfig"],function thinkingConfigToVertex(apiClient,fromObject){const toObject={},fromIncludeThoughts=getValueByPath(fromObject,["includeThoughts"]);null!=fromIncludeThoughts&&setValueByPath(toObject,["includeThoughts"],fromIncludeThoughts);const fromThinkingBudget=getValueByPath(fromObject,["thinkingBudget"]);return null!=fromThinkingBudget&&setValueByPath(toObject,["thinkingBudget"],fromThinkingBudget),toObject}(0,fromThinkingConfig)),toObject}function generateContentParametersToVertex(apiClient,fromObject){const toObject={},fromModel=getValueByPath(fromObject,["model"]);null!=fromModel&&setValueByPath(toObject,["_url","model"],tModel(apiClient,fromModel));const fromContents=getValueByPath(fromObject,["contents"]);null!=fromContents&&(Array.isArray(fromContents)?setValueByPath(toObject,["contents"],tContents(0,tContents(0,fromContents).map((item=>contentToVertex(0,item))))):setValueByPath(toObject,["contents"],tContents(0,fromContents)));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["generationConfig"],generateContentConfigToVertex(apiClient,fromConfig,toObject)),toObject}function embedContentParametersToVertex(apiClient,fromObject){const toObject={},fromModel=getValueByPath(fromObject,["model"]);null!=fromModel&&setValueByPath(toObject,["_url","model"],tModel(apiClient,fromModel));const fromContents=getValueByPath(fromObject,["contents"]);null!=fromContents&&setValueByPath(toObject,["instances[]","content"],tContentsForEmbed(apiClient,fromContents));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],function embedContentConfigToVertex(apiClient,fromObject,parentObject){const fromTaskType=getValueByPath(fromObject,["taskType"]);void 0!==parentObject&&null!=fromTaskType&&setValueByPath(parentObject,["instances[]","task_type"],fromTaskType);const fromTitle=getValueByPath(fromObject,["title"]);void 0!==parentObject&&null!=fromTitle&&setValueByPath(parentObject,["instances[]","title"],fromTitle);const fromOutputDimensionality=getValueByPath(fromObject,["outputDimensionality"]);void 0!==parentObject&&null!=fromOutputDimensionality&&setValueByPath(parentObject,["parameters","outputDimensionality"],fromOutputDimensionality);const fromMimeType=getValueByPath(fromObject,["mimeType"]);void 0!==parentObject&&null!=fromMimeType&&setValueByPath(parentObject,["instances[]","mimeType"],fromMimeType);const fromAutoTruncate=getValueByPath(fromObject,["autoTruncate"]);return void 0!==parentObject&&null!=fromAutoTruncate&&setValueByPath(parentObject,["parameters","autoTruncate"],fromAutoTruncate),{}}(0,fromConfig,toObject)),toObject}function generateImagesParametersToVertex(apiClient,fromObject){const toObject={},fromModel=getValueByPath(fromObject,["model"]);null!=fromModel&&setValueByPath(toObject,["_url","model"],tModel(apiClient,fromModel));const fromPrompt=getValueByPath(fromObject,["prompt"]);null!=fromPrompt&&setValueByPath(toObject,["instances[0]","prompt"],fromPrompt);const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],function generateImagesConfigToVertex(apiClient,fromObject,parentObject){const fromOutputGcsUri=getValueByPath(fromObject,["outputGcsUri"]);void 0!==parentObject&&null!=fromOutputGcsUri&&setValueByPath(parentObject,["parameters","storageUri"],fromOutputGcsUri);const fromNegativePrompt=getValueByPath(fromObject,["negativePrompt"]);void 0!==parentObject&&null!=fromNegativePrompt&&setValueByPath(parentObject,["parameters","negativePrompt"],fromNegativePrompt);const fromNumberOfImages=getValueByPath(fromObject,["numberOfImages"]);void 0!==parentObject&&null!=fromNumberOfImages&&setValueByPath(parentObject,["parameters","sampleCount"],fromNumberOfImages);const fromAspectRatio=getValueByPath(fromObject,["aspectRatio"]);void 0!==parentObject&&null!=fromAspectRatio&&setValueByPath(parentObject,["parameters","aspectRatio"],fromAspectRatio);const fromGuidanceScale=getValueByPath(fromObject,["guidanceScale"]);void 0!==parentObject&&null!=fromGuidanceScale&&setValueByPath(parentObject,["parameters","guidanceScale"],fromGuidanceScale);const fromSeed=getValueByPath(fromObject,["seed"]);void 0!==parentObject&&null!=fromSeed&&setValueByPath(parentObject,["parameters","seed"],fromSeed);const fromSafetyFilterLevel=getValueByPath(fromObject,["safetyFilterLevel"]);void 0!==parentObject&&null!=fromSafetyFilterLevel&&setValueByPath(parentObject,["parameters","safetySetting"],fromSafetyFilterLevel);const fromPersonGeneration=getValueByPath(fromObject,["personGeneration"]);void 0!==parentObject&&null!=fromPersonGeneration&&setValueByPath(parentObject,["parameters","personGeneration"],fromPersonGeneration);const fromIncludeSafetyAttributes=getValueByPath(fromObject,["includeSafetyAttributes"]);void 0!==parentObject&&null!=fromIncludeSafetyAttributes&&setValueByPath(parentObject,["parameters","includeSafetyAttributes"],fromIncludeSafetyAttributes);const fromIncludeRaiReason=getValueByPath(fromObject,["includeRaiReason"]);void 0!==parentObject&&null!=fromIncludeRaiReason&&setValueByPath(parentObject,["parameters","includeRaiReason"],fromIncludeRaiReason);const fromLanguage=getValueByPath(fromObject,["language"]);void 0!==parentObject&&null!=fromLanguage&&setValueByPath(parentObject,["parameters","language"],fromLanguage);const fromOutputMimeType=getValueByPath(fromObject,["outputMimeType"]);void 0!==parentObject&&null!=fromOutputMimeType&&setValueByPath(parentObject,["parameters","outputOptions","mimeType"],fromOutputMimeType);const fromOutputCompressionQuality=getValueByPath(fromObject,["outputCompressionQuality"]);void 0!==parentObject&&null!=fromOutputCompressionQuality&&setValueByPath(parentObject,["parameters","outputOptions","compressionQuality"],fromOutputCompressionQuality);const fromAddWatermark=getValueByPath(fromObject,["addWatermark"]);void 0!==parentObject&&null!=fromAddWatermark&&setValueByPath(parentObject,["parameters","addWatermark"],fromAddWatermark);const fromEnhancePrompt=getValueByPath(fromObject,["enhancePrompt"]);return void 0!==parentObject&&null!=fromEnhancePrompt&&setValueByPath(parentObject,["parameters","enhancePrompt"],fromEnhancePrompt),{}}(0,fromConfig,toObject)),toObject}function countTokensParametersToVertex(apiClient,fromObject){const toObject={},fromModel=getValueByPath(fromObject,["model"]);null!=fromModel&&setValueByPath(toObject,["_url","model"],tModel(apiClient,fromModel));const fromContents=getValueByPath(fromObject,["contents"]);null!=fromContents&&(Array.isArray(fromContents)?setValueByPath(toObject,["contents"],tContents(0,tContents(0,fromContents).map((item=>contentToVertex(0,item))))):setValueByPath(toObject,["contents"],tContents(0,fromContents)));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],function countTokensConfigToVertex(apiClient,fromObject,parentObject){const fromSystemInstruction=getValueByPath(fromObject,["systemInstruction"]);void 0!==parentObject&&null!=fromSystemInstruction&&setValueByPath(parentObject,["systemInstruction"],contentToVertex(0,tContent(0,fromSystemInstruction)));const fromTools=getValueByPath(fromObject,["tools"]);void 0!==parentObject&&null!=fromTools&&(Array.isArray(fromTools)?setValueByPath(parentObject,["tools"],fromTools.map((item=>toolToVertex(0,item)))):setValueByPath(parentObject,["tools"],fromTools));const fromGenerationConfig=getValueByPath(fromObject,["generationConfig"]);return void 0!==parentObject&&null!=fromGenerationConfig&&setValueByPath(parentObject,["generationConfig"],fromGenerationConfig),{}}(0,fromConfig,toObject)),toObject}function generateVideosParametersToVertex(apiClient,fromObject){const toObject={},fromModel=getValueByPath(fromObject,["model"]);null!=fromModel&&setValueByPath(toObject,["_url","model"],tModel(apiClient,fromModel));const fromPrompt=getValueByPath(fromObject,["prompt"]);null!=fromPrompt&&setValueByPath(toObject,["instances[0]","prompt"],fromPrompt);const fromImage=getValueByPath(fromObject,["image"]);null!=fromImage&&setValueByPath(toObject,["instances[0]","image"],function imageToVertex(apiClient,fromObject){const toObject={},fromGcsUri=getValueByPath(fromObject,["gcsUri"]);null!=fromGcsUri&&setValueByPath(toObject,["gcsUri"],fromGcsUri);const fromImageBytes=getValueByPath(fromObject,["imageBytes"]);null!=fromImageBytes&&setValueByPath(toObject,["bytesBase64Encoded"],tBytes(0,fromImageBytes));const fromMimeType=getValueByPath(fromObject,["mimeType"]);return null!=fromMimeType&&setValueByPath(toObject,["mimeType"],fromMimeType),toObject}(0,fromImage));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],function generateVideosConfigToVertex(apiClient,fromObject,parentObject){const fromNumberOfVideos=getValueByPath(fromObject,["numberOfVideos"]);void 0!==parentObject&&null!=fromNumberOfVideos&&setValueByPath(parentObject,["parameters","sampleCount"],fromNumberOfVideos);const fromOutputGcsUri=getValueByPath(fromObject,["outputGcsUri"]);void 0!==parentObject&&null!=fromOutputGcsUri&&setValueByPath(parentObject,["parameters","storageUri"],fromOutputGcsUri);const fromFps=getValueByPath(fromObject,["fps"]);void 0!==parentObject&&null!=fromFps&&setValueByPath(parentObject,["parameters","fps"],fromFps);const fromDurationSeconds=getValueByPath(fromObject,["durationSeconds"]);void 0!==parentObject&&null!=fromDurationSeconds&&setValueByPath(parentObject,["parameters","durationSeconds"],fromDurationSeconds);const fromSeed=getValueByPath(fromObject,["seed"]);void 0!==parentObject&&null!=fromSeed&&setValueByPath(parentObject,["parameters","seed"],fromSeed);const fromAspectRatio=getValueByPath(fromObject,["aspectRatio"]);void 0!==parentObject&&null!=fromAspectRatio&&setValueByPath(parentObject,["parameters","aspectRatio"],fromAspectRatio);const fromResolution=getValueByPath(fromObject,["resolution"]);void 0!==parentObject&&null!=fromResolution&&setValueByPath(parentObject,["parameters","resolution"],fromResolution);const fromPersonGeneration=getValueByPath(fromObject,["personGeneration"]);void 0!==parentObject&&null!=fromPersonGeneration&&setValueByPath(parentObject,["parameters","personGeneration"],fromPersonGeneration);const fromPubsubTopic=getValueByPath(fromObject,["pubsubTopic"]);void 0!==parentObject&&null!=fromPubsubTopic&&setValueByPath(parentObject,["parameters","pubsubTopic"],fromPubsubTopic);const fromNegativePrompt=getValueByPath(fromObject,["negativePrompt"]);void 0!==parentObject&&null!=fromNegativePrompt&&setValueByPath(parentObject,["parameters","negativePrompt"],fromNegativePrompt);const fromEnhancePrompt=getValueByPath(fromObject,["enhancePrompt"]);return void 0!==parentObject&&null!=fromEnhancePrompt&&setValueByPath(parentObject,["parameters","enhancePrompt"],fromEnhancePrompt),{}}(0,fromConfig,toObject)),toObject}function contentFromMldev(apiClient,fromObject){const toObject={},fromParts=getValueByPath(fromObject,["parts"]);null!=fromParts&&(Array.isArray(fromParts)?setValueByPath(toObject,["parts"],fromParts.map((item=>function partFromMldev(apiClient,fromObject){const toObject={},fromThought=getValueByPath(fromObject,["thought"]);null!=fromThought&&setValueByPath(toObject,["thought"],fromThought);const fromCodeExecutionResult=getValueByPath(fromObject,["codeExecutionResult"]);null!=fromCodeExecutionResult&&setValueByPath(toObject,["codeExecutionResult"],fromCodeExecutionResult);const fromExecutableCode=getValueByPath(fromObject,["executableCode"]);null!=fromExecutableCode&&setValueByPath(toObject,["executableCode"],fromExecutableCode);const fromFileData=getValueByPath(fromObject,["fileData"]);null!=fromFileData&&setValueByPath(toObject,["fileData"],fromFileData);const fromFunctionCall=getValueByPath(fromObject,["functionCall"]);null!=fromFunctionCall&&setValueByPath(toObject,["functionCall"],fromFunctionCall);const fromFunctionResponse=getValueByPath(fromObject,["functionResponse"]);null!=fromFunctionResponse&&setValueByPath(toObject,["functionResponse"],fromFunctionResponse);const fromInlineData=getValueByPath(fromObject,["inlineData"]);null!=fromInlineData&&setValueByPath(toObject,["inlineData"],fromInlineData);const fromText=getValueByPath(fromObject,["text"]);return null!=fromText&&setValueByPath(toObject,["text"],fromText),toObject}(0,item)))):setValueByPath(toObject,["parts"],fromParts));const fromRole=getValueByPath(fromObject,["role"]);return null!=fromRole&&setValueByPath(toObject,["role"],fromRole),toObject}function candidateFromMldev(apiClient,fromObject){const toObject={},fromContent=getValueByPath(fromObject,["content"]);null!=fromContent&&setValueByPath(toObject,["content"],contentFromMldev(0,fromContent));const fromCitationMetadata=getValueByPath(fromObject,["citationMetadata"]);null!=fromCitationMetadata&&setValueByPath(toObject,["citationMetadata"],function citationMetadataFromMldev(apiClient,fromObject){const toObject={},fromCitations=getValueByPath(fromObject,["citationSources"]);return null!=fromCitations&&setValueByPath(toObject,["citations"],fromCitations),toObject}(0,fromCitationMetadata));const fromTokenCount=getValueByPath(fromObject,["tokenCount"]);null!=fromTokenCount&&setValueByPath(toObject,["tokenCount"],fromTokenCount);const fromFinishReason=getValueByPath(fromObject,["finishReason"]);null!=fromFinishReason&&setValueByPath(toObject,["finishReason"],fromFinishReason);const fromAvgLogprobs=getValueByPath(fromObject,["avgLogprobs"]);null!=fromAvgLogprobs&&setValueByPath(toObject,["avgLogprobs"],fromAvgLogprobs);const fromGroundingMetadata=getValueByPath(fromObject,["groundingMetadata"]);null!=fromGroundingMetadata&&setValueByPath(toObject,["groundingMetadata"],fromGroundingMetadata);const fromIndex=getValueByPath(fromObject,["index"]);null!=fromIndex&&setValueByPath(toObject,["index"],fromIndex);const fromLogprobsResult=getValueByPath(fromObject,["logprobsResult"]);null!=fromLogprobsResult&&setValueByPath(toObject,["logprobsResult"],fromLogprobsResult);const fromSafetyRatings=getValueByPath(fromObject,["safetyRatings"]);return null!=fromSafetyRatings&&setValueByPath(toObject,["safetyRatings"],fromSafetyRatings),toObject}function generateContentResponseFromMldev(apiClient,fromObject){const toObject={},fromCandidates=getValueByPath(fromObject,["candidates"]);null!=fromCandidates&&(Array.isArray(fromCandidates)?setValueByPath(toObject,["candidates"],fromCandidates.map((item=>candidateFromMldev(0,item)))):setValueByPath(toObject,["candidates"],fromCandidates));const fromModelVersion=getValueByPath(fromObject,["modelVersion"]);null!=fromModelVersion&&setValueByPath(toObject,["modelVersion"],fromModelVersion);const fromPromptFeedback=getValueByPath(fromObject,["promptFeedback"]);null!=fromPromptFeedback&&setValueByPath(toObject,["promptFeedback"],fromPromptFeedback);const fromUsageMetadata=getValueByPath(fromObject,["usageMetadata"]);return null!=fromUsageMetadata&&setValueByPath(toObject,["usageMetadata"],fromUsageMetadata),toObject}function embedContentResponseFromMldev(apiClient,fromObject){const toObject={},fromEmbeddings=getValueByPath(fromObject,["embeddings"]);null!=fromEmbeddings&&(Array.isArray(fromEmbeddings)?setValueByPath(toObject,["embeddings"],fromEmbeddings.map((item=>function contentEmbeddingFromMldev(apiClient,fromObject){const toObject={},fromValues=getValueByPath(fromObject,["values"]);return null!=fromValues&&setValueByPath(toObject,["values"],fromValues),toObject}(0,item)))):setValueByPath(toObject,["embeddings"],fromEmbeddings));return null!=getValueByPath(fromObject,["metadata"])&&setValueByPath(toObject,["metadata"],{}),toObject}function safetyAttributesFromMldev(apiClient,fromObject){const toObject={},fromCategories=getValueByPath(fromObject,["safetyAttributes","categories"]);null!=fromCategories&&setValueByPath(toObject,["categories"],fromCategories);const fromScores=getValueByPath(fromObject,["safetyAttributes","scores"]);null!=fromScores&&setValueByPath(toObject,["scores"],fromScores);const fromContentType=getValueByPath(fromObject,["contentType"]);return null!=fromContentType&&setValueByPath(toObject,["contentType"],fromContentType),toObject}function generatedImageFromMldev(apiClient,fromObject){const toObject={},fromImage=getValueByPath(fromObject,["_self"]);null!=fromImage&&setValueByPath(toObject,["image"],function imageFromMldev(apiClient,fromObject){const toObject={},fromImageBytes=getValueByPath(fromObject,["bytesBase64Encoded"]);null!=fromImageBytes&&setValueByPath(toObject,["imageBytes"],tBytes(0,fromImageBytes));const fromMimeType=getValueByPath(fromObject,["mimeType"]);return null!=fromMimeType&&setValueByPath(toObject,["mimeType"],fromMimeType),toObject}(0,fromImage));const fromRaiFilteredReason=getValueByPath(fromObject,["raiFilteredReason"]);null!=fromRaiFilteredReason&&setValueByPath(toObject,["raiFilteredReason"],fromRaiFilteredReason);const fromSafetyAttributes=getValueByPath(fromObject,["_self"]);return null!=fromSafetyAttributes&&setValueByPath(toObject,["safetyAttributes"],safetyAttributesFromMldev(0,fromSafetyAttributes)),toObject}function modelFromMldev(apiClient,fromObject){const toObject={},fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["name"],fromName);const fromDisplayName=getValueByPath(fromObject,["displayName"]);null!=fromDisplayName&&setValueByPath(toObject,["displayName"],fromDisplayName);const fromDescription=getValueByPath(fromObject,["description"]);null!=fromDescription&&setValueByPath(toObject,["description"],fromDescription);const fromVersion=getValueByPath(fromObject,["version"]);null!=fromVersion&&setValueByPath(toObject,["version"],fromVersion);const fromTunedModelInfo=getValueByPath(fromObject,["_self"]);null!=fromTunedModelInfo&&setValueByPath(toObject,["tunedModelInfo"],function tunedModelInfoFromMldev(apiClient,fromObject){const toObject={},fromBaseModel=getValueByPath(fromObject,["baseModel"]);null!=fromBaseModel&&setValueByPath(toObject,["baseModel"],fromBaseModel);const fromCreateTime=getValueByPath(fromObject,["createTime"]);null!=fromCreateTime&&setValueByPath(toObject,["createTime"],fromCreateTime);const fromUpdateTime=getValueByPath(fromObject,["updateTime"]);return null!=fromUpdateTime&&setValueByPath(toObject,["updateTime"],fromUpdateTime),toObject}(0,fromTunedModelInfo));const fromInputTokenLimit=getValueByPath(fromObject,["inputTokenLimit"]);null!=fromInputTokenLimit&&setValueByPath(toObject,["inputTokenLimit"],fromInputTokenLimit);const fromOutputTokenLimit=getValueByPath(fromObject,["outputTokenLimit"]);null!=fromOutputTokenLimit&&setValueByPath(toObject,["outputTokenLimit"],fromOutputTokenLimit);const fromSupportedActions=getValueByPath(fromObject,["supportedGenerationMethods"]);return null!=fromSupportedActions&&setValueByPath(toObject,["supportedActions"],fromSupportedActions),toObject}function generatedVideoFromMldev$1(apiClient,fromObject){const toObject={},fromVideo=getValueByPath(fromObject,["_self"]);return null!=fromVideo&&setValueByPath(toObject,["video"],function videoFromMldev$1(apiClient,fromObject){const toObject={},fromUri=getValueByPath(fromObject,["video","uri"]);null!=fromUri&&setValueByPath(toObject,["uri"],fromUri);const fromVideoBytes=getValueByPath(fromObject,["video","encodedVideo"]);null!=fromVideoBytes&&setValueByPath(toObject,["videoBytes"],tBytes(0,fromVideoBytes));const fromMimeType=getValueByPath(fromObject,["encoding"]);return null!=fromMimeType&&setValueByPath(toObject,["mimeType"],fromMimeType),toObject}(0,fromVideo)),toObject}function generateVideosOperationFromMldev$1(apiClient,fromObject){const toObject={},fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["name"],fromName);const fromMetadata=getValueByPath(fromObject,["metadata"]);null!=fromMetadata&&setValueByPath(toObject,["metadata"],fromMetadata);const fromDone=getValueByPath(fromObject,["done"]);null!=fromDone&&setValueByPath(toObject,["done"],fromDone);const fromError=getValueByPath(fromObject,["error"]);null!=fromError&&setValueByPath(toObject,["error"],fromError);const fromResponse=getValueByPath(fromObject,["response","generateVideoResponse"]);return null!=fromResponse&&setValueByPath(toObject,["response"],function generateVideosResponseFromMldev$1(apiClient,fromObject){const toObject={},fromGeneratedVideos=getValueByPath(fromObject,["generatedSamples"]);null!=fromGeneratedVideos&&(Array.isArray(fromGeneratedVideos)?setValueByPath(toObject,["generatedVideos"],fromGeneratedVideos.map((item=>generatedVideoFromMldev$1(0,item)))):setValueByPath(toObject,["generatedVideos"],fromGeneratedVideos));const fromRaiMediaFilteredCount=getValueByPath(fromObject,["raiMediaFilteredCount"]);null!=fromRaiMediaFilteredCount&&setValueByPath(toObject,["raiMediaFilteredCount"],fromRaiMediaFilteredCount);const fromRaiMediaFilteredReasons=getValueByPath(fromObject,["raiMediaFilteredReasons"]);return null!=fromRaiMediaFilteredReasons&&setValueByPath(toObject,["raiMediaFilteredReasons"],fromRaiMediaFilteredReasons),toObject}(0,fromResponse)),toObject}function contentFromVertex(apiClient,fromObject){const toObject={},fromParts=getValueByPath(fromObject,["parts"]);null!=fromParts&&(Array.isArray(fromParts)?setValueByPath(toObject,["parts"],fromParts.map((item=>function partFromVertex(apiClient,fromObject){const toObject={},fromVideoMetadata=getValueByPath(fromObject,["videoMetadata"]);null!=fromVideoMetadata&&setValueByPath(toObject,["videoMetadata"],fromVideoMetadata);const fromThought=getValueByPath(fromObject,["thought"]);null!=fromThought&&setValueByPath(toObject,["thought"],fromThought);const fromCodeExecutionResult=getValueByPath(fromObject,["codeExecutionResult"]);null!=fromCodeExecutionResult&&setValueByPath(toObject,["codeExecutionResult"],fromCodeExecutionResult);const fromExecutableCode=getValueByPath(fromObject,["executableCode"]);null!=fromExecutableCode&&setValueByPath(toObject,["executableCode"],fromExecutableCode);const fromFileData=getValueByPath(fromObject,["fileData"]);null!=fromFileData&&setValueByPath(toObject,["fileData"],fromFileData);const fromFunctionCall=getValueByPath(fromObject,["functionCall"]);null!=fromFunctionCall&&setValueByPath(toObject,["functionCall"],fromFunctionCall);const fromFunctionResponse=getValueByPath(fromObject,["functionResponse"]);null!=fromFunctionResponse&&setValueByPath(toObject,["functionResponse"],fromFunctionResponse);const fromInlineData=getValueByPath(fromObject,["inlineData"]);null!=fromInlineData&&setValueByPath(toObject,["inlineData"],fromInlineData);const fromText=getValueByPath(fromObject,["text"]);return null!=fromText&&setValueByPath(toObject,["text"],fromText),toObject}(0,item)))):setValueByPath(toObject,["parts"],fromParts));const fromRole=getValueByPath(fromObject,["role"]);return null!=fromRole&&setValueByPath(toObject,["role"],fromRole),toObject}function candidateFromVertex(apiClient,fromObject){const toObject={},fromContent=getValueByPath(fromObject,["content"]);null!=fromContent&&setValueByPath(toObject,["content"],contentFromVertex(0,fromContent));const fromCitationMetadata=getValueByPath(fromObject,["citationMetadata"]);null!=fromCitationMetadata&&setValueByPath(toObject,["citationMetadata"],function citationMetadataFromVertex(apiClient,fromObject){const toObject={},fromCitations=getValueByPath(fromObject,["citations"]);return null!=fromCitations&&setValueByPath(toObject,["citations"],fromCitations),toObject}(0,fromCitationMetadata));const fromFinishMessage=getValueByPath(fromObject,["finishMessage"]);null!=fromFinishMessage&&setValueByPath(toObject,["finishMessage"],fromFinishMessage);const fromFinishReason=getValueByPath(fromObject,["finishReason"]);null!=fromFinishReason&&setValueByPath(toObject,["finishReason"],fromFinishReason);const fromAvgLogprobs=getValueByPath(fromObject,["avgLogprobs"]);null!=fromAvgLogprobs&&setValueByPath(toObject,["avgLogprobs"],fromAvgLogprobs);const fromGroundingMetadata=getValueByPath(fromObject,["groundingMetadata"]);null!=fromGroundingMetadata&&setValueByPath(toObject,["groundingMetadata"],fromGroundingMetadata);const fromIndex=getValueByPath(fromObject,["index"]);null!=fromIndex&&setValueByPath(toObject,["index"],fromIndex);const fromLogprobsResult=getValueByPath(fromObject,["logprobsResult"]);null!=fromLogprobsResult&&setValueByPath(toObject,["logprobsResult"],fromLogprobsResult);const fromSafetyRatings=getValueByPath(fromObject,["safetyRatings"]);return null!=fromSafetyRatings&&setValueByPath(toObject,["safetyRatings"],fromSafetyRatings),toObject}function generateContentResponseFromVertex(apiClient,fromObject){const toObject={},fromCandidates=getValueByPath(fromObject,["candidates"]);null!=fromCandidates&&(Array.isArray(fromCandidates)?setValueByPath(toObject,["candidates"],fromCandidates.map((item=>candidateFromVertex(0,item)))):setValueByPath(toObject,["candidates"],fromCandidates));const fromCreateTime=getValueByPath(fromObject,["createTime"]);null!=fromCreateTime&&setValueByPath(toObject,["createTime"],fromCreateTime);const fromResponseId=getValueByPath(fromObject,["responseId"]);null!=fromResponseId&&setValueByPath(toObject,["responseId"],fromResponseId);const fromModelVersion=getValueByPath(fromObject,["modelVersion"]);null!=fromModelVersion&&setValueByPath(toObject,["modelVersion"],fromModelVersion);const fromPromptFeedback=getValueByPath(fromObject,["promptFeedback"]);null!=fromPromptFeedback&&setValueByPath(toObject,["promptFeedback"],fromPromptFeedback);const fromUsageMetadata=getValueByPath(fromObject,["usageMetadata"]);return null!=fromUsageMetadata&&setValueByPath(toObject,["usageMetadata"],fromUsageMetadata),toObject}function contentEmbeddingFromVertex(apiClient,fromObject){const toObject={},fromValues=getValueByPath(fromObject,["values"]);null!=fromValues&&setValueByPath(toObject,["values"],fromValues);const fromStatistics=getValueByPath(fromObject,["statistics"]);return null!=fromStatistics&&setValueByPath(toObject,["statistics"],function contentEmbeddingStatisticsFromVertex(apiClient,fromObject){const toObject={},fromTruncated=getValueByPath(fromObject,["truncated"]);null!=fromTruncated&&setValueByPath(toObject,["truncated"],fromTruncated);const fromTokenCount=getValueByPath(fromObject,["token_count"]);return null!=fromTokenCount&&setValueByPath(toObject,["tokenCount"],fromTokenCount),toObject}(0,fromStatistics)),toObject}function embedContentResponseFromVertex(apiClient,fromObject){const toObject={},fromEmbeddings=getValueByPath(fromObject,["predictions[]","embeddings"]);null!=fromEmbeddings&&(Array.isArray(fromEmbeddings)?setValueByPath(toObject,["embeddings"],fromEmbeddings.map((item=>contentEmbeddingFromVertex(0,item)))):setValueByPath(toObject,["embeddings"],fromEmbeddings));const fromMetadata=getValueByPath(fromObject,["metadata"]);return null!=fromMetadata&&setValueByPath(toObject,["metadata"],function embedContentMetadataFromVertex(apiClient,fromObject){const toObject={},fromBillableCharacterCount=getValueByPath(fromObject,["billableCharacterCount"]);return null!=fromBillableCharacterCount&&setValueByPath(toObject,["billableCharacterCount"],fromBillableCharacterCount),toObject}(0,fromMetadata)),toObject}function safetyAttributesFromVertex(apiClient,fromObject){const toObject={},fromCategories=getValueByPath(fromObject,["safetyAttributes","categories"]);null!=fromCategories&&setValueByPath(toObject,["categories"],fromCategories);const fromScores=getValueByPath(fromObject,["safetyAttributes","scores"]);null!=fromScores&&setValueByPath(toObject,["scores"],fromScores);const fromContentType=getValueByPath(fromObject,["contentType"]);return null!=fromContentType&&setValueByPath(toObject,["contentType"],fromContentType),toObject}function generatedImageFromVertex(apiClient,fromObject){const toObject={},fromImage=getValueByPath(fromObject,["_self"]);null!=fromImage&&setValueByPath(toObject,["image"],function imageFromVertex(apiClient,fromObject){const toObject={},fromGcsUri=getValueByPath(fromObject,["gcsUri"]);null!=fromGcsUri&&setValueByPath(toObject,["gcsUri"],fromGcsUri);const fromImageBytes=getValueByPath(fromObject,["bytesBase64Encoded"]);null!=fromImageBytes&&setValueByPath(toObject,["imageBytes"],tBytes(0,fromImageBytes));const fromMimeType=getValueByPath(fromObject,["mimeType"]);return null!=fromMimeType&&setValueByPath(toObject,["mimeType"],fromMimeType),toObject}(0,fromImage));const fromRaiFilteredReason=getValueByPath(fromObject,["raiFilteredReason"]);null!=fromRaiFilteredReason&&setValueByPath(toObject,["raiFilteredReason"],fromRaiFilteredReason);const fromSafetyAttributes=getValueByPath(fromObject,["_self"]);null!=fromSafetyAttributes&&setValueByPath(toObject,["safetyAttributes"],safetyAttributesFromVertex(0,fromSafetyAttributes));const fromEnhancedPrompt=getValueByPath(fromObject,["prompt"]);return null!=fromEnhancedPrompt&&setValueByPath(toObject,["enhancedPrompt"],fromEnhancedPrompt),toObject}function modelFromVertex(apiClient,fromObject){const toObject={},fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["name"],fromName);const fromDisplayName=getValueByPath(fromObject,["displayName"]);null!=fromDisplayName&&setValueByPath(toObject,["displayName"],fromDisplayName);const fromDescription=getValueByPath(fromObject,["description"]);null!=fromDescription&&setValueByPath(toObject,["description"],fromDescription);const fromVersion=getValueByPath(fromObject,["versionId"]);null!=fromVersion&&setValueByPath(toObject,["version"],fromVersion);const fromEndpoints=getValueByPath(fromObject,["deployedModels"]);null!=fromEndpoints&&(Array.isArray(fromEndpoints)?setValueByPath(toObject,["endpoints"],fromEndpoints.map((item=>function endpointFromVertex(apiClient,fromObject){const toObject={},fromName=getValueByPath(fromObject,["endpoint"]);null!=fromName&&setValueByPath(toObject,["name"],fromName);const fromDeployedModelId=getValueByPath(fromObject,["deployedModelId"]);return null!=fromDeployedModelId&&setValueByPath(toObject,["deployedModelId"],fromDeployedModelId),toObject}(0,item)))):setValueByPath(toObject,["endpoints"],fromEndpoints));const fromLabels=getValueByPath(fromObject,["labels"]);null!=fromLabels&&setValueByPath(toObject,["labels"],fromLabels);const fromTunedModelInfo=getValueByPath(fromObject,["_self"]);return null!=fromTunedModelInfo&&setValueByPath(toObject,["tunedModelInfo"],function tunedModelInfoFromVertex(apiClient,fromObject){const toObject={},fromBaseModel=getValueByPath(fromObject,["labels","google-vertex-llm-tuning-base-model-id"]);null!=fromBaseModel&&setValueByPath(toObject,["baseModel"],fromBaseModel);const fromCreateTime=getValueByPath(fromObject,["createTime"]);null!=fromCreateTime&&setValueByPath(toObject,["createTime"],fromCreateTime);const fromUpdateTime=getValueByPath(fromObject,["updateTime"]);return null!=fromUpdateTime&&setValueByPath(toObject,["updateTime"],fromUpdateTime),toObject}(0,fromTunedModelInfo)),toObject}function generatedVideoFromVertex$1(apiClient,fromObject){const toObject={},fromVideo=getValueByPath(fromObject,["_self"]);return null!=fromVideo&&setValueByPath(toObject,["video"],function videoFromVertex$1(apiClient,fromObject){const toObject={},fromUri=getValueByPath(fromObject,["gcsUri"]);null!=fromUri&&setValueByPath(toObject,["uri"],fromUri);const fromVideoBytes=getValueByPath(fromObject,["bytesBase64Encoded"]);null!=fromVideoBytes&&setValueByPath(toObject,["videoBytes"],tBytes(0,fromVideoBytes));const fromMimeType=getValueByPath(fromObject,["mimeType"]);return null!=fromMimeType&&setValueByPath(toObject,["mimeType"],fromMimeType),toObject}(0,fromVideo)),toObject}function generateVideosOperationFromVertex$1(apiClient,fromObject){const toObject={},fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["name"],fromName);const fromMetadata=getValueByPath(fromObject,["metadata"]);null!=fromMetadata&&setValueByPath(toObject,["metadata"],fromMetadata);const fromDone=getValueByPath(fromObject,["done"]);null!=fromDone&&setValueByPath(toObject,["done"],fromDone);const fromError=getValueByPath(fromObject,["error"]);null!=fromError&&setValueByPath(toObject,["error"],fromError);const fromResponse=getValueByPath(fromObject,["response"]);return null!=fromResponse&&setValueByPath(toObject,["response"],function generateVideosResponseFromVertex$1(apiClient,fromObject){const toObject={},fromGeneratedVideos=getValueByPath(fromObject,["videos"]);null!=fromGeneratedVideos&&(Array.isArray(fromGeneratedVideos)?setValueByPath(toObject,["generatedVideos"],fromGeneratedVideos.map((item=>generatedVideoFromVertex$1(0,item)))):setValueByPath(toObject,["generatedVideos"],fromGeneratedVideos));const fromRaiMediaFilteredCount=getValueByPath(fromObject,["raiMediaFilteredCount"]);null!=fromRaiMediaFilteredCount&&setValueByPath(toObject,["raiMediaFilteredCount"],fromRaiMediaFilteredCount);const fromRaiMediaFilteredReasons=getValueByPath(fromObject,["raiMediaFilteredReasons"]);return null!=fromRaiMediaFilteredReasons&&setValueByPath(toObject,["raiMediaFilteredReasons"],fromRaiMediaFilteredReasons),toObject}(0,fromResponse)),toObject}class Live{constructor(apiClient,auth,webSocketFactory){this.apiClient=apiClient,this.auth=auth,this.webSocketFactory=webSocketFactory}async connect(params){var _a,_b,_c,_d;const websocketBaseUrl=this.apiClient.getWebsocketBaseUrl(),apiVersion=this.apiClient.getApiVersion();let url;const headers=function mapToHeaders(map){const headers=new Headers;for(const[key,value]of Object.entries(map))headers.append(key,value);return headers}(this.apiClient.getDefaultHeaders());if(this.apiClient.isVertexAI())url=`${websocketBaseUrl}/ws/google.cloud.aiplatform.${apiVersion}.LlmBidiService/BidiGenerateContent`,await this.auth.addAuthHeaders(headers);else{url=`${websocketBaseUrl}/ws/google.ai.generativelanguage.${apiVersion}.GenerativeService.BidiGenerateContent?key=${this.apiClient.getApiKey()}`}let onopenResolve=()=>{};const onopenPromise=new Promise((resolve=>{onopenResolve=resolve})),callbacks=params.callbacks,apiClient=this.apiClient,websocketCallbacks={onopen:function(){var _a;null===(_a=null==callbacks?void 0:callbacks.onopen)||void 0===_a||_a.call(callbacks),onopenResolve({})},onmessage:event=>{!async function handleWebSocketMessage(apiClient,onmessage,event){let serverMessage,data;data=event.data instanceof Blob?JSON.parse(await event.data.text()):JSON.parse(event.data),serverMessage=apiClient.isVertexAI()?liveServerMessageFromVertex(0,data):liveServerMessageFromMldev(0,data),onmessage(serverMessage)}(apiClient,callbacks.onmessage,event)},onerror:null!==(_a=null==callbacks?void 0:callbacks.onerror)&&void 0!==_a?_a:function(e){},onclose:null!==(_b=null==callbacks?void 0:callbacks.onclose)&&void 0!==_b?_b:function(e){}},conn=this.webSocketFactory.create(url,function headersToMap(headers){const headerMap={};return headers.forEach(((value,key)=>{headerMap[key]=value})),headerMap}(headers),websocketCallbacks);conn.connect(),await onopenPromise;let transformedModel=tModel(this.apiClient,params.model);if(this.apiClient.isVertexAI()&&transformedModel.startsWith("publishers/")){transformedModel=`projects/${this.apiClient.getProject()}/locations/${this.apiClient.getLocation()}/`+transformedModel}let clientMessage={};this.apiClient.isVertexAI()&&void 0===(null===(_c=params.config)||void 0===_c?void 0:_c.responseModalities)&&(void 0===params.config?params.config={responseModalities:[Modality.AUDIO]}:params.config.responseModalities=[Modality.AUDIO]),(null===(_d=params.config)||void 0===_d?void 0:_d.generationConfig)&&console.warn("Setting `LiveConnectConfig.generation_config` is deprecated, please set the fields on `LiveConnectConfig` directly. This will become an error in a future version (not before Q3 2025).");const liveConnectParameters={model:transformedModel,config:params.config,callbacks:params.callbacks};return clientMessage=this.apiClient.isVertexAI()?function liveConnectParametersToVertex(apiClient,fromObject){const toObject={},fromModel=getValueByPath(fromObject,["model"]);null!=fromModel&&setValueByPath(toObject,["setup","model"],tModel(apiClient,fromModel));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],liveConnectConfigToVertex(0,fromConfig,toObject)),toObject}(this.apiClient,liveConnectParameters):function liveConnectParametersToMldev(apiClient,fromObject){const toObject={},fromModel=getValueByPath(fromObject,["model"]);null!=fromModel&&setValueByPath(toObject,["setup","model"],tModel(apiClient,fromModel));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],liveConnectConfigToMldev(0,fromConfig,toObject)),toObject}(this.apiClient,liveConnectParameters),delete clientMessage.config,conn.send(JSON.stringify(clientMessage)),new Session(conn,this.apiClient)}}const defaultLiveSendClientContentParamerters={turnComplete:!0};class Session{constructor(conn,apiClient){this.conn=conn,this.apiClient=apiClient}tLiveClientContent(apiClient,params){if(null!==params.turns&&void 0!==params.turns){let contents=[];try{contents=tContents(0,params.turns),contents=apiClient.isVertexAI()?contents.map((item=>contentToVertex(0,item))):contents.map((item=>contentToMldev(0,item)))}catch(_a){throw new Error(`Failed to parse client content "turns", type: '${typeof params.turns}'`)}return{clientContent:{turns:contents,turnComplete:params.turnComplete}}}return{clientContent:{turnComplete:params.turnComplete}}}tLiveClientRealtimeInput(apiClient,params){let clientMessage={};if(!("media"in params)||!params.media)throw new Error(`Failed to convert realtime input "media", type: '${typeof params.media}'`);return clientMessage={realtimeInput:{mediaChunks:[params.media],activityStart:params.activityStart,activityEnd:params.activityEnd}},clientMessage}tLiveClienttToolResponse(apiClient,params){let functionResponses=[];if(null==params.functionResponses)throw new Error("functionResponses is required.");if(functionResponses=Array.isArray(params.functionResponses)?params.functionResponses:[params.functionResponses],0===functionResponses.length)throw new Error("functionResponses is required.");for(const functionResponse of functionResponses){if("object"!=typeof functionResponse||null===functionResponse||!("name"in functionResponse)||!("response"in functionResponse))throw new Error(`Could not parse function response, type '${typeof functionResponse}'.`);if(!apiClient.isVertexAI()&&!("id"in functionResponse))throw new Error("FunctionResponse request must have an `id` field from the response of a ToolCall.FunctionalCalls in Google AI.")}return{toolResponse:{functionResponses}}}sendClientContent(params){params=Object.assign(Object.assign({},defaultLiveSendClientContentParamerters),params);const clientMessage=this.tLiveClientContent(this.apiClient,params);this.conn.send(JSON.stringify(clientMessage))}sendRealtimeInput(params){if(null==params.media)throw new Error("Media is required.");const clientMessage=this.tLiveClientRealtimeInput(this.apiClient,params);this.conn.send(JSON.stringify(clientMessage))}sendToolResponse(params){if(null==params.functionResponses)throw new Error("Tool response parameters are required.");const clientMessage=this.tLiveClienttToolResponse(this.apiClient,params);this.conn.send(JSON.stringify(clientMessage))}close(){this.conn.close()}}class Models extends BaseModule{constructor(apiClient){super(),this.apiClient=apiClient,this.generateContent=async params=>await this.generateContentInternal(params),this.generateContentStream=async params=>await this.generateContentStreamInternal(params),this.generateImages=async params=>await this.generateImagesInternal(params).then((apiResponse=>{var _a;let positivePromptSafetyAttributes;const generatedImages=[];if(null==apiResponse?void 0:apiResponse.generatedImages)for(const generatedImage of apiResponse.generatedImages)generatedImage&&(null==generatedImage?void 0:generatedImage.safetyAttributes)&&"Positive Prompt"===(null===(_a=null==generatedImage?void 0:generatedImage.safetyAttributes)||void 0===_a?void 0:_a.contentType)?positivePromptSafetyAttributes=null==generatedImage?void 0:generatedImage.safetyAttributes:generatedImages.push(generatedImage);let response;return response=positivePromptSafetyAttributes?{generatedImages,positivePromptSafetyAttributes}:{generatedImages},response}))}async generateContentInternal(params){var _a,_b;let response,path="",queryParams={};if(this.apiClient.isVertexAI()){const body=generateContentParametersToVertex(this.apiClient,params);return path=formatMap("{model}:generateContent",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"POST",httpOptions:null===(_a=params.config)||void 0===_a?void 0:_a.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>{const resp=generateContentResponseFromVertex(this.apiClient,apiResponse),typedResp=new GenerateContentResponse;return Object.assign(typedResp,resp),typedResp}))}{const body=generateContentParametersToMldev(this.apiClient,params);return path=formatMap("{model}:generateContent",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"POST",httpOptions:null===(_b=params.config)||void 0===_b?void 0:_b.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>{const resp=generateContentResponseFromMldev(this.apiClient,apiResponse),typedResp=new GenerateContentResponse;return Object.assign(typedResp,resp),typedResp}))}}async generateContentStreamInternal(params){var _a,_b;let response,path="",queryParams={};if(this.apiClient.isVertexAI()){const body=generateContentParametersToVertex(this.apiClient,params);path=formatMap("{model}:streamGenerateContent?alt=sse",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query;const apiClient=this.apiClient;return response=apiClient.requestStream({path,queryParams,body:JSON.stringify(body),httpMethod:"POST",httpOptions:null===(_a=params.config)||void 0===_a?void 0:_a.httpOptions}),response.then((function(apiResponse){return __asyncGenerator(this,arguments,(function*(){var _a,e_1,_b,_c;try{for(var apiResponse_1_1,_d=!0,apiResponse_1=__asyncValues(apiResponse);!(_a=(apiResponse_1_1=yield __await(apiResponse_1.next())).done);_d=!0){_c=apiResponse_1_1.value,_d=!1;const chunk=_c,resp=generateContentResponseFromVertex(0,yield __await(chunk.json())),typedResp=new GenerateContentResponse;Object.assign(typedResp,resp),yield yield __await(typedResp)}}catch(e_1_1){e_1={error:e_1_1}}finally{try{_d||_a||!(_b=apiResponse_1.return)||(yield __await(_b.call(apiResponse_1)))}finally{if(e_1)throw e_1.error}}}))}))}{const body=generateContentParametersToMldev(this.apiClient,params);path=formatMap("{model}:streamGenerateContent?alt=sse",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query;const apiClient=this.apiClient;return response=apiClient.requestStream({path,queryParams,body:JSON.stringify(body),httpMethod:"POST",httpOptions:null===(_b=params.config)||void 0===_b?void 0:_b.httpOptions}),response.then((function(apiResponse){return __asyncGenerator(this,arguments,(function*(){var _a,e_2,_b,_c;try{for(var apiResponse_2_1,_d=!0,apiResponse_2=__asyncValues(apiResponse);!(_a=(apiResponse_2_1=yield __await(apiResponse_2.next())).done);_d=!0){_c=apiResponse_2_1.value,_d=!1;const chunk=_c,resp=generateContentResponseFromMldev(0,yield __await(chunk.json())),typedResp=new GenerateContentResponse;Object.assign(typedResp,resp),yield yield __await(typedResp)}}catch(e_2_1){e_2={error:e_2_1}}finally{try{_d||_a||!(_b=apiResponse_2.return)||(yield __await(_b.call(apiResponse_2)))}finally{if(e_2)throw e_2.error}}}))}))}}async embedContent(params){var _a,_b;let response,path="",queryParams={};if(this.apiClient.isVertexAI()){const body=embedContentParametersToVertex(this.apiClient,params);return path=formatMap("{model}:predict",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"POST",httpOptions:null===(_a=params.config)||void 0===_a?void 0:_a.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>{const resp=embedContentResponseFromVertex(this.apiClient,apiResponse),typedResp=new EmbedContentResponse;return Object.assign(typedResp,resp),typedResp}))}{const body=embedContentParametersToMldev(this.apiClient,params);return path=formatMap("{model}:batchEmbedContents",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"POST",httpOptions:null===(_b=params.config)||void 0===_b?void 0:_b.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>{const resp=embedContentResponseFromMldev(this.apiClient,apiResponse),typedResp=new EmbedContentResponse;return Object.assign(typedResp,resp),typedResp}))}}async generateImagesInternal(params){var _a,_b;let response,path="",queryParams={};if(this.apiClient.isVertexAI()){const body=generateImagesParametersToVertex(this.apiClient,params);return path=formatMap("{model}:predict",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"POST",httpOptions:null===(_a=params.config)||void 0===_a?void 0:_a.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>{const resp=function generateImagesResponseFromVertex(apiClient,fromObject){const toObject={},fromGeneratedImages=getValueByPath(fromObject,["predictions"]);null!=fromGeneratedImages&&(Array.isArray(fromGeneratedImages)?setValueByPath(toObject,["generatedImages"],fromGeneratedImages.map((item=>generatedImageFromVertex(0,item)))):setValueByPath(toObject,["generatedImages"],fromGeneratedImages));const fromPositivePromptSafetyAttributes=getValueByPath(fromObject,["positivePromptSafetyAttributes"]);return null!=fromPositivePromptSafetyAttributes&&setValueByPath(toObject,["positivePromptSafetyAttributes"],safetyAttributesFromVertex(0,fromPositivePromptSafetyAttributes)),toObject}(this.apiClient,apiResponse),typedResp=new GenerateImagesResponse;return Object.assign(typedResp,resp),typedResp}))}{const body=generateImagesParametersToMldev(this.apiClient,params);return path=formatMap("{model}:predict",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"POST",httpOptions:null===(_b=params.config)||void 0===_b?void 0:_b.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>{const resp=function generateImagesResponseFromMldev(apiClient,fromObject){const toObject={},fromGeneratedImages=getValueByPath(fromObject,["predictions"]);null!=fromGeneratedImages&&(Array.isArray(fromGeneratedImages)?setValueByPath(toObject,["generatedImages"],fromGeneratedImages.map((item=>generatedImageFromMldev(0,item)))):setValueByPath(toObject,["generatedImages"],fromGeneratedImages));const fromPositivePromptSafetyAttributes=getValueByPath(fromObject,["positivePromptSafetyAttributes"]);return null!=fromPositivePromptSafetyAttributes&&setValueByPath(toObject,["positivePromptSafetyAttributes"],safetyAttributesFromMldev(0,fromPositivePromptSafetyAttributes)),toObject}(this.apiClient,apiResponse),typedResp=new GenerateImagesResponse;return Object.assign(typedResp,resp),typedResp}))}}async get(params){var _a,_b;let response,path="",queryParams={};if(this.apiClient.isVertexAI()){const body=function getModelParametersToVertex(apiClient,fromObject){const toObject={},fromModel=getValueByPath(fromObject,["model"]);null!=fromModel&&setValueByPath(toObject,["_url","name"],tModel(apiClient,fromModel));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],fromConfig),toObject}(this.apiClient,params);return path=formatMap("{name}",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"GET",httpOptions:null===(_a=params.config)||void 0===_a?void 0:_a.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>modelFromVertex(this.apiClient,apiResponse)))}{const body=function getModelParametersToMldev(apiClient,fromObject){const toObject={},fromModel=getValueByPath(fromObject,["model"]);null!=fromModel&&setValueByPath(toObject,["_url","name"],tModel(apiClient,fromModel));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],fromConfig),toObject}(this.apiClient,params);return path=formatMap("{name}",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"GET",httpOptions:null===(_b=params.config)||void 0===_b?void 0:_b.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>modelFromMldev(this.apiClient,apiResponse)))}}async countTokens(params){var _a,_b;let response,path="",queryParams={};if(this.apiClient.isVertexAI()){const body=countTokensParametersToVertex(this.apiClient,params);return path=formatMap("{model}:countTokens",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"POST",httpOptions:null===(_a=params.config)||void 0===_a?void 0:_a.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>{const resp=function countTokensResponseFromVertex(apiClient,fromObject){const toObject={},fromTotalTokens=getValueByPath(fromObject,["totalTokens"]);return null!=fromTotalTokens&&setValueByPath(toObject,["totalTokens"],fromTotalTokens),toObject}(this.apiClient,apiResponse),typedResp=new CountTokensResponse;return Object.assign(typedResp,resp),typedResp}))}{const body=countTokensParametersToMldev(this.apiClient,params);return path=formatMap("{model}:countTokens",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"POST",httpOptions:null===(_b=params.config)||void 0===_b?void 0:_b.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>{const resp=function countTokensResponseFromMldev(apiClient,fromObject){const toObject={},fromTotalTokens=getValueByPath(fromObject,["totalTokens"]);null!=fromTotalTokens&&setValueByPath(toObject,["totalTokens"],fromTotalTokens);const fromCachedContentTokenCount=getValueByPath(fromObject,["cachedContentTokenCount"]);return null!=fromCachedContentTokenCount&&setValueByPath(toObject,["cachedContentTokenCount"],fromCachedContentTokenCount),toObject}(this.apiClient,apiResponse),typedResp=new CountTokensResponse;return Object.assign(typedResp,resp),typedResp}))}}async computeTokens(params){var _a;let response,path="",queryParams={};if(this.apiClient.isVertexAI()){const body=function computeTokensParametersToVertex(apiClient,fromObject){const toObject={},fromModel=getValueByPath(fromObject,["model"]);null!=fromModel&&setValueByPath(toObject,["_url","model"],tModel(apiClient,fromModel));const fromContents=getValueByPath(fromObject,["contents"]);null!=fromContents&&(Array.isArray(fromContents)?setValueByPath(toObject,["contents"],tContents(0,tContents(0,fromContents).map((item=>contentToVertex(0,item))))):setValueByPath(toObject,["contents"],tContents(0,fromContents)));const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],fromConfig),toObject}(this.apiClient,params);return path=formatMap("{model}:computeTokens",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"POST",httpOptions:null===(_a=params.config)||void 0===_a?void 0:_a.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>{const resp=function computeTokensResponseFromVertex(apiClient,fromObject){const toObject={},fromTokensInfo=getValueByPath(fromObject,["tokensInfo"]);return null!=fromTokensInfo&&setValueByPath(toObject,["tokensInfo"],fromTokensInfo),toObject}(this.apiClient,apiResponse),typedResp=new ComputeTokensResponse;return Object.assign(typedResp,resp),typedResp}))}throw new Error("This method is only supported by the Vertex AI.")}async generateVideos(params){var _a,_b;let response,path="",queryParams={};if(this.apiClient.isVertexAI()){const body=generateVideosParametersToVertex(this.apiClient,params);return path=formatMap("{model}:predictLongRunning",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"POST",httpOptions:null===(_a=params.config)||void 0===_a?void 0:_a.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>generateVideosOperationFromVertex$1(this.apiClient,apiResponse)))}{const body=generateVideosParametersToMldev(this.apiClient,params);return path=formatMap("{model}:predictLongRunning",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"POST",httpOptions:null===(_b=params.config)||void 0===_b?void 0:_b.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>generateVideosOperationFromMldev$1(this.apiClient,apiResponse)))}}}function generatedVideoFromMldev(apiClient,fromObject){const toObject={},fromVideo=getValueByPath(fromObject,["_self"]);return null!=fromVideo&&setValueByPath(toObject,["video"],function videoFromMldev(apiClient,fromObject){const toObject={},fromUri=getValueByPath(fromObject,["video","uri"]);null!=fromUri&&setValueByPath(toObject,["uri"],fromUri);const fromVideoBytes=getValueByPath(fromObject,["video","encodedVideo"]);null!=fromVideoBytes&&setValueByPath(toObject,["videoBytes"],tBytes(0,fromVideoBytes));const fromMimeType=getValueByPath(fromObject,["encoding"]);return null!=fromMimeType&&setValueByPath(toObject,["mimeType"],fromMimeType),toObject}(0,fromVideo)),toObject}function generateVideosOperationFromMldev(apiClient,fromObject){const toObject={},fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["name"],fromName);const fromMetadata=getValueByPath(fromObject,["metadata"]);null!=fromMetadata&&setValueByPath(toObject,["metadata"],fromMetadata);const fromDone=getValueByPath(fromObject,["done"]);null!=fromDone&&setValueByPath(toObject,["done"],fromDone);const fromError=getValueByPath(fromObject,["error"]);null!=fromError&&setValueByPath(toObject,["error"],fromError);const fromResponse=getValueByPath(fromObject,["response","generateVideoResponse"]);return null!=fromResponse&&setValueByPath(toObject,["response"],function generateVideosResponseFromMldev(apiClient,fromObject){const toObject={},fromGeneratedVideos=getValueByPath(fromObject,["generatedSamples"]);null!=fromGeneratedVideos&&(Array.isArray(fromGeneratedVideos)?setValueByPath(toObject,["generatedVideos"],fromGeneratedVideos.map((item=>generatedVideoFromMldev(0,item)))):setValueByPath(toObject,["generatedVideos"],fromGeneratedVideos));const fromRaiMediaFilteredCount=getValueByPath(fromObject,["raiMediaFilteredCount"]);null!=fromRaiMediaFilteredCount&&setValueByPath(toObject,["raiMediaFilteredCount"],fromRaiMediaFilteredCount);const fromRaiMediaFilteredReasons=getValueByPath(fromObject,["raiMediaFilteredReasons"]);return null!=fromRaiMediaFilteredReasons&&setValueByPath(toObject,["raiMediaFilteredReasons"],fromRaiMediaFilteredReasons),toObject}(0,fromResponse)),toObject}function generatedVideoFromVertex(apiClient,fromObject){const toObject={},fromVideo=getValueByPath(fromObject,["_self"]);return null!=fromVideo&&setValueByPath(toObject,["video"],function videoFromVertex(apiClient,fromObject){const toObject={},fromUri=getValueByPath(fromObject,["gcsUri"]);null!=fromUri&&setValueByPath(toObject,["uri"],fromUri);const fromVideoBytes=getValueByPath(fromObject,["bytesBase64Encoded"]);null!=fromVideoBytes&&setValueByPath(toObject,["videoBytes"],tBytes(0,fromVideoBytes));const fromMimeType=getValueByPath(fromObject,["mimeType"]);return null!=fromMimeType&&setValueByPath(toObject,["mimeType"],fromMimeType),toObject}(0,fromVideo)),toObject}function generateVideosOperationFromVertex(apiClient,fromObject){const toObject={},fromName=getValueByPath(fromObject,["name"]);null!=fromName&&setValueByPath(toObject,["name"],fromName);const fromMetadata=getValueByPath(fromObject,["metadata"]);null!=fromMetadata&&setValueByPath(toObject,["metadata"],fromMetadata);const fromDone=getValueByPath(fromObject,["done"]);null!=fromDone&&setValueByPath(toObject,["done"],fromDone);const fromError=getValueByPath(fromObject,["error"]);null!=fromError&&setValueByPath(toObject,["error"],fromError);const fromResponse=getValueByPath(fromObject,["response"]);return null!=fromResponse&&setValueByPath(toObject,["response"],function generateVideosResponseFromVertex(apiClient,fromObject){const toObject={},fromGeneratedVideos=getValueByPath(fromObject,["videos"]);null!=fromGeneratedVideos&&(Array.isArray(fromGeneratedVideos)?setValueByPath(toObject,["generatedVideos"],fromGeneratedVideos.map((item=>generatedVideoFromVertex(0,item)))):setValueByPath(toObject,["generatedVideos"],fromGeneratedVideos));const fromRaiMediaFilteredCount=getValueByPath(fromObject,["raiMediaFilteredCount"]);null!=fromRaiMediaFilteredCount&&setValueByPath(toObject,["raiMediaFilteredCount"],fromRaiMediaFilteredCount);const fromRaiMediaFilteredReasons=getValueByPath(fromObject,["raiMediaFilteredReasons"]);return null!=fromRaiMediaFilteredReasons&&setValueByPath(toObject,["raiMediaFilteredReasons"],fromRaiMediaFilteredReasons),toObject}(0,fromResponse)),toObject}class Operations extends BaseModule{constructor(apiClient){super(),this.apiClient=apiClient}async getVideosOperation(parameters){const operation=parameters.operation,config=parameters.config;if(void 0===operation.name||""===operation.name)throw new Error("Operation name is required.");if(this.apiClient.isVertexAI()){const resourceName=operation.name.split("/operations/")[0];let httpOptions;return config&&"httpOptions"in config&&(httpOptions=config.httpOptions),this.fetchPredictVideosOperationInternal({operationName:operation.name,resourceName,config:{httpOptions}})}return this.getVideosOperationInternal({operationName:operation.name,config})}async getVideosOperationInternal(params){var _a,_b;let response,path="",queryParams={};if(this.apiClient.isVertexAI()){const body=function getOperationParametersToVertex(apiClient,fromObject){const toObject={},fromOperationName=getValueByPath(fromObject,["operationName"]);null!=fromOperationName&&setValueByPath(toObject,["_url","operationName"],fromOperationName);const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],fromConfig),toObject}(this.apiClient,params);return path=formatMap("{operationName}",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"GET",httpOptions:null===(_a=params.config)||void 0===_a?void 0:_a.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>generateVideosOperationFromVertex(this.apiClient,apiResponse)))}{const body=function getOperationParametersToMldev(apiClient,fromObject){const toObject={},fromOperationName=getValueByPath(fromObject,["operationName"]);null!=fromOperationName&&setValueByPath(toObject,["_url","operationName"],fromOperationName);const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],fromConfig),toObject}(this.apiClient,params);return path=formatMap("{operationName}",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"GET",httpOptions:null===(_b=params.config)||void 0===_b?void 0:_b.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>generateVideosOperationFromMldev(this.apiClient,apiResponse)))}}async fetchPredictVideosOperationInternal(params){var _a;let response,path="",queryParams={};if(this.apiClient.isVertexAI()){const body=function fetchPredictOperationParametersToVertex(apiClient,fromObject){const toObject={},fromOperationName=getValueByPath(fromObject,["operationName"]);null!=fromOperationName&&setValueByPath(toObject,["operationName"],fromOperationName);const fromResourceName=getValueByPath(fromObject,["resourceName"]);null!=fromResourceName&&setValueByPath(toObject,["_url","resourceName"],fromResourceName);const fromConfig=getValueByPath(fromObject,["config"]);return null!=fromConfig&&setValueByPath(toObject,["config"],fromConfig),toObject}(this.apiClient,params);return path=formatMap("{resourceName}:fetchPredictOperation",body._url),queryParams=body._query,delete body.config,delete body._url,delete body._query,response=this.apiClient.request({path,queryParams,body:JSON.stringify(body),httpMethod:"POST",httpOptions:null===(_a=params.config)||void 0===_a?void 0:_a.httpOptions}).then((httpResponse=>httpResponse.json())),response.then((apiResponse=>generateVideosOperationFromVertex(this.apiClient,apiResponse)))}throw new Error("This method is only supported by the Vertex AI.")}}const responseLineRE=/^data: (.*)(?:\n\n|\r\r|\r\n\r\n)/;class ClientError extends Error{constructor(message,stackTrace){super(message,stackTrace?{cause:stackTrace}:{cause:(new Error).stack}),this.message=message,this.name="ClientError"}}class ServerError extends Error{constructor(message,stackTrace){super(message,stackTrace?{cause:stackTrace}:{cause:(new Error).stack}),this.message=message,this.name="ServerError"}}class ApiClient{constructor(opts){var _a,_b;this.clientOptions=Object.assign(Object.assign({},opts),{project:opts.project,location:opts.location,apiKey:opts.apiKey,vertexai:opts.vertexai});const initHttpOptions={};this.clientOptions.vertexai?(initHttpOptions.apiVersion=null!==(_a=this.clientOptions.apiVersion)&&void 0!==_a?_a:"v1beta1",this.getProject()||this.getLocation()?(initHttpOptions.baseUrl=`https://${this.clientOptions.location}-aiplatform.googleapis.com/`,this.clientOptions.apiKey=void 0):(initHttpOptions.baseUrl="https://aiplatform.googleapis.com/",this.clientOptions.project=void 0,this.clientOptions.location=void 0)):(initHttpOptions.apiVersion=null!==(_b=this.clientOptions.apiVersion)&&void 0!==_b?_b:"v1beta",initHttpOptions.baseUrl="https://generativelanguage.googleapis.com/"),initHttpOptions.headers=this.getDefaultHeaders(),this.clientOptions.httpOptions=initHttpOptions,opts.httpOptions&&(this.clientOptions.httpOptions=this.patchHttpOptions(initHttpOptions,opts.httpOptions))}isVertexAI(){var _a;return null!==(_a=this.clientOptions.vertexai)&&void 0!==_a&&_a}getProject(){return this.clientOptions.project}getLocation(){return this.clientOptions.location}getApiVersion(){if(this.clientOptions.httpOptions&&void 0!==this.clientOptions.httpOptions.apiVersion)return this.clientOptions.httpOptions.apiVersion;throw new Error("API version is not set.")}getBaseUrl(){if(this.clientOptions.httpOptions&&void 0!==this.clientOptions.httpOptions.baseUrl)return this.clientOptions.httpOptions.baseUrl;throw new Error("Base URL is not set.")}getRequestUrl(){return this.getRequestUrlInternal(this.clientOptions.httpOptions)}getHeaders(){if(this.clientOptions.httpOptions&&void 0!==this.clientOptions.httpOptions.headers)return this.clientOptions.httpOptions.headers;throw new Error("Headers are not set.")}getRequestUrlInternal(httpOptions){if(!httpOptions||void 0===httpOptions.baseUrl||void 0===httpOptions.apiVersion)throw new Error("HTTP options are not correctly set.");const urlElement=[httpOptions.baseUrl.endsWith("/")?httpOptions.baseUrl.slice(0,-1):httpOptions.baseUrl];return httpOptions.apiVersion&&""!==httpOptions.apiVersion&&urlElement.push(httpOptions.apiVersion),urlElement.join("/")}getBaseResourcePath(){return`projects/${this.clientOptions.project}/locations/${this.clientOptions.location}`}getApiKey(){return this.clientOptions.apiKey}getWebsocketBaseUrl(){const baseUrl=this.getBaseUrl(),urlParts=new URL(baseUrl);return urlParts.protocol="wss",urlParts.toString()}setBaseUrl(url){if(!this.clientOptions.httpOptions)throw new Error("HTTP options are not correctly set.");this.clientOptions.httpOptions.baseUrl=url}constructUrl(path,httpOptions,prependProjectLocation){const urlElement=[this.getRequestUrlInternal(httpOptions)];prependProjectLocation&&urlElement.push(this.getBaseResourcePath()),""!==path&&urlElement.push(path);return new URL(`${urlElement.join("/")}`)}shouldPrependVertexProjectPath(request){return!this.clientOptions.apiKey&&(!!this.clientOptions.vertexai&&(!request.path.startsWith("projects/")&&("GET"!==request.httpMethod||!request.path.startsWith("publishers/google/models"))))}async request(request){let patchedHttpOptions=this.clientOptions.httpOptions;request.httpOptions&&(patchedHttpOptions=this.patchHttpOptions(this.clientOptions.httpOptions,request.httpOptions));const prependProjectLocation=this.shouldPrependVertexProjectPath(request),url=this.constructUrl(request.path,patchedHttpOptions,prependProjectLocation);if(request.queryParams)for(const[key,value]of Object.entries(request.queryParams))url.searchParams.append(key,String(value));let requestInit={};if("GET"===request.httpMethod){if(request.body&&"{}"!==request.body)throw new Error("Request body should be empty for GET request, but got non empty request body")}else requestInit.body=request.body;return requestInit=await this.includeExtraHttpOptionsToRequestInit(requestInit,patchedHttpOptions),this.unaryApiCall(url,requestInit,request.httpMethod)}patchHttpOptions(baseHttpOptions,requestHttpOptions){const patchedHttpOptions=JSON.parse(JSON.stringify(baseHttpOptions));for(const[key,value]of Object.entries(requestHttpOptions))"object"==typeof value?patchedHttpOptions[key]=Object.assign(Object.assign({},patchedHttpOptions[key]),value):void 0!==value&&(patchedHttpOptions[key]=value);return patchedHttpOptions}async requestStream(request){let patchedHttpOptions=this.clientOptions.httpOptions;request.httpOptions&&(patchedHttpOptions=this.patchHttpOptions(this.clientOptions.httpOptions,request.httpOptions));const prependProjectLocation=this.shouldPrependVertexProjectPath(request),url=this.constructUrl(request.path,patchedHttpOptions,prependProjectLocation);url.searchParams.has("alt")&&"sse"===url.searchParams.get("alt")||url.searchParams.set("alt","sse");let requestInit={};return requestInit.body=request.body,requestInit=await this.includeExtraHttpOptionsToRequestInit(requestInit,patchedHttpOptions),this.streamApiCall(url,requestInit,request.httpMethod)}async includeExtraHttpOptionsToRequestInit(requestInit,httpOptions){if(httpOptions&&httpOptions.timeout&&httpOptions.timeout>0){const abortController=new AbortController,signal=abortController.signal;setTimeout((()=>abortController.abort()),httpOptions.timeout),requestInit.signal=signal}return requestInit.headers=await this.getHeadersInternal(httpOptions),requestInit}async unaryApiCall(url,requestInit,httpMethod){return this.apiCall(url.toString(),Object.assign(Object.assign({},requestInit),{method:httpMethod})).then((async response=>(await throwErrorIfNotOK(response),new HttpResponse(response)))).catch((e=>{throw e instanceof Error?e:new Error(JSON.stringify(e))}))}async streamApiCall(url,requestInit,httpMethod){return this.apiCall(url.toString(),Object.assign(Object.assign({},requestInit),{method:httpMethod})).then((async response=>(await throwErrorIfNotOK(response),this.processStreamResponse(response)))).catch((e=>{throw e instanceof Error?e:new Error(JSON.stringify(e))}))}processStreamResponse(response){var _a;return __asyncGenerator(this,arguments,(function*processStreamResponse_1(){const reader=null===(_a=null==response?void 0:response.body)||void 0===_a?void 0:_a.getReader(),decoder=new TextDecoder("utf-8");if(!reader)throw new Error("Response body is empty");try{let buffer="";for(;;){const{done,value}=yield __await(reader.read());if(done){if(buffer.trim().length>0)throw new Error("Incomplete JSON segment at the end");break}buffer+=decoder.decode(value);let match=buffer.match(responseLineRE);for(;match;){const processedChunkString=match[1];try{const partialResponse=new Response(processedChunkString,{headers:null==response?void 0:response.headers,status:null==response?void 0:response.status,statusText:null==response?void 0:response.statusText});yield yield __await(new HttpResponse(partialResponse)),buffer=buffer.slice(match[0].length),match=buffer.match(responseLineRE)}catch(e){throw new Error(`exception parsing stream chunk ${processedChunkString}. ${e}`)}}}}finally{reader.releaseLock()}}))}async apiCall(url,requestInit){return fetch(url,requestInit).catch((e=>{throw new Error(`exception ${e} sending request`)}))}getDefaultHeaders(){const headers={},versionHeaderValue="google-genai-sdk/0.9.0 "+this.clientOptions.userAgentExtra;return headers["User-Agent"]=versionHeaderValue,headers["x-goog-api-client"]=versionHeaderValue,headers["Content-Type"]="application/json",headers}async getHeadersInternal(httpOptions){const headers=new Headers;if(httpOptions&&httpOptions.headers){for(const[key,value]of Object.entries(httpOptions.headers))headers.append(key,value);httpOptions.timeout&&httpOptions.timeout>0&&headers.append("X-Server-Timeout",String(Math.ceil(httpOptions.timeout/1e3)))}return await this.clientOptions.auth.addAuthHeaders(headers),headers}async uploadFile(file,config){var _a;const fileToUpload={};null!=config&&(fileToUpload.mimeType=config.mimeType,fileToUpload.name=config.name,fileToUpload.displayName=config.displayName),fileToUpload.name&&!fileToUpload.name.startsWith("files/")&&(fileToUpload.name=`files/${fileToUpload.name}`);const uploader=this.clientOptions.uploader,fileStat=await uploader.stat(file);fileToUpload.sizeBytes=String(fileStat.size);const mimeType=null!==(_a=null==config?void 0:config.mimeType)&&void 0!==_a?_a:fileStat.type;if(void 0===mimeType||""===mimeType)throw new Error("Can not determine mimeType. Please provide mimeType in the config.");fileToUpload.mimeType=mimeType;const uploadUrl=await this.fetchUploadUrl(fileToUpload,config);return uploader.upload(file,uploadUrl,this)}async fetchUploadUrl(file,config){var _a;let httpOptions={};httpOptions=(null==config?void 0:config.httpOptions)?config.httpOptions:{apiVersion:"",headers:{"Content-Type":"application/json","X-Goog-Upload-Protocol":"resumable","X-Goog-Upload-Command":"start","X-Goog-Upload-Header-Content-Length":`${file.sizeBytes}`,"X-Goog-Upload-Header-Content-Type":`${file.mimeType}`}};const body={file},httpResponse=await this.request({path:formatMap("upload/v1beta/files",body._url),body:JSON.stringify(body),httpMethod:"POST",httpOptions});if(!httpResponse||!(null==httpResponse?void 0:httpResponse.headers))throw new Error("Server did not return an HttpResponse or the returned HttpResponse did not have headers.");const uploadUrl=null===(_a=null==httpResponse?void 0:httpResponse.headers)||void 0===_a?void 0:_a["x-goog-upload-url"];if(void 0===uploadUrl)throw new Error("Failed to get upload url. Server did not return the x-google-upload-url in the headers");return uploadUrl}}async function throwErrorIfNotOK(response){var _a;if(void 0===response)throw new ServerError("response is undefined");if(!response.ok){const status=response.status,statusText=response.statusText;let errorBody;errorBody=(null===(_a=response.headers.get("content-type"))||void 0===_a?void 0:_a.includes("application/json"))?await response.json():{error:{message:"exception parsing response",code:response.status,status:response.statusText}};const errorMessage=`got status: ${status} ${statusText}. ${JSON.stringify(errorBody)}`;if(status>=400&&status<500){throw new ClientError(errorMessage)}if(status>=500&&status<600){throw new ServerError(errorMessage)}throw new Error(errorMessage)}}class BrowserUploader{async upload(file,uploadUrl,apiClient){if("string"==typeof file)throw new Error("File path is not supported in browser uploader.");return await async function uploadBlob(file,uploadUrl,apiClient){var _a,_b;let fileSize=0,offset=0,response=new HttpResponse(new Response),uploadCommand="upload";for(fileSize=file.size;offset<fileSize;){const chunkSize=Math.min(8388608,fileSize-offset),chunk=file.slice(offset,offset+chunkSize);if(offset+chunkSize>=fileSize&&(uploadCommand+=", finalize"),response=await apiClient.request({path:"",body:chunk,httpMethod:"POST",httpOptions:{apiVersion:"",baseUrl:uploadUrl,headers:{"X-Goog-Upload-Command":uploadCommand,"X-Goog-Upload-Offset":String(offset),"Content-Length":String(chunkSize)}}}),offset+=chunkSize,"active"!==(null===(_a=null==response?void 0:response.headers)||void 0===_a?void 0:_a["x-goog-upload-status"]))break;if(fileSize<=offset)throw new Error("All content has been uploaded, but the upload status is not finalized.")}const responseJson=await(null==response?void 0:response.json());if("final"!==(null===(_b=null==response?void 0:response.headers)||void 0===_b?void 0:_b["x-goog-upload-status"]))throw new Error("Failed to upload file: Upload status is not finalized.");return responseJson.file}(file,uploadUrl,apiClient)}async stat(file){if("string"==typeof file)throw new Error("File path is not supported in browser uploader.");return await async function getBlobStat(file){return{size:file.size,type:file.type}}(file)}}class BrowserWebSocketFactory{create(url,headers,callbacks){return new BrowserWebSocket(url,headers,callbacks)}}class BrowserWebSocket{constructor(url,headers,callbacks){this.url=url,this.headers=headers,this.callbacks=callbacks}connect(){this.ws=new WebSocket(this.url),this.ws.onopen=this.callbacks.onopen,this.ws.onerror=this.callbacks.onerror,this.ws.onclose=this.callbacks.onclose,this.ws.onmessage=this.callbacks.onmessage}send(message){if(void 0===this.ws)throw new Error("WebSocket is not connected");this.ws.send(message)}close(){if(void 0===this.ws)throw new Error("WebSocket is not connected");this.ws.close()}}class WebAuth{constructor(apiKey){this.apiKey=apiKey}async addAuthHeaders(headers){null===headers.get("x-goog-api-key")&&headers.append("x-goog-api-key",this.apiKey)}}class GoogleGenAI{constructor(options){var _a;if(null==options.apiKey)throw new Error("An API Key must be set when running in a browser");if(options.project||options.location)throw new Error("Vertex AI project based authentication is not supported on browser runtimes. Please do not provide a project or location.");this.vertexai=null!==(_a=options.vertexai)&&void 0!==_a&&_a,this.apiKey=options.apiKey,this.apiVersion=options.apiVersion;const auth=new WebAuth(this.apiKey);this.apiClient=new ApiClient({auth,apiVersion:this.apiVersion,apiKey:this.apiKey,vertexai:this.vertexai,httpOptions:options.httpOptions,userAgentExtra:"gl-node/web",uploader:new BrowserUploader}),this.models=new Models(this.apiClient),this.live=new Live(this.apiClient,auth,new BrowserWebSocketFactory),this.chats=new Chats(this.models,this.apiClient),this.caches=new Caches(this.apiClient),this.files=new Files(this.apiClient),this.operations=new Operations(this.apiClient)}}},"./node_modules/@mui/icons-material/esm/AddComment.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _utils_createSvgIcon_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@mui/material/utils/createSvgIcon.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__=(0,_utils_createSvgIcon_js__WEBPACK_IMPORTED_MODULE_1__.A)((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("path",{d:"M21.99 4c0-1.1-.89-2-1.99-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4zM17 11h-4v4h-2v-4H7V9h4V5h2v4h4z"}),"AddComment")},"./node_modules/@mui/icons-material/esm/KeyboardArrowDown.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _utils_createSvgIcon_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@mui/material/utils/createSvgIcon.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__=(0,_utils_createSvgIcon_js__WEBPACK_IMPORTED_MODULE_1__.A)((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("path",{d:"M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6z"}),"KeyboardArrowDown")},"./node_modules/@mui/icons-material/esm/Menu.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _utils_createSvgIcon_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@mui/material/utils/createSvgIcon.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__=(0,_utils_createSvgIcon_js__WEBPACK_IMPORTED_MODULE_1__.A)((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("path",{d:"M3 18h18v-2H3zm0-5h18v-2H3zm0-7v2h18V6z"}),"Menu")},"./node_modules/@mui/icons-material/esm/MenuOpen.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _utils_createSvgIcon_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@mui/material/utils/createSvgIcon.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__=(0,_utils_createSvgIcon_js__WEBPACK_IMPORTED_MODULE_1__.A)((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("path",{d:"M3 18h13v-2H3zm0-5h10v-2H3zm0-7v2h13V6zm18 9.59L17.42 12 21 8.41 19.59 7l-5 5 5 5z"}),"MenuOpen")},"./node_modules/@mui/material/Chip/Chip.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>Chip_Chip});var react=__webpack_require__("./node_modules/react/index.js"),clsx=__webpack_require__("./node_modules/clsx/dist/clsx.mjs"),composeClasses=__webpack_require__("./node_modules/@mui/utils/esm/composeClasses/composeClasses.js"),colorManipulator=__webpack_require__("./node_modules/@mui/system/esm/colorManipulator/colorManipulator.js"),createSvgIcon=__webpack_require__("./node_modules/@mui/material/utils/createSvgIcon.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const Cancel=(0,createSvgIcon.A)((0,jsx_runtime.jsx)("path",{d:"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"}),"Cancel");var useForkRef=__webpack_require__("./node_modules/@mui/material/utils/useForkRef.js"),capitalize=__webpack_require__("./node_modules/@mui/material/utils/capitalize.js"),ButtonBase=__webpack_require__("./node_modules/@mui/material/ButtonBase/ButtonBase.js"),styled=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),memoTheme=__webpack_require__("./node_modules/@mui/material/utils/memoTheme.js"),createSimplePaletteValueFilter=__webpack_require__("./node_modules/@mui/material/utils/createSimplePaletteValueFilter.js"),DefaultPropsProvider=__webpack_require__("./node_modules/@mui/material/DefaultPropsProvider/DefaultPropsProvider.js"),generateUtilityClasses=__webpack_require__("./node_modules/@mui/utils/esm/generateUtilityClasses/generateUtilityClasses.js"),generateUtilityClass=__webpack_require__("./node_modules/@mui/utils/esm/generateUtilityClass/generateUtilityClass.js");function getChipUtilityClass(slot){return(0,generateUtilityClass.Ay)("MuiChip",slot)}const Chip_chipClasses=(0,generateUtilityClasses.A)("MuiChip",["root","sizeSmall","sizeMedium","colorDefault","colorError","colorInfo","colorPrimary","colorSecondary","colorSuccess","colorWarning","disabled","clickable","clickableColorPrimary","clickableColorSecondary","deletable","deletableColorPrimary","deletableColorSecondary","outlined","filled","outlinedPrimary","outlinedSecondary","filledPrimary","filledSecondary","avatar","avatarSmall","avatarMedium","avatarColorPrimary","avatarColorSecondary","icon","iconSmall","iconMedium","iconColorPrimary","iconColorSecondary","label","labelSmall","labelMedium","deleteIcon","deleteIconSmall","deleteIconMedium","deleteIconColorPrimary","deleteIconColorSecondary","deleteIconOutlinedColorPrimary","deleteIconOutlinedColorSecondary","deleteIconFilledColorPrimary","deleteIconFilledColorSecondary","focusVisible"]),ChipRoot=(0,styled.Ay)("div",{name:"MuiChip",slot:"Root",overridesResolver:(props,styles)=>{const{ownerState}=props,{color,iconColor,clickable,onDelete,size,variant}=ownerState;return[{[`& .${Chip_chipClasses.avatar}`]:styles.avatar},{[`& .${Chip_chipClasses.avatar}`]:styles[`avatar${(0,capitalize.A)(size)}`]},{[`& .${Chip_chipClasses.avatar}`]:styles[`avatarColor${(0,capitalize.A)(color)}`]},{[`& .${Chip_chipClasses.icon}`]:styles.icon},{[`& .${Chip_chipClasses.icon}`]:styles[`icon${(0,capitalize.A)(size)}`]},{[`& .${Chip_chipClasses.icon}`]:styles[`iconColor${(0,capitalize.A)(iconColor)}`]},{[`& .${Chip_chipClasses.deleteIcon}`]:styles.deleteIcon},{[`& .${Chip_chipClasses.deleteIcon}`]:styles[`deleteIcon${(0,capitalize.A)(size)}`]},{[`& .${Chip_chipClasses.deleteIcon}`]:styles[`deleteIconColor${(0,capitalize.A)(color)}`]},{[`& .${Chip_chipClasses.deleteIcon}`]:styles[`deleteIcon${(0,capitalize.A)(variant)}Color${(0,capitalize.A)(color)}`]},styles.root,styles[`size${(0,capitalize.A)(size)}`],styles[`color${(0,capitalize.A)(color)}`],clickable&&styles.clickable,clickable&&"default"!==color&&styles[`clickableColor${(0,capitalize.A)(color)})`],onDelete&&styles.deletable,onDelete&&"default"!==color&&styles[`deletableColor${(0,capitalize.A)(color)}`],styles[variant],styles[`${variant}${(0,capitalize.A)(color)}`]]}})((0,memoTheme.A)((({theme})=>{const textColor="light"===theme.palette.mode?theme.palette.grey[700]:theme.palette.grey[300];return{maxWidth:"100%",fontFamily:theme.typography.fontFamily,fontSize:theme.typography.pxToRem(13),display:"inline-flex",alignItems:"center",justifyContent:"center",height:32,color:(theme.vars||theme).palette.text.primary,backgroundColor:(theme.vars||theme).palette.action.selected,borderRadius:16,whiteSpace:"nowrap",transition:theme.transitions.create(["background-color","box-shadow"]),cursor:"unset",outline:0,textDecoration:"none",border:0,padding:0,verticalAlign:"middle",boxSizing:"border-box",[`&.${Chip_chipClasses.disabled}`]:{opacity:(theme.vars||theme).palette.action.disabledOpacity,pointerEvents:"none"},[`& .${Chip_chipClasses.avatar}`]:{marginLeft:5,marginRight:-6,width:24,height:24,color:theme.vars?theme.vars.palette.Chip.defaultAvatarColor:textColor,fontSize:theme.typography.pxToRem(12)},[`& .${Chip_chipClasses.avatarColorPrimary}`]:{color:(theme.vars||theme).palette.primary.contrastText,backgroundColor:(theme.vars||theme).palette.primary.dark},[`& .${Chip_chipClasses.avatarColorSecondary}`]:{color:(theme.vars||theme).palette.secondary.contrastText,backgroundColor:(theme.vars||theme).palette.secondary.dark},[`& .${Chip_chipClasses.avatarSmall}`]:{marginLeft:4,marginRight:-4,width:18,height:18,fontSize:theme.typography.pxToRem(10)},[`& .${Chip_chipClasses.icon}`]:{marginLeft:5,marginRight:-6},[`& .${Chip_chipClasses.deleteIcon}`]:{WebkitTapHighlightColor:"transparent",color:theme.vars?`rgba(${theme.vars.palette.text.primaryChannel} / 0.26)`:(0,colorManipulator.X4)(theme.palette.text.primary,.26),fontSize:22,cursor:"pointer",margin:"0 5px 0 -6px","&:hover":{color:theme.vars?`rgba(${theme.vars.palette.text.primaryChannel} / 0.4)`:(0,colorManipulator.X4)(theme.palette.text.primary,.4)}},variants:[{props:{size:"small"},style:{height:24,[`& .${Chip_chipClasses.icon}`]:{fontSize:18,marginLeft:4,marginRight:-4},[`& .${Chip_chipClasses.deleteIcon}`]:{fontSize:16,marginRight:4,marginLeft:-4}}},...Object.entries(theme.palette).filter((0,createSimplePaletteValueFilter.A)(["contrastText"])).map((([color])=>({props:{color},style:{backgroundColor:(theme.vars||theme).palette[color].main,color:(theme.vars||theme).palette[color].contrastText,[`& .${Chip_chipClasses.deleteIcon}`]:{color:theme.vars?`rgba(${theme.vars.palette[color].contrastTextChannel} / 0.7)`:(0,colorManipulator.X4)(theme.palette[color].contrastText,.7),"&:hover, &:active":{color:(theme.vars||theme).palette[color].contrastText}}}}))),{props:props=>props.iconColor===props.color,style:{[`& .${Chip_chipClasses.icon}`]:{color:theme.vars?theme.vars.palette.Chip.defaultIconColor:textColor}}},{props:props=>props.iconColor===props.color&&"default"!==props.color,style:{[`& .${Chip_chipClasses.icon}`]:{color:"inherit"}}},{props:{onDelete:!0},style:{[`&.${Chip_chipClasses.focusVisible}`]:{backgroundColor:theme.vars?`rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))`:(0,colorManipulator.X4)(theme.palette.action.selected,theme.palette.action.selectedOpacity+theme.palette.action.focusOpacity)}}},...Object.entries(theme.palette).filter((0,createSimplePaletteValueFilter.A)(["dark"])).map((([color])=>({props:{color,onDelete:!0},style:{[`&.${Chip_chipClasses.focusVisible}`]:{background:(theme.vars||theme).palette[color].dark}}}))),{props:{clickable:!0},style:{userSelect:"none",WebkitTapHighlightColor:"transparent",cursor:"pointer","&:hover":{backgroundColor:theme.vars?`rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))`:(0,colorManipulator.X4)(theme.palette.action.selected,theme.palette.action.selectedOpacity+theme.palette.action.hoverOpacity)},[`&.${Chip_chipClasses.focusVisible}`]:{backgroundColor:theme.vars?`rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))`:(0,colorManipulator.X4)(theme.palette.action.selected,theme.palette.action.selectedOpacity+theme.palette.action.focusOpacity)},"&:active":{boxShadow:(theme.vars||theme).shadows[1]}}},...Object.entries(theme.palette).filter((0,createSimplePaletteValueFilter.A)(["dark"])).map((([color])=>({props:{color,clickable:!0},style:{[`&:hover, &.${Chip_chipClasses.focusVisible}`]:{backgroundColor:(theme.vars||theme).palette[color].dark}}}))),{props:{variant:"outlined"},style:{backgroundColor:"transparent",border:theme.vars?`1px solid ${theme.vars.palette.Chip.defaultBorder}`:`1px solid ${"light"===theme.palette.mode?theme.palette.grey[400]:theme.palette.grey[700]}`,[`&.${Chip_chipClasses.clickable}:hover`]:{backgroundColor:(theme.vars||theme).palette.action.hover},[`&.${Chip_chipClasses.focusVisible}`]:{backgroundColor:(theme.vars||theme).palette.action.focus},[`& .${Chip_chipClasses.avatar}`]:{marginLeft:4},[`& .${Chip_chipClasses.avatarSmall}`]:{marginLeft:2},[`& .${Chip_chipClasses.icon}`]:{marginLeft:4},[`& .${Chip_chipClasses.iconSmall}`]:{marginLeft:2},[`& .${Chip_chipClasses.deleteIcon}`]:{marginRight:5},[`& .${Chip_chipClasses.deleteIconSmall}`]:{marginRight:3}}},...Object.entries(theme.palette).filter((0,createSimplePaletteValueFilter.A)()).map((([color])=>({props:{variant:"outlined",color},style:{color:(theme.vars||theme).palette[color].main,border:`1px solid ${theme.vars?`rgba(${theme.vars.palette[color].mainChannel} / 0.7)`:(0,colorManipulator.X4)(theme.palette[color].main,.7)}`,[`&.${Chip_chipClasses.clickable}:hover`]:{backgroundColor:theme.vars?`rgba(${theme.vars.palette[color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})`:(0,colorManipulator.X4)(theme.palette[color].main,theme.palette.action.hoverOpacity)},[`&.${Chip_chipClasses.focusVisible}`]:{backgroundColor:theme.vars?`rgba(${theme.vars.palette[color].mainChannel} / ${theme.vars.palette.action.focusOpacity})`:(0,colorManipulator.X4)(theme.palette[color].main,theme.palette.action.focusOpacity)},[`& .${Chip_chipClasses.deleteIcon}`]:{color:theme.vars?`rgba(${theme.vars.palette[color].mainChannel} / 0.7)`:(0,colorManipulator.X4)(theme.palette[color].main,.7),"&:hover, &:active":{color:(theme.vars||theme).palette[color].main}}}})))]}}))),ChipLabel=(0,styled.Ay)("span",{name:"MuiChip",slot:"Label",overridesResolver:(props,styles)=>{const{ownerState}=props,{size}=ownerState;return[styles.label,styles[`label${(0,capitalize.A)(size)}`]]}})({overflow:"hidden",textOverflow:"ellipsis",paddingLeft:12,paddingRight:12,whiteSpace:"nowrap",variants:[{props:{variant:"outlined"},style:{paddingLeft:11,paddingRight:11}},{props:{size:"small"},style:{paddingLeft:8,paddingRight:8}},{props:{size:"small",variant:"outlined"},style:{paddingLeft:7,paddingRight:7}}]});function isDeleteKeyboardEvent(keyboardEvent){return"Backspace"===keyboardEvent.key||"Delete"===keyboardEvent.key}const Chip_Chip=react.forwardRef((function Chip(inProps,ref){const props=(0,DefaultPropsProvider.b)({props:inProps,name:"MuiChip"}),{avatar:avatarProp,className,clickable:clickableProp,color="default",component:ComponentProp,deleteIcon:deleteIconProp,disabled=!1,icon:iconProp,label,onClick,onDelete,onKeyDown,onKeyUp,size="medium",variant="filled",tabIndex,skipFocusWhenDisabled=!1,...other}=props,chipRef=react.useRef(null),handleRef=(0,useForkRef.A)(chipRef,ref),handleDeleteIconClick=event=>{event.stopPropagation(),onDelete&&onDelete(event)},clickable=!(!1===clickableProp||!onClick)||clickableProp,component=clickable||onDelete?ButtonBase.A:ComponentProp||"div",ownerState={...props,component,disabled,size,color,iconColor:react.isValidElement(iconProp)&&iconProp.props.color||color,onDelete:!!onDelete,clickable,variant},classes=(ownerState=>{const{classes,disabled,size,color,iconColor,onDelete,clickable,variant}=ownerState,slots={root:["root",variant,disabled&&"disabled",`size${(0,capitalize.A)(size)}`,`color${(0,capitalize.A)(color)}`,clickable&&"clickable",clickable&&`clickableColor${(0,capitalize.A)(color)}`,onDelete&&"deletable",onDelete&&`deletableColor${(0,capitalize.A)(color)}`,`${variant}${(0,capitalize.A)(color)}`],label:["label",`label${(0,capitalize.A)(size)}`],avatar:["avatar",`avatar${(0,capitalize.A)(size)}`,`avatarColor${(0,capitalize.A)(color)}`],icon:["icon",`icon${(0,capitalize.A)(size)}`,`iconColor${(0,capitalize.A)(iconColor)}`],deleteIcon:["deleteIcon",`deleteIcon${(0,capitalize.A)(size)}`,`deleteIconColor${(0,capitalize.A)(color)}`,`deleteIcon${(0,capitalize.A)(variant)}Color${(0,capitalize.A)(color)}`]};return(0,composeClasses.A)(slots,getChipUtilityClass,classes)})(ownerState),moreProps=component===ButtonBase.A?{component:ComponentProp||"div",focusVisibleClassName:classes.focusVisible,...onDelete&&{disableRipple:!0}}:{};let deleteIcon=null;onDelete&&(deleteIcon=deleteIconProp&&react.isValidElement(deleteIconProp)?react.cloneElement(deleteIconProp,{className:(0,clsx.A)(deleteIconProp.props.className,classes.deleteIcon),onClick:handleDeleteIconClick}):(0,jsx_runtime.jsx)(Cancel,{className:(0,clsx.A)(classes.deleteIcon),onClick:handleDeleteIconClick}));let avatar=null;avatarProp&&react.isValidElement(avatarProp)&&(avatar=react.cloneElement(avatarProp,{className:(0,clsx.A)(classes.avatar,avatarProp.props.className)}));let icon=null;return iconProp&&react.isValidElement(iconProp)&&(icon=react.cloneElement(iconProp,{className:(0,clsx.A)(classes.icon,iconProp.props.className)})),(0,jsx_runtime.jsxs)(ChipRoot,{as:component,className:(0,clsx.A)(classes.root,className),disabled:!(!clickable||!disabled)||void 0,onClick,onKeyDown:event=>{event.currentTarget===event.target&&isDeleteKeyboardEvent(event)&&event.preventDefault(),onKeyDown&&onKeyDown(event)},onKeyUp:event=>{event.currentTarget===event.target&&onDelete&&isDeleteKeyboardEvent(event)&&onDelete(event),onKeyUp&&onKeyUp(event)},ref:handleRef,tabIndex:skipFocusWhenDisabled&&disabled?-1:tabIndex,ownerState,...moreProps,...other,children:[avatar||icon,(0,jsx_runtime.jsx)(ChipLabel,{className:(0,clsx.A)(classes.label),ownerState,children:label}),deleteIcon]})}))},"./node_modules/@mui/material/Zoom/Zoom.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),react_transition_group__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react-transition-group/esm/Transition.js"),_mui_utils_getReactElementRef__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@mui/utils/esm/getReactElementRef/getReactElementRef.js"),_zero_styled_index_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@mui/material/styles/useTheme.js"),_transitions_utils_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@mui/material/transitions/utils.js"),_utils_useForkRef_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@mui/material/utils/useForkRef.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");const styles={entering:{transform:"none"},entered:{transform:"none"}},__WEBPACK_DEFAULT_EXPORT__=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((function Zoom(props,ref){const theme=(0,_zero_styled_index_js__WEBPACK_IMPORTED_MODULE_2__.A)(),defaultTimeout={enter:theme.transitions.duration.enteringScreen,exit:theme.transitions.duration.leavingScreen},{addEndListener,appear=!0,children,easing,in:inProp,onEnter,onEntered,onEntering,onExit,onExited,onExiting,style,timeout=defaultTimeout,TransitionComponent=react_transition_group__WEBPACK_IMPORTED_MODULE_3__.Ay,...other}=props,nodeRef=react__WEBPACK_IMPORTED_MODULE_0__.useRef(null),handleRef=(0,_utils_useForkRef_js__WEBPACK_IMPORTED_MODULE_4__.A)(nodeRef,(0,_mui_utils_getReactElementRef__WEBPACK_IMPORTED_MODULE_5__.A)(children),ref),normalizedTransitionCallback=callback=>maybeIsAppearing=>{if(callback){const node=nodeRef.current;void 0===maybeIsAppearing?callback(node):callback(node,maybeIsAppearing)}},handleEntering=normalizedTransitionCallback(onEntering),handleEnter=normalizedTransitionCallback(((node,isAppearing)=>{(0,_transitions_utils_js__WEBPACK_IMPORTED_MODULE_6__.q)(node);const transitionProps=(0,_transitions_utils_js__WEBPACK_IMPORTED_MODULE_6__.c)({style,timeout,easing},{mode:"enter"});node.style.webkitTransition=theme.transitions.create("transform",transitionProps),node.style.transition=theme.transitions.create("transform",transitionProps),onEnter&&onEnter(node,isAppearing)})),handleEntered=normalizedTransitionCallback(onEntered),handleExiting=normalizedTransitionCallback(onExiting),handleExit=normalizedTransitionCallback((node=>{const transitionProps=(0,_transitions_utils_js__WEBPACK_IMPORTED_MODULE_6__.c)({style,timeout,easing},{mode:"exit"});node.style.webkitTransition=theme.transitions.create("transform",transitionProps),node.style.transition=theme.transitions.create("transform",transitionProps),onExit&&onExit(node)})),handleExited=normalizedTransitionCallback(onExited);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(TransitionComponent,{appear,in:inProp,nodeRef,onEnter:handleEnter,onEntered:handleEntered,onEntering:handleEntering,onExit:handleExit,onExited:handleExited,onExiting:handleExiting,addEndListener:next=>{addEndListener&&addEndListener(nodeRef.current,next)},timeout,...other,children:(state,{ownerState,...restChildProps})=>react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(children,{style:{transform:"scale(0)",visibility:"exited"!==state||inProp?void 0:"hidden",...styles[state],...style,...children.props.style},ref:handleRef,...restChildProps})})}))},"./node_modules/@mui/material/styles/ThemeProvider.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>styles_ThemeProvider_ThemeProvider});var react=__webpack_require__("./node_modules/react/index.js");const useTheme_ThemeContext=react.createContext(null);function useTheme(){return react.useContext(useTheme_ThemeContext)}const nested="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__";var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const ThemeProvider_ThemeProvider=function ThemeProvider(props){const{children,theme:localTheme}=props,outerTheme=useTheme(),theme=react.useMemo((()=>{const output=null===outerTheme?{...localTheme}:function mergeOuterLocalTheme(outerTheme,localTheme){if("function"==typeof localTheme)return localTheme(outerTheme);return{...outerTheme,...localTheme}}(outerTheme,localTheme);return null!=output&&(output[nested]=null!==outerTheme),output}),[localTheme,outerTheme]);return(0,jsx_runtime.jsx)(useTheme_ThemeContext.Provider,{value:theme,children})};var emotion_element_f0de968e_browser_esm=__webpack_require__("./node_modules/@emotion/react/dist/emotion-element-f0de968e.browser.esm.js"),useThemeWithoutDefault=__webpack_require__("./node_modules/@mui/system/esm/useThemeWithoutDefault/useThemeWithoutDefault.js"),RtlProvider=__webpack_require__("./node_modules/@mui/system/esm/RtlProvider/index.js"),DefaultPropsProvider=__webpack_require__("./node_modules/@mui/system/esm/DefaultPropsProvider/DefaultPropsProvider.js");const EMPTY_THEME={};function useThemeScoping(themeId,upperTheme,localTheme,isPrivate=!1){return react.useMemo((()=>{const resolvedTheme=themeId&&upperTheme[themeId]||upperTheme;if("function"==typeof localTheme){const mergedTheme=localTheme(resolvedTheme),result=themeId?{...upperTheme,[themeId]:mergedTheme}:mergedTheme;return isPrivate?()=>result:result}return themeId?{...upperTheme,[themeId]:localTheme}:{...upperTheme,...localTheme}}),[themeId,upperTheme,localTheme,isPrivate])}const esm_ThemeProvider_ThemeProvider=function ThemeProvider_ThemeProvider_ThemeProvider(props){const{children,theme:localTheme,themeId}=props,upperTheme=(0,useThemeWithoutDefault.A)(EMPTY_THEME),upperPrivateTheme=useTheme()||EMPTY_THEME,engineTheme=useThemeScoping(themeId,upperTheme,localTheme),privateTheme=useThemeScoping(themeId,upperPrivateTheme,localTheme,!0),rtlValue="rtl"===(themeId?engineTheme[themeId]:engineTheme).direction;return(0,jsx_runtime.jsx)(ThemeProvider_ThemeProvider,{theme:privateTheme,children:(0,jsx_runtime.jsx)(emotion_element_f0de968e_browser_esm.T.Provider,{value:engineTheme,children:(0,jsx_runtime.jsx)(RtlProvider.A,{value:rtlValue,children:(0,jsx_runtime.jsx)(DefaultPropsProvider.A,{value:themeId?engineTheme[themeId].components:engineTheme.components,children})})})})};var identifier=__webpack_require__("./node_modules/@mui/material/styles/identifier.js");function ThemeProviderNoVars({theme:themeInput,...props}){const scopedTheme=identifier.A in themeInput?themeInput[identifier.A]:void 0;return(0,jsx_runtime.jsx)(esm_ThemeProvider_ThemeProvider,{...props,themeId:scopedTheme?identifier.A:void 0,theme:scopedTheme||themeInput})}var styleFunctionSx=__webpack_require__("./node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js"),GlobalStyles=__webpack_require__("./node_modules/@mui/styled-engine/GlobalStyles/GlobalStyles.js"),useEnhancedEffect=__webpack_require__("./node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js");const DEFAULT_MODE_STORAGE_KEY="mode",DEFAULT_COLOR_SCHEME_STORAGE_KEY="color-scheme",DEFAULT_ATTRIBUTE="data-color-scheme";function noop(){}const cssVars_localStorageManager=({key,storageWindow})=>(storageWindow||"undefined"==typeof window||(storageWindow=window),{get(defaultValue){if("undefined"==typeof window)return;if(!storageWindow)return defaultValue;let value;try{value=storageWindow.localStorage.getItem(key)}catch{}return value||defaultValue},set:value=>{if(storageWindow)try{storageWindow.localStorage.setItem(key,value)}catch{}},subscribe:handler=>{if(!storageWindow)return noop;const listener=event=>{const value=event.newValue;event.key===key&&handler(value)};return storageWindow.addEventListener("storage",listener),()=>{storageWindow.removeEventListener("storage",listener)}}});function useCurrentColorScheme_noop(){}function getSystemMode(mode){if("undefined"!=typeof window&&"function"==typeof window.matchMedia&&"system"===mode){return window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"}}function processState(state,callback){return"light"===state.mode||"system"===state.mode&&"light"===state.systemMode?callback("light"):"dark"===state.mode||"system"===state.mode&&"dark"===state.systemMode?callback("dark"):void 0}function useCurrentColorScheme(options){const{defaultMode="light",defaultLightColorScheme,defaultDarkColorScheme,supportedColorSchemes=[],modeStorageKey=DEFAULT_MODE_STORAGE_KEY,colorSchemeStorageKey=DEFAULT_COLOR_SCHEME_STORAGE_KEY,storageWindow="undefined"==typeof window?void 0:window,storageManager=cssVars_localStorageManager,noSsr=!1}=options,joinedColorSchemes=supportedColorSchemes.join(","),isMultiSchemes=supportedColorSchemes.length>1,modeStorage=react.useMemo((()=>storageManager?.({key:modeStorageKey,storageWindow})),[storageManager,modeStorageKey,storageWindow]),lightStorage=react.useMemo((()=>storageManager?.({key:`${colorSchemeStorageKey}-light`,storageWindow})),[storageManager,colorSchemeStorageKey,storageWindow]),darkStorage=react.useMemo((()=>storageManager?.({key:`${colorSchemeStorageKey}-dark`,storageWindow})),[storageManager,colorSchemeStorageKey,storageWindow]),[state,setState]=react.useState((()=>{const initialMode=modeStorage?.get(defaultMode)||defaultMode,lightColorScheme=lightStorage?.get(defaultLightColorScheme)||defaultLightColorScheme,darkColorScheme=darkStorage?.get(defaultDarkColorScheme)||defaultDarkColorScheme;return{mode:initialMode,systemMode:getSystemMode(initialMode),lightColorScheme,darkColorScheme}})),[isClient,setIsClient]=react.useState(noSsr||!isMultiSchemes);react.useEffect((()=>{setIsClient(!0)}),[]);const colorScheme=function getColorScheme(state){return processState(state,(mode=>"light"===mode?state.lightColorScheme:"dark"===mode?state.darkColorScheme:void 0))}(state),setMode=react.useCallback((mode=>{setState((currentState=>{if(mode===currentState.mode)return currentState;const newMode=mode??defaultMode;return modeStorage?.set(newMode),{...currentState,mode:newMode,systemMode:getSystemMode(newMode)}}))}),[modeStorage,defaultMode]),setColorScheme=react.useCallback((value=>{value?"string"==typeof value?value&&!joinedColorSchemes.includes(value)?console.error(`\`${value}\` does not exist in \`theme.colorSchemes\`.`):setState((currentState=>{const newState={...currentState};return processState(currentState,(mode=>{"light"===mode&&(lightStorage?.set(value),newState.lightColorScheme=value),"dark"===mode&&(darkStorage?.set(value),newState.darkColorScheme=value)})),newState})):setState((currentState=>{const newState={...currentState},newLightColorScheme=null===value.light?defaultLightColorScheme:value.light,newDarkColorScheme=null===value.dark?defaultDarkColorScheme:value.dark;return newLightColorScheme&&(joinedColorSchemes.includes(newLightColorScheme)?(newState.lightColorScheme=newLightColorScheme,lightStorage?.set(newLightColorScheme)):console.error(`\`${newLightColorScheme}\` does not exist in \`theme.colorSchemes\`.`)),newDarkColorScheme&&(joinedColorSchemes.includes(newDarkColorScheme)?(newState.darkColorScheme=newDarkColorScheme,darkStorage?.set(newDarkColorScheme)):console.error(`\`${newDarkColorScheme}\` does not exist in \`theme.colorSchemes\`.`)),newState})):setState((currentState=>(lightStorage?.set(defaultLightColorScheme),darkStorage?.set(defaultDarkColorScheme),{...currentState,lightColorScheme:defaultLightColorScheme,darkColorScheme:defaultDarkColorScheme})))}),[joinedColorSchemes,lightStorage,darkStorage,defaultLightColorScheme,defaultDarkColorScheme]),handleMediaQuery=react.useCallback((event=>{"system"===state.mode&&setState((currentState=>{const systemMode=event?.matches?"dark":"light";return currentState.systemMode===systemMode?currentState:{...currentState,systemMode}}))}),[state.mode]),mediaListener=react.useRef(handleMediaQuery);return mediaListener.current=handleMediaQuery,react.useEffect((()=>{if("function"!=typeof window.matchMedia||!isMultiSchemes)return;const handler=(...args)=>mediaListener.current(...args),media=window.matchMedia("(prefers-color-scheme: dark)");return media.addListener(handler),handler(media),()=>{media.removeListener(handler)}}),[isMultiSchemes]),react.useEffect((()=>{if(isMultiSchemes){const unsubscribeMode=modeStorage?.subscribe((value=>{value&&!["light","dark","system"].includes(value)||setMode(value||defaultMode)}))||useCurrentColorScheme_noop,unsubscribeLight=lightStorage?.subscribe((value=>{value&&!joinedColorSchemes.match(value)||setColorScheme({light:value})}))||useCurrentColorScheme_noop,unsubscribeDark=darkStorage?.subscribe((value=>{value&&!joinedColorSchemes.match(value)||setColorScheme({dark:value})}))||useCurrentColorScheme_noop;return()=>{unsubscribeMode(),unsubscribeLight(),unsubscribeDark()}}}),[setColorScheme,setMode,joinedColorSchemes,defaultMode,storageWindow,isMultiSchemes,modeStorage,lightStorage,darkStorage]),{...state,mode:isClient?state.mode:void 0,systemMode:isClient?state.systemMode:void 0,colorScheme:isClient?colorScheme:void 0,setMode,setColorScheme}}var createTheme=__webpack_require__("./node_modules/@mui/material/styles/createTheme.js"),createTypography=__webpack_require__("./node_modules/@mui/material/styles/createTypography.js");const defaultConfig={attribute:"data-mui-color-scheme",colorSchemeStorageKey:"mui-color-scheme",defaultLightColorScheme:"light",defaultDarkColorScheme:"dark",modeStorageKey:"mui-mode"},{CssVarsProvider:InternalCssVarsProvider,useColorScheme,getInitColorSchemeScript:deprecatedGetInitColorSchemeScript}=function createCssVarsProvider(options){const{themeId,theme:defaultTheme={},modeStorageKey:defaultModeStorageKey=DEFAULT_MODE_STORAGE_KEY,colorSchemeStorageKey:defaultColorSchemeStorageKey=DEFAULT_COLOR_SCHEME_STORAGE_KEY,disableTransitionOnChange:designSystemTransitionOnChange=!1,defaultColorScheme,resolveTheme}=options,defaultContext={allColorSchemes:[],colorScheme:void 0,darkColorScheme:void 0,lightColorScheme:void 0,mode:void 0,setColorScheme:()=>{},setMode:()=>{},systemMode:void 0},ColorSchemeContext=react.createContext(void 0),defaultColorSchemes={},defaultComponents={},defaultLightColorScheme="string"==typeof defaultColorScheme?defaultColorScheme:defaultColorScheme.light,defaultDarkColorScheme="string"==typeof defaultColorScheme?defaultColorScheme:defaultColorScheme.dark;return{CssVarsProvider:function CssVarsProvider(props){const{children,theme:themeProp,modeStorageKey=defaultModeStorageKey,colorSchemeStorageKey=defaultColorSchemeStorageKey,disableTransitionOnChange=designSystemTransitionOnChange,storageManager,storageWindow="undefined"==typeof window?void 0:window,documentNode="undefined"==typeof document?void 0:document,colorSchemeNode="undefined"==typeof document?void 0:document.documentElement,disableNestedContext=!1,disableStyleSheetGeneration=!1,defaultMode:initialMode="system",noSsr}=props,hasMounted=react.useRef(!1),upperTheme=useTheme(),ctx=react.useContext(ColorSchemeContext),nested=!!ctx&&!disableNestedContext,initialTheme=react.useMemo((()=>themeProp||("function"==typeof defaultTheme?defaultTheme():defaultTheme)),[themeProp]),scopedTheme=initialTheme[themeId],restThemeProp=scopedTheme||initialTheme,{colorSchemes=defaultColorSchemes,components=defaultComponents,cssVarPrefix}=restThemeProp,joinedColorSchemes=Object.keys(colorSchemes).filter((k=>!!colorSchemes[k])).join(","),allColorSchemes=react.useMemo((()=>joinedColorSchemes.split(",")),[joinedColorSchemes]),defaultLightColorScheme="string"==typeof defaultColorScheme?defaultColorScheme:defaultColorScheme.light,defaultDarkColorScheme="string"==typeof defaultColorScheme?defaultColorScheme:defaultColorScheme.dark,defaultMode=colorSchemes[defaultLightColorScheme]&&colorSchemes[defaultDarkColorScheme]?initialMode:colorSchemes[restThemeProp.defaultColorScheme]?.palette?.mode||restThemeProp.palette?.mode,{mode:stateMode,setMode,systemMode,lightColorScheme,darkColorScheme,colorScheme:stateColorScheme,setColorScheme}=useCurrentColorScheme({supportedColorSchemes:allColorSchemes,defaultLightColorScheme,defaultDarkColorScheme,modeStorageKey,colorSchemeStorageKey,defaultMode,storageManager,storageWindow,noSsr});let mode=stateMode,colorScheme=stateColorScheme;nested&&(mode=ctx.mode,colorScheme=ctx.colorScheme);const memoTheme=react.useMemo((()=>{const calculatedColorScheme=colorScheme||restThemeProp.defaultColorScheme,themeVars=restThemeProp.generateThemeVars?.()||restThemeProp.vars,theme={...restThemeProp,components,colorSchemes,cssVarPrefix,vars:themeVars};if("function"==typeof theme.generateSpacing&&(theme.spacing=theme.generateSpacing()),calculatedColorScheme){const scheme=colorSchemes[calculatedColorScheme];scheme&&"object"==typeof scheme&&Object.keys(scheme).forEach((schemeKey=>{scheme[schemeKey]&&"object"==typeof scheme[schemeKey]?theme[schemeKey]={...theme[schemeKey],...scheme[schemeKey]}:theme[schemeKey]=scheme[schemeKey]}))}return resolveTheme?resolveTheme(theme):theme}),[restThemeProp,colorScheme,components,colorSchemes,cssVarPrefix]),colorSchemeSelector=restThemeProp.colorSchemeSelector;(0,useEnhancedEffect.A)((()=>{if(colorScheme&&colorSchemeNode&&colorSchemeSelector&&"media"!==colorSchemeSelector){const selector=colorSchemeSelector;let rule=colorSchemeSelector;if("class"===selector&&(rule=".%s"),"data"===selector&&(rule="[data-%s]"),selector?.startsWith("data-")&&!selector.includes("%s")&&(rule=`[${selector}="%s"]`),rule.startsWith("."))colorSchemeNode.classList.remove(...allColorSchemes.map((scheme=>rule.substring(1).replace("%s",scheme)))),colorSchemeNode.classList.add(rule.substring(1).replace("%s",colorScheme));else{const matches=rule.replace("%s",colorScheme).match(/\[([^\]]+)\]/);if(matches){const[attr,value]=matches[1].split("=");value||allColorSchemes.forEach((scheme=>{colorSchemeNode.removeAttribute(attr.replace(colorScheme,scheme))})),colorSchemeNode.setAttribute(attr,value?value.replace(/"|'/g,""):"")}else colorSchemeNode.setAttribute(rule,colorScheme)}}}),[colorScheme,colorSchemeSelector,colorSchemeNode,allColorSchemes]),react.useEffect((()=>{let timer;if(disableTransitionOnChange&&hasMounted.current&&documentNode){const css=documentNode.createElement("style");css.appendChild(documentNode.createTextNode("*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}")),documentNode.head.appendChild(css),window.getComputedStyle(documentNode.body),timer=setTimeout((()=>{documentNode.head.removeChild(css)}),1)}return()=>{clearTimeout(timer)}}),[colorScheme,disableTransitionOnChange,documentNode]),react.useEffect((()=>(hasMounted.current=!0,()=>{hasMounted.current=!1})),[]);const contextValue=react.useMemo((()=>({allColorSchemes,colorScheme,darkColorScheme,lightColorScheme,mode,setColorScheme,setMode,systemMode})),[allColorSchemes,colorScheme,darkColorScheme,lightColorScheme,mode,setColorScheme,setMode,systemMode,memoTheme.colorSchemeSelector]);let shouldGenerateStyleSheet=!0;(disableStyleSheetGeneration||!1===restThemeProp.cssVariables||nested&&upperTheme?.cssVarPrefix===cssVarPrefix)&&(shouldGenerateStyleSheet=!1);const element=(0,jsx_runtime.jsxs)(react.Fragment,{children:[(0,jsx_runtime.jsx)(esm_ThemeProvider_ThemeProvider,{themeId:scopedTheme?themeId:void 0,theme:memoTheme,children}),shouldGenerateStyleSheet&&(0,jsx_runtime.jsx)(GlobalStyles.A,{styles:memoTheme.generateStyleSheets?.()||[]})]});return nested?element:(0,jsx_runtime.jsx)(ColorSchemeContext.Provider,{value:contextValue,children:element})},useColorScheme:()=>react.useContext(ColorSchemeContext)||defaultContext,getInitColorSchemeScript:params=>function InitColorSchemeScript(options){const{defaultMode="system",defaultLightColorScheme="light",defaultDarkColorScheme="dark",modeStorageKey=DEFAULT_MODE_STORAGE_KEY,colorSchemeStorageKey=DEFAULT_COLOR_SCHEME_STORAGE_KEY,attribute:initialAttribute=DEFAULT_ATTRIBUTE,colorSchemeNode="document.documentElement",nonce}=options||{};let setter="",attribute=initialAttribute;if("class"===initialAttribute&&(attribute=".%s"),"data"===initialAttribute&&(attribute="[data-%s]"),attribute.startsWith(".")){const selector=attribute.substring(1);setter+=`${colorSchemeNode}.classList.remove('${selector}'.replace('%s', light), '${selector}'.replace('%s', dark));\n      ${colorSchemeNode}.classList.add('${selector}'.replace('%s', colorScheme));`}const matches=attribute.match(/\[([^\]]+)\]/);if(matches){const[attr,value]=matches[1].split("=");value||(setter+=`${colorSchemeNode}.removeAttribute('${attr}'.replace('%s', light));\n      ${colorSchemeNode}.removeAttribute('${attr}'.replace('%s', dark));`),setter+=`\n      ${colorSchemeNode}.setAttribute('${attr}'.replace('%s', colorScheme), ${value?`${value}.replace('%s', colorScheme)`:'""'});`}else setter+=`${colorSchemeNode}.setAttribute('${attribute}', colorScheme);`;return(0,jsx_runtime.jsx)("script",{suppressHydrationWarning:!0,nonce:"undefined"==typeof window?nonce:"",dangerouslySetInnerHTML:{__html:`(function() {\ntry {\n  let colorScheme = '';\n  const mode = localStorage.getItem('${modeStorageKey}') || '${defaultMode}';\n  const dark = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';\n  const light = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';\n  if (mode === 'system') {\n    // handle system mode\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      colorScheme = dark\n    } else {\n      colorScheme = light\n    }\n  }\n  if (mode === 'light') {\n    colorScheme = light;\n  }\n  if (mode === 'dark') {\n    colorScheme = dark;\n  }\n  if (colorScheme) {\n    ${setter}\n  }\n} catch(e){}})();`}},"mui-color-scheme-init")}({colorSchemeStorageKey:defaultColorSchemeStorageKey,defaultLightColorScheme,defaultDarkColorScheme,modeStorageKey:defaultModeStorageKey,...params})}}({themeId:identifier.A,theme:()=>(0,createTheme.A)({cssVariables:!0}),colorSchemeStorageKey:defaultConfig.colorSchemeStorageKey,modeStorageKey:defaultConfig.modeStorageKey,defaultColorScheme:{light:defaultConfig.defaultLightColorScheme,dark:defaultConfig.defaultDarkColorScheme},resolveTheme:theme=>{const newTheme={...theme,typography:(0,createTypography.A)(theme.palette,theme.typography)};return newTheme.unstable_sx=function sx(props){return(0,styleFunctionSx.A)({sx:props,theme:this})},newTheme}});const CssVarsProvider=InternalCssVarsProvider;function styles_ThemeProvider_ThemeProvider({theme,...props}){if("function"==typeof theme)return(0,jsx_runtime.jsx)(ThemeProviderNoVars,{theme,...props});const muiTheme=identifier.A in theme?theme[identifier.A]:theme;return"colorSchemes"in muiTheme?(0,jsx_runtime.jsx)(CssVarsProvider,{theme,...props}):"vars"in muiTheme?(0,jsx_runtime.jsx)(ThemeProviderNoVars,{theme,...props}):(0,jsx_runtime.jsx)(ThemeProviderNoVars,{theme:{...theme,vars:null},...props})}}}]);