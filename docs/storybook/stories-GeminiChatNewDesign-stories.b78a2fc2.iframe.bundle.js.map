{"version":3,"file":"stories-GeminiChatNewDesign-stories.b78a2fc2.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;AAsDA","sources":["webpack://react-neuro/./src/pages/GeminiChatNewDesign/index.tsx"],"sourcesContent":["import { ThemeProvider } from \"@emotion/react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  CircularProgress,\r\n  Container,\r\n  createTheme,\r\n  CssBaseline,\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  GlobalStyles,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  Paper,\r\n  Stack,\r\n  TextField,\r\n  Typography,\r\n  useMediaQuery,\r\n} from \"@mui/material\";\r\nimport { grey } from \"@mui/material/colors\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport VpnKeyIcon from \"@mui/icons-material/VpnKey\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\nimport { IChatMessage, ROLE_NAMES } from \"../../interfaces/ChatHistoryInterfaces\";\r\nimport { useAgentKey } from \"../../hooks/useAgentKey\";\r\nimport { useGoogleGenerativeAI } from \"../../hooks/useGoogleGenerativeAI\";\r\nimport { MaterialMarkdown } from \"../../components/MaterialMarkdown\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\n\r\nconst ChatTextarea = styled.textarea`\r\n  overflow: hidden;\r\n  font-size: 16px;\r\n  resize: none;\r\n  width: 100%;\r\n  display: block;\r\n  box-sizing: border-box;\r\n  -webkit-box-sizing: border-box;\r\n  -moz-box-sizing: border-box;\r\n  outline: none;\r\n  outline-style: none;\r\n  border: none;\r\n  margin: 0;\r\n  padding: 0;\r\n  min-height: 60px;\r\n  background-color: transparent;\r\n  color: white;\r\n  &::placeholder {\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    mode: \"dark\",\r\n  },\r\n});\r\n\r\nexport const GeminiChatNewDesign = () => {\r\n  // const [input, setInput] = useState(\"\");\r\n  const { apiKey, setApiKey, deleteKey } = useAgentKey();\r\n  const { googleGenerativeAI } = useGoogleGenerativeAI(apiKey);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [textareaValue, setTextareaValue] = useState<string>(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const abortControllerRef = useRef<AbortController | null>(null);\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"md\"));\r\n  const chatHistoryEnd = useRef<HTMLDivElement>(null);\r\n  const [messages, setMessages] = useState<IChatMessage[]>(() => {\r\n    try {\r\n      const savedMessages = localStorage.getItem(\"MESSAGES_KEY\");\r\n      if (savedMessages) {\r\n        const parsedMessages: IChatMessage[] = JSON.parse(savedMessages);\r\n        if (parsedMessages.length > 0) {\r\n          return parsedMessages;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error load from localStorage key MESSAGES_KEY:\", error);\r\n    }\r\n    return [];\r\n  });\r\n\r\n  useEffect(() => {\r\n    try {\r\n      const valueToStore = JSON.stringify(messages);\r\n      localStorage.setItem(\"MESSAGES_KEY\", valueToStore);\r\n    } catch (error) {\r\n      console.error(\"Error saving to localStorage key MESSAGES_KEY:\", error);\r\n    }\r\n  }, [messages]);\r\n\r\n  const scrollToBottom = () => {\r\n    if (chatHistoryEnd.current) {\r\n      chatHistoryEnd.current.scrollIntoView({\r\n        behavior: \"auto\",\r\n        block: \"center\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const handleDialogClickOpen = () => {\r\n    setOpenDialog(true);\r\n  };\r\n  const handleDialogClose = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handle–°hange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const target = e.target;\r\n    setTextareaValue(target.value);\r\n\r\n    if (textareaRef.current) {\r\n      textareaRef.current.style.height = \"auto\";\r\n      textareaRef.current.style.height = `${target.scrollHeight}px`;\r\n    }\r\n  };\r\n\r\n  const clearMessages = () => {\r\n    setMessages([]);\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!loading) {\r\n      const inputText = textareaValue;\r\n      setTextareaValue(\"\");\r\n      if (!inputText.trim()) return;\r\n      abortControllerRef.current = new AbortController();\r\n\r\n      setLoading(true);\r\n      setError(\"\");\r\n\r\n      const messagesWithInput = [...messages, { parts: [{ text: inputText }], role: ROLE_NAMES.USER }];\r\n      setMessages(messagesWithInput);\r\n\r\n      try {\r\n        const model = googleGenerativeAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\r\n        const result = await model.generateContentStream({ contents: messagesWithInput }, { signal: abortControllerRef.current?.signal });\r\n        setMessages((p) => [...p, { parts: [{ text: \"\" }], role: ROLE_NAMES.MODEL }]);\r\n        // let response = \"\";\r\n        for await (const chunk of result.stream) {\r\n          const chunkText = chunk.text();\r\n          // response += chunkText;\r\n          setMessages((previusMessages) => {\r\n            const newMessages = [...previusMessages];\r\n            newMessages[newMessages.length - 1].parts[0].text += chunkText;\r\n            return newMessages;\r\n          });\r\n        }\r\n      } catch (error) {\r\n        setError(\"Error: \" + (error instanceof Error ? error.message : \"Failed to fetch\"));\r\n        console.error(\"API Error:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n        abortControllerRef.current = null;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <GlobalStyles\r\n        styles={{\r\n          body: {\r\n            overflow: \"auto\",\r\n          },\r\n        }}\r\n      />\r\n      <Container>\r\n        <Container sx={{ pb: 19, pt: 8 }}>\r\n          <List sx={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            {messages.map(({ role, parts }: IChatMessage, index) => (\r\n              <ListItem\r\n                key={index}\r\n                sx={{\r\n                  justifyContent: role === \"user\" ? \"flex-end\" : \"flex-start\",\r\n                  alignItems: \"flex-start\",\r\n                }}\r\n              >\r\n                <Paper sx={role === \"user\" ? { p: 1, backgroundColor: grey[600] } : { p: 1 }}>\r\n                  <MaterialMarkdown content={parts[0].text} />\r\n                </Paper>\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n          <div ref={chatHistoryEnd} />\r\n        </Container>\r\n        <Container\r\n          sx={{\r\n            position: \"fixed\",\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            mt: 1,\r\n          }}\r\n        >\r\n          <Box sx={{ display: \"flex\", p: 1, backgroundColor: grey[900], borderRadius: 2, \"&>:not(button:first-of-type)\": { ml: 2 } }}>\r\n            <Button\r\n              onClick={handleDialogClickOpen}\r\n              startIcon={<VpnKeyIcon />}\r\n              variant=\"contained\"\r\n              sx={{\r\n                backgroundColor: grey[500],\r\n                \"&:hover\": {\r\n                  backgroundColor: grey[600],\r\n                },\r\n                color: \"black\",\r\n              }}\r\n            >\r\n              API Key\r\n            </Button>\r\n            <Button\r\n              onClick={clearMessages}\r\n              startIcon={<DeleteIcon />}\r\n              variant=\"contained\"\r\n              sx={{\r\n                backgroundColor: grey[500],\r\n                \"&:hover\": {\r\n                  backgroundColor: grey[600],\r\n                },\r\n                color: \"black\",\r\n              }}\r\n            >\r\n              Clear Chat\r\n            </Button>\r\n            <Dialog open={openDialog} onClose={handleDialogClose}>\r\n              <DialogContent>\r\n                <DialogTitle sx={{ m: 0, p: 2 }} id=\"customized-dialog-title\">\r\n                  Gemini API Key\r\n                </DialogTitle>\r\n                <IconButton\r\n                  aria-label=\"close\"\r\n                  onClick={handleDialogClose}\r\n                  sx={(theme) => ({\r\n                    position: \"absolute\",\r\n                    right: 8,\r\n                    top: 8,\r\n                    color: theme.palette.grey[500],\r\n                  })}\r\n                >\r\n                  <CloseIcon />\r\n                </IconButton>\r\n                <Stack spacing={{ xs: 1, sm: 2 }} sx={{ width: { sm: \"300px\", md: \"500px\" } }}>\r\n                  <TextField\r\n                    autoComplete=\"off\"\r\n                    fullWidth\r\n                    type=\"password\"\r\n                    label=\"Enter your key\"\r\n                    value={apiKey}\r\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => setApiKey(event.target.value)}\r\n                  />\r\n                  <Button\r\n                    onClick={() => {\r\n                      deleteKey();\r\n                    }}\r\n                    variant=\"contained\"\r\n                    color=\"error\"\r\n                  >\r\n                    Delete Key\r\n                  </Button>\r\n                </Stack>\r\n              </DialogContent>\r\n            </Dialog>\r\n          </Box>\r\n        </Container>\r\n        <Container\r\n          sx={{\r\n            backgroundColor: theme.palette.background.default,\r\n            position: \"fixed\",\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0,\r\n          }}\r\n        >\r\n          <Box\r\n            sx={{\r\n              borderRadius: 2,\r\n              backgroundColor: grey[800],\r\n              mb: 3,\r\n              transform: \"translateZ(0)\",\r\n            }}\r\n          >\r\n            <Box\r\n              sx={{\r\n                padding: 2,\r\n              }}\r\n            >\r\n              <form\r\n                onSubmit={handleSubmit}\r\n                onKeyDown={(e: React.KeyboardEvent) => {\r\n                  if (e.ctrlKey && (e.key === \"Enter\" || e.metaKey)) {\r\n                    e.preventDefault();\r\n                    handleSubmit(e);\r\n                  }\r\n                  if (e.key === \"Enter\" && !e.ctrlKey && !e.metaKey) {\r\n                    e.preventDefault();\r\n                  }\r\n                }}\r\n              >\r\n                <ChatTextarea\r\n                  placeholder=\"Enter your question\"\r\n                  ref={textareaRef}\r\n                  value={textareaValue}\r\n                  onChange={handle–°hange}\r\n                  onKeyDown={(e) => {\r\n                    if (e.key === \"Enter\" && !e.ctrlKey && !e.metaKey) {\r\n                      e.preventDefault();\r\n                    }\r\n                  }}\r\n                  disabled={loading}\r\n                />\r\n                <Box\r\n                  sx={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"right\",\r\n                  }}\r\n                >\r\n                  {isMobile ? null : (\r\n                    <Typography variant=\"caption\" sx={{ color: grey[600], mr: 4 }}>\r\n                      To send, press Control(Ctrl) + Enter\r\n                    </Typography>\r\n                  )}\r\n                  <Button\r\n                    type=\"submit\"\r\n                    endIcon={<SendIcon />}\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    disabled={loading}\r\n                    startIcon={loading ? <CircularProgress size={20} /> : null}\r\n                    sx={{\r\n                      borderRadius: 4,\r\n                      backgroundColor: grey[500],\r\n                      \"&:hover\": {\r\n                        backgroundColor: grey[600],\r\n                      },\r\n                      color: \"black\",\r\n                    }}\r\n                  >\r\n                    {loading ? \"Processing...\" : \"Send\"}\r\n                  </Button>\r\n                </Box>\r\n              </form>\r\n            </Box>\r\n          </Box>\r\n        </Container>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n"],"names":[],"sourceRoot":""}